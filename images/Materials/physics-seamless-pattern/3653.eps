%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1404.i029.083.F.m005.c0.science seamless pattern 3.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Даша
%%CreationDate: 4/7/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 21805 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45C8FD06C7823C99BB99BBBBBB99BBBBBBA8FD08FFCEC7C7C7C8C7C7
%C7C8C7C7C7C8C7C7C7C8FFFFFFA9060659FD05FF99BBA8FFFFFFAFFD05FF
%7E529AFD05FF3C1A14FD07FFC8C8FF8B141B1A1A1A1B1A1A3CFFC8C8FD0C
%FFC9C8C7C7C7C8C7C7C7C8C7C7C7C1C7C7C79F83131A51BB92BB92BB92BB
%92BB927DFD08FFC9C7C7C7C1C7C7C7C1C7C7C7C1C7C7C7C8FFFFFFA82E00
%53FFFFFFAF3699BBFFFFAF3C1A141A60FFFFFFA8762EFFFFFFA91A143CFD
%07FFC9C9FF84360D130D130D13138BFFFFC8FD0DFFCACEFD06C7C1C7C7C7
%A67C833B1A141B52BB92BB99BB92BB99BB989928FD09FFFD05C7C8C7C7C7
%C8FD05C7CFFD04FF530606AFFF8B1AA8B4C2FFAF60AFFF61141A3CFFFFFF
%C27D28A9FF8B141A85FD0BFF7D0606282828007DFD14FFA77C75C89FC7C1
%C8A6141A141A141406286FBB92BB92BB92BB92BB99287EFD08FFCFC0C7C1
%C7C1C7C1C7C1C7C1C7C0C8FD05FFA906062E6114FFCAB49AFF60AFFFFFFF
%3C131A84FFFFC2CFA8067E1A1414FD0CFF7D00280628060652FD15FF842F
%002806280613060C141359282806286FBBBBBB99BBBBBBB4C3067EFD09FF
%CEC7C7C7C8C7C7C7C8C7C7C7C8CFFD06FF7D06282FFFFFCA92C3FF3DAFFF
%FFFF3C1A1467FFFFC2FFFFFF0D1A1AAFFD0CFF5906062E28280659FD17FF
%842E28062806537E849A8C6F062806062799B4BB92BB92C17D0653FD09FF
%CAC7C1C7C1C7C1C7C1C7C1C7C9FD06FFC2925206287DFFC3B4A0FF1460FF
%FF841A141A60FFFFC3CAFF601A1360FD0DFF7E06280628060653FD19FF84
%7E5359FFFFFFCA938C9328290628287699BBB4BBA12F0084FD0AFFCAC7C7
%C7C1C7C7C7C1C7C9FD06FFCF92BB985206287ECFB4C3FF61143C3C1A141A
%148BFFFFC2FF601A1A5A28AFFD0DFF8B1314131460FD22FFA8938C934B28
%06060628274B27280028A8FD0BFFCAC9C8C9C9CEC8C8C9FD07FFA8BB92BB
%9253000652BBC2FFA81A1314131A133CAFFFFFA1351A148BCA2828FD0EFF
%AF3C6084FD25FFC393BB934C06280606062806287EFD1DFFA0BB92C3FF7E
%060627A0FFFFAF3C141A1461AFFFFFAF141A1AAFFFFF7D067EFD37FFCAA1
%C3C2A153532828285384FD1DFFAF1A35CAFFFFFFA82806067DA8FFFFAF84
%AFFFFFA860141A3CFD04FFA80053FD51FFCFFD0EFFAF141BAFFD05FF4B28
%062E7DFD05FF601A143C7DFD05FF7D0628FD1DFFCFFD2BFF8435603584FF
%FFFFCFCAFFFFFF84603660A8FD05FF841A1360FD05FFBB6E530606067D84
%60141A1467A1C2FFFFA9FFA82E0028A8FD19FFC9C8C1C7C9FD2AFF601A1A
%1A60FFFFFFC9FD04FF8B141A14AFFD06FF141A1461AFFFFFFFC2BAC9852F
%280106063535AFFFC9C367143D8453062853FD19FFCFFD04C7CEFD2AFF84
%131A1484FFFFCFC8FD04FF601A141484FD06FF85131A141A14603C3C353C
%1A1A132F28280028282F2735141A1414060606A9FD18FFCAC8C0C7C7C7C1
%FD2AFF841A141A84FFFFCFC8FD04FF8B141A14AFFD07FF8B141A141A141A
%141B143C3C8BAFFFA87E2E2806060C1B141A132E2FA9FD16FFCAC99ABB98
%C7C7C8C7C7C9FD29FF84131A1384FFFFC8C8FFCFCAFF6014141A84FD09FF
%848B606060855275A0FD07FFA89A7684141A1460A8FD15FFCAC999BB92BA
%92BB9FC7C1C7C1C8FD11FFAFFFAFFFAFFFAFFFAFFFAFFFA9AFA8AFFD08FF
%7E0D0C2F7EFFFFCEC8CFC7CFFFA875A075CAFD0FFFC9B4BBFD08FFBBCFFF
%AF608BFD14FFCACAC2BB92BBBBBB99BB93C1C7C8C7C7C7FD09FFCFFFCFFF
%CFFFCF141A141A141A141A141A141A142F0C0D0DAFFD07FF7E0028007EFF
%FFC7C7C0C7CFFFC2B492BBC9FD0FFFCABB92C2FD06FF99BBFD18FFA0BB92
%BB92BB92BB92BB92BB98C7C1C7C7C7C9FD07FFC9C7C7C7C1C7C7C71A141A
%141A141A141A141A141A0C2F0D138BFD07FF7D2806287DFFCFC7C1C7C8FF
%FFC992BB92CAFD10FFC2BB92C9FD04FFC2B4C9FD18FFC292BB92BB99BB92
%BB99BB92BBC1C7C7C8C7C8FD07FFCFC0C882A6C7C7C7141A131A141A131A
%141A131A140D060D0DAFFD07FF7E0028007EFFCFC1C9C1CEFFFFA0BA92BB
%A7FD11FF99BA92C2A1C999B499FD17FFCAC999BB92BB92BB92BB92BB92BB
%92C1C7C7C1C7C1FD07FFC9C7131B13C7C1C71A141A1A1A141A1A1A141A1A
%1A0D2F0D138BFD07FF7D2806287DFFCFFFFFC8CFFFFFC992BB92CFFD11FF
%CA92BB92BB92BBBBFD15FFCACABCBB92BBBBBB99BBBBBB99BBBBBB99BBBB
%C7C7C8C7C7C9FD06FFCFA51B141BA5C7C7141A141A141A141A141A141A14
%0D0C2F0DAFFD07FF7E0028007EFD04FFC7FFFFFFA1BA92BBA7FD12FFCA99
%BB92BB99FD13FFCAC99ABB92BB92BB92BB92BB92BB92BB92BB92BB92BBC1
%C7C1C7C1C8FD06FFC9C7583C58C7C1C71A1A1A141A1A1A141A1A1A141A0D
%0D0D148BFD07FF7D2806287DFD04FFCEFFFFFFC992BB99CAFD14FFC9C9CA
%FD14FFC992BB99BB92BB99BB92BB99BB92BB99BB92BB99BB92C1FD05C7FD
%06FFCFFD07C7759A759A759A759A759A759A75766F7675C2C3FD06FFA805
%28007DFD04FFC9FFFFFF9ABA92BBCAFD27FFC8CFFFFFCABB92BB92BB92BB
%92BB92BB92BB92BB92BB92BB92BB92C7C7C7C1C7C9FD04FF7E28522E5227
%522E52BBB4BBB4BBB4BBB4BBB4BBB4BBBABBB4BBB4C3FD06FFCB28062828
%FFFFFFCFCFFFFFFFBB92BBBBFD27FFC8C7C7FFA97E93BBBBBB99BBBBBB99
%BBBBBB99BBBBBB99BBBBBB92BBC1FD04C7FD05FF2F060628062906280692
%BB93BB92BB93BB92BB93BB92BB93BB92BAA0FD07FF2E0606287DFFFFFFCF
%FFFFC992BB92C3FD19FF8B143C60FD0AFFC9C1C75206016FB4BB92BB92BB
%92BB92BB92BB92BB92BB92BB99C3A8FFC8C8C9FD06FF5300280628062806
%28C8C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C2FD08FFA8062806287EFD04
%FFC992BB99BBCAFD18FFAF141A141A5FCEFD08FFCAC7C7A0062828BB98BB
%99BB92BBB4BB92BB99BB92BBBBC3CAFD0DFFA85A133C357C523614C7C77C
%827C827C827C827C827C825882C1CFFD09FF530028050628539ABC92BB92
%BAA0FD13FFCABB99BBCACF351A3C60143BC0C2A0FD07FFC1C7C128002F99
%BB92BB92BA92763576B4BB99C2A7FD11FF601A1459759A131AC7C71A141A
%141B141A141B141A141B1AC7C9FD09FFCA52062F282806BBBABB99BBBBFD
%14FFCA92BB93C8C75F143D601B35C7C2CAFD07FFCEC7C77CA9FFC992BBBB
%A0583C1A1B357CA8FD14FF8B141B35A0753C1AC0C79FA59FA59FA59FA59F
%A59FA59FA5C0CEFD0AFFA8530006062892BB92BA9AFD0AFFAF3C3C141A36
%AFFD04FFC2BB92BBC1C77B1A14141484C9FD09FFCAC7C0C8FFFFCAC2A1FF
%851A141A141A14AFFD14FF601414357575131ACEC9CEC9CEC9CEC9CEC9CE
%C9CEC9CEC9CECFFD0CFFA82E2E28BB99C2CAFD0AFFAF141A141A141A148B
%C9C8C7C799BB92C7C8CE84613C8BFD0CFFC8C7C9FD06FF8B141A141A141A
%AFFD14FFAF608B84CAA78B60FD20FFA8A8CAFD0CFFAF131A141A131A141A
%1482C0C79EBB92BBA1FD13FFC9FD07FFA81A141A131A3CFD4CFF601A1A1A
%141A141A141B3CC7C7C9BBBBBAFD1DFF2F2F062F2FFD4DFF3C141A1460A8
%8B141A141A837D52524B4C5259A8FD19FF8428062805287EFD4CFF1A1A14
%1AAFFFFF3C141A14AF0606060706060084FD19FF59002F28280653FD4BFF
%A81A141A1361FF85131A141A84592E4C274C2E537EFD19FF06285306532E
%00A9FD4BFF3C1A141A143C141A1A1A14C8C9C999BBBBCFFD1AFF7D0653A8
%0184590653FD22FFA8616060606160606061606060616060606160606061
%6060606160FD0EFFAF141A141A141A141A1482C0C7C1BB92BBC9FD19FFA8
%2F00A87E067DAF0028A8FD21FF3C141A1A1A141A1A1A141A1A1A141A1A1A
%141A1A1A141A1A1A141A60FD0EFF8B141A141A141A1461C8C7C7C799BB92
%C8C9CFFD17FFA80053FF7E007EFF53007EFD0CFFCFCEC9CFCFFD0FFFAF14
%1A13130D130D130D130D130D130D130D130D130D130D130D14141AAFFD0E
%FF8B141A131A1485FFFFCACE9FBB92BB9EC7C1C8C9FD15FF2E0659FF5900
%59FF7D0628FD0BFFC8C7C0C7C0C7C7CFFD0DFFAF1A142F28280628282806
%2828280628282806282828062806280C1B1AFD11FFAFAFAFFD06FFCF98BB
%93FD06C7C8C8CDCFFD0FFFA82828FFFF7E007EFFFF282884FD09FFFD05C7
%C8C7C7C7CFFD0CFFAF141406280628062806280628062806280628062806
%527552062F141AAFFD19FFA7BB92BBA1CEC7C7C0C7C1C7C0C19ACFFD0DFF
%590059FFFF7D0059FFFF7E0053FD08FFC8C7C1C7C7C7C1C7C7C7C1FD0CFF
%841A142806280628062806280628062806280628062852A051280C1A14FD
%1BFFCACACAFFFFFFCFC9C7C8C7C8C9FD0FFF2806A8FFFF7E007EFFFFA928
%06FD07FFCAFD08C7C8C7C7C9FD0BFFAF141A062806280628062806280628
%06280628062801289F76052F141AA8FD23FFCAFD12FF7D53FFFFFF590059
%FFFFFF7D59FD07FFC9C0C7C1C7C8FFC9C7C1C7C1C8FD0BFF851A142E062E
%2828062E2828062E2828062E28280652527C52280D1A14FD3DFF7DFD0DFF
%C8FD04C7FFFFFFC8FD04C7FD0BFFAF141A06280628062806280628062806
%280628069FC77C0106052F141AAFFD09FFAF3C1461AFFD3CFFC9C0C7C1C7
%CAFFFFC8C1C7C1C8CFFD0AFFAF1A142F2828062806280628062828287B7C
%017C9F2E282806280C1A1AFD0BFF141A143C85FFA8FD39FFC9C7C7C8C7C8
%C9C8FD04C7C8FD0BFFAF14140628060601060628062828C727A0C7287B52
%01280628060D141AAFFD0AFF3C141A141A2F28A8FD39FFC1C7C1C7C1C7C0
%C7C1C7C0CFFD0BFFAF1A142F2828287C522806290652C7A07BCC75A0762E
%9F5206280C1A1AFD0BFF853C353C1A1A0CFFFFFFCAFD1CFFCAC2C3CAFD16
%FFCEC7C8C7C7C7C8C7C7C7CEFD0CFFAF1414062875C79F5206527B5206C7
%C1C77BC751C7C17C0628060D141AAFFD09FFA1BB92BB927C1414A1BB92BB
%93C3CFFD17FFCFC292BA92BBA0FD16FFC8C1C7C1C7C1C7C7C7CAFD0CFF84
%1A142806C8762E512E7B7C512E9F7CC752757C062E062806280C1A14FD09
%FFC2BA92BBBBBBB47C52BB92BB99BB92C2FD17FFC292BB92BB99C1C7CEFD
%14FF99C1C1C8C7C8C1C199CFFD0CFFAF141A060651C79F7B01529F7B05C7
%275227FD0406280628002F141AA8FD07FFA1BA92BB92BB92BB92BB92BB92
%BB92BB92C3FD15FFC392BA9ACFCBC9C1C7C0C9FD12FFA1BA92BBA8FFA8BB
%92BAA0FD0CFF851A142E0676C72E062E2E52062E282806292828062E2828
%06280D1A14FD08FFC392BB99BBBBBB99BBBBBB99BBBBBB99BBBBFD15FF99
%BBC2FFFFFFCFC7C7C7C8FD12FFC2B4BBC25A062FA0BBB4BCFD0CFFAF141A
%062806C77BC775060628062806280628062806280628052F141AAFFD07FF
%9ABB92BB92BB92BB92BB92BB92BB92BB92BBCFFD13FFC3B499FD05FFC8C7
%C0CFFD10FFAFCA92BB92CA2F0606A892BB92CAAFFD0AFFAF1A142F062851
%A05228062806280628062806280606062806280C1A1AFD08FFC392BB99BB
%92BB99BB92BB99BB92BB99BB99FD0FFFFD04CFCAC292CAFD06FFCFC2A1AF
%85AF85FD0BFF143C143C143C1A2F062F143C143C141A14FD09FFAF141406
%280606010606280628062806280628277651525152060D141AAFFD07FFA0
%B492BB92BB92BB92BB92BB92BB92BB92BBCAFD0CFFCEC7C7C0C8C8C892BB
%C8C9C9FFAF8B603D357C3C3C1414136084FD07FFAF1A131A141A141A0628
%061A141A141A141AA8FD08FFAF1A142F2828062828280628282806FD0428
%FD04C7CCC74C061A1AFD08FFCA92BBBBBB99BBBBBB99BBBBBB99BBBBBBC2
%FD0CFFCEC7C7C8FFFFFFC3BAC2FFC9A7A6835F8BAFFFBBFFFFFF843D141A
%84FD07FF141B1A1A141A1A2F062F141A141B1A1A14FD09FFAF141A0D2F06
%0D062F060D062F060D062F060D52A67C7C7B7C0613141AAFFD07FFCABB92
%BB92BB92BB92BB92BB92BB92BB92C9FD0BFFCFC0C7C8FD04FFC292CA853D
%60FFC9C9C8CFFFC3A1FFFFFFA93C141AAFFD06FF3C13361336143C0C2806
%3C3C361336133CAFFD08FFAF3C141A141A141A141A141A141B1A1A141A14
%1A141A141A141A1A1A3CFD09FFC2BB92BB99BB92BB99BB92BB99BB92BBFD
%0CFFC9C7C7FD05FFBB993C8BAFFD04FFCFC8CEC2C9FD04FF601A14AFFD07
%FFBC92BBC2FFFF59062EAFFFC3BB92BBCFFD0AFF843C141A141A141A141A
%141A131A131A141A141A141A141A141A14AFFD09FFCF92BB92BB92BB92BB
%92BB92BB92B4A1FD0CFFCEC0C7CAFFFFFFA89999AFFFFF848584FFFFFFC9
%C89FFD04FF85131AA8FD06FFCA92BB92CAFFFF2E0606FFFFFF92B592C9FD
%16FFBC99BB99FD16FFC392BBBBBB99BBBBBB99BBBBBB99FD0DFFCFC7C7CF
%FFFF843C99C2FFFF60611A1A1AAFFFFFFFC2C8FFFFFF3C1A3CFD07FFC2BB
%92C2FD04FFA8A9FFFFFFC2BBC8C7CEFD15FF92BB92BBFD17FFBB92BB92BB
%92BB92BB92BB92CAFD0EFFC8C7C8FF3C3DA8BBA0FF60AFFFFF3C1A14AFFF
%FFA0CFC7CFA91A138BFD06FFCABB92BAA0FD09FFC8C7C1C7C0C8FD14FFBB
%92BBBBFD17FFCABB92BB99BB92BB99BB92C9FD10FFC7C78361FFCA92C9AF
%61FFFFFF8B141A60FFFFC3FFFFC760143CFD07FFCA92BB99FD09FFCFC8C7
%C8C8C7C7FD14FF99BB92BCFD12FFCFFFFFFFCFFFC9BB92BB99BC92BB92C3
%FD04FFCAFD0BFFA0C1C7C7C9FFC9B4C2AF14FFFFFF3C14133CFFFFA0FFFF
%60131AA9FD07FF9AB492C2FD09FFCFC1C7C8C9C0C7C9FD13FFBBBABBBBFD
%11FFFD07C8CDC8C8C7C8C8C8C7C8C8CDC8CDC1C2C1C2CFFD07FFC9BB93C1
%C7C8CFCF92C9FF1A3C8B601A141A60FFFFC9FF67141AA6CFFD07FFC292BB
%C3FD0AFFC8FD05C7FD0FFFA87D847D846F6F6F767E847D84A8FD0BFFCFC7
%C1A69FC7C1C7C1C7C1C7C7C7C1C7C7C7C1C7C7C198C198CFFD07FFC392BB
%92C1C1C7C8B4A0FF6014131A141A14AFFFFFA060141A84C9C7FD07FF99BB
%92C9FD0AFFC9C7C7C7C1CFFD0FFF2E0606280628062806280628007EFD0C
%FFC75F143CA6C7C7C8C7C7C7C8C7C7C7C8C7C7C7C8C1C199C1CEFD07FFCA
%BB92BBCACFC1C7C1C3FFFF601A141A148BFFFFA93C143CAFFFCFC7C9FD06
%FFC2B4BBC3FD0BFFA0BBBAC2FD10FF5300280628062806280628060659FD
%0BFFCAC7131A1482C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C198BB98CFFD07
%FF8B137DCAFFFFCFC1C7C1C9FFFF848584FFFFFF601A1460A8FFFFFFC1C8
%FD06FFA09999CAFD0BFFCA9299A1FD10FF2EFD040628060606280606007E
%FD0CFFC7831460C7C7C7C8C7C7C7C8C7C7C7C8C7C7C7C8C1C1BBC1CEFD07
%FF601A3CFD05FFC1C7C7C8CFFD04FF8B141A1484FD05FFC8C7CFFD06FF3C
%8BFD0DFF613CFD11FF84597E7D7E597E7D7E597E7D7D84FD0BFFCFFD14C7
%C1BAC1BACFFD07FF61141A84FD04FFBC98C8C0C7C7CE601A141A61C9C2FF
%A8FFFFC9C0C7CAFD06FF6184FD0DFF608BFD29FFA87D757C757C757C757C
%757C757C757C757C757C757C7576757658A8FD06FF841A141A60AFFFFFA0
%BBA88A7CC7C6C77B83A8FFC2A83C1A3CCEC7C7C7FD07FFAFFD0FFFAFFD29
%FF7D0006010601060106010601060106010601060106010601FD0406FD07
%FF3C1A1414131A143C131A141435A7C7C7C0C7C1C7341A141458C7C1CFFD
%41FF5906062828280628282806282828062828280628282806282828002F
%FD08FF8561141A141A143C356185FFFFFFCFCFC8C8C75F141A1483C8FD43
%FFA92F130D3552520C140D130D140D130D140D130D140D130D140D357DFD
%0BFFA8AFAFAF99B4C3FD07FF9AC3AE3C1460AEFD45FFAF1A1B14A0753C1A
%1B1A3C3B3C3C3C3B3C3C3C3B3C3C3C3B1A61FD10FFC992BBFD06FFC9BBCF
%FD28FFCFFD05FFAFFD1BFF841A14367576351A141A9FC7C1C7C1C7C1C7C1
%C7C1C7C1C73561FD11FFBB92C2FD04FFCABBA0FD2AFFCFFD05FFAF8B608B
%60FD16FF8B141A137C7535141A143C3560353B3560353B3560355F351A60
%FD11FFC9BB92C2CAFFC9BB92FD21FF848B608B84FD04FFC9CFFD05FF6113
%14131484FD15FF843C3C607CA1593C3C603C3D3C3D3C3D3C3D3C3D3C3D3C
%3D368BFD12FF9ABA92BB92BA92CAFD20FFAF1AFD0414FD04FFCEC9FD05FF
%601A141A14AFFD42FFA0BB92BA99CAFD0CFFCAC9A1C3CAFD11FF141A141A
%13FD04FFC8CFFD05FF85131A141484FD43FFA7C3A1FD0BFFAFA19393688D
%68936F9AA8FD0DFFAF1A131A1436FD04FFC8CFFD05FF601A1A1A14AFFD4E
%FF85673C768CFD079392BBC3FD0DFF141A1A1A35FFFFFFCFC1CFFFFFCAFF
%FF61141A141A84FD4DFF3C1A356F8C9368938D93689992BB92BBA0FD0BFF
%AF1A141A1A36FFFFFFC9C7CFFFC8CEFFFF8459585958A8FD4CFF141B84B5
%8CFD0693BB98BB99BB92BBC3FD0BFF13130D1435FFFFFFC9C0C8C1C7C9FF
%FFC392BB92BBC9FD30FFCFC9CEC8C9C8CEA77E598484FD0FFF601460BC68
%936893699392BB92BB92BB92BB92BBA8FD09FFA82800280052FFFFFFC8FD
%04C7FFFFFFC3BB99BBBBCAFD2EFFCAC2C1FD07C77B5206280653A8FD0CFF
%3C1AA8FD0793BBBBBB99BBBBBB99BBB4598BFD09FF2828062852FFFFCFC8
%C1C7C1C8FFFFFFC992BB92BBCAFD07FFC9BB99BC99BB99BC99BB99BC99BB
%99BC99BB99BC99BB99C9FD0EFFA0BB98C7C1C7C7C7C1C7C7C7C1C87D5300
%0653FD0AFFAF141A76938D936893699392BB92BB92BB92BB92BB751A84FD
%07FFA82E06280652FFFFCFC1C7C8C7C8FFFFFFC3BB99BB92CAFD07FFCA92
%BB92BBB4BB92BBB4BA92BB92BB92BB92BB92BB92B4A0FD0DFFBBB499C8C7
%C7C7C8C7C7C7C8C7C7C7CDCF7E060659FD09FFAF1A1A598C9393938D9399
%BB92BB99BB92BB99BB92BB361AAFFD07FF2828062828FFFFC9C8CAFFC1C9
%FFFFFFC392BB92BBA7FD07FFA7BB92BB999A99C2999A9A9A6FC29A9999C2
%9AC299BB92C9FD0CFF99BA92C1C7C7C1C7C1C7C1C7C1C7C1C7C0C7CF5300
%28A8FD09FF361A14768C93699392BB92BB92BB92BB92BB92BBB4841460FD
%06FFA82805280652FD05FFCFC7CFFFFFFFC3BBBBBB92CFFD08FFC2BB99FF
%59A8FF8459FFA859FFFF53A8FFFFFFC292BBFD0CFFC2BB99BBC7C8C7C7C7
%C8C7C7C7C8C7C7C7C8C7CD7D28067EFD09FFAF141A14768D9393BBBBBB99
%BBBBBB99BBBBBB99BBA81B14FD07FFFD0528FD06FFC7FD04FFC392BB92BB
%A7FD08FFC392BBFF597EFF597EFFA82FFFFF7E53FFFFFF99BB99FD0BFFCA
%BA92BB99C7C1C7C7C7C1C7C7C7C1C7C7C7C1C7C7A0060653FD0AFF3C141A
%14536F9392BB92BB92BB92BB92BB92BB92CA1A1A84FD05FFAF2806280652
%FD05FFCAC8FD04FFC2BB92BB98CAFD08FFA0BBBBFF53A8FF7E59FFA853FF
%FFA853FFFFFFC292BBFD0BFFC292BB92C1C7C7C7C8C7C7C7C8C7C7C7C8FD
%04C77B060659FD0AFFAF3C1A1A1A3C5299B4BBBBBB92BB99BB92BB99BB84
%1A148BFD06FF2828062828FD05FFCFC8FD04FFC292BB92BBCAFD08FFC292
%BBFF597DFF597DFFA82FFFFFFF28FFFFFF9AB492FD0BFF92BB92BB9FC7C1
%C7C1C7C1C7C1C7C1C7C1C7C1C7C152060653FD0BFF7D35141A141A135875
%BBB4BA92BB92BB92BA993C131A84FD05FFA82806280628FD05FFCACFFD04
%FFBBBB99BBBBFD09FFC2BBBBFF53A8FF7E59FFA859FFFFFF5984FFFFC292
%BBFD0AFF7DBBBBBB93FD04C7C8C7C7C7C8C7C7C7C8C7C7C7A0062806A8FD
%0CFF93591A1B1A1A1A1B355976A099BB999A763C141A3CFD07FF2E28062E
%287DFD04FFCFCAFFFFFFCABB92BB92C2FD09FFC292BBFF597EFF7D7DFFA9
%53FFFFFF537DFFFF9AB493FD09FF7E4B92BB92BB9FC7C7C7C1C7C7C7C1C7
%C7C7C1C7C7C728280628A8FD0CFFC38C76131A141A141A141A141A141A14
%1A141A14AFFD07FF7D002806282EFD04FFCFFD04FFC292BB99BBC3FD09FF
%C2BB99FF59A8FF7E59FFA859FFFFFFA853FFFFC292BBFD09FF2F4BBB92BB
%93C1C7C8C7C7C7C8C7C7C7C8C7C7C7C82E06062859FD0EFFBC8C9352361A
%1B141A1A1A141B1A1A141A3CAFFD08FF7E280628060053CFFD06FFC392BB
%92BB92CFFD09FFC392BBCF597EFF597DFFA82EFFFFFFA853FFFF99BA99FD
%08FF7E0076B4BB92BB99C7C1C7C1C7C1C7C1C7C1C7C7C727FD0406FD10FF
%9A688C68705235131A1414131A146084FD0BFF280606282F06537DFFFFFF
%CAC292BB99BB92C3FD0AFFC2BB99FF59A8FF8459FFA859FD04FF53FFFFC2
%92BBFD08FF2E2F9ABB99BB99BBC7C8C7C7C7C8C7C7C7C8C7C82829282806
%A1FD11FFC993938CB592BB999999A7AFFD0EFFA8062806062806060676BB
%BB92BB92BB92BBFD0BFFC392BBFF597EFF597EFFA82FFD04FF597EFF99BB
%99FD07FFA80606A192BB92BB92C1FD04C7C1FD04C7A0280606280651C8FD
%13FFA19A939399C2C3CFFD11FF53002828062806064BBB99BB92BB92BBCA
%FD0BFFA0BBBBFF53A8FF7E59FFA859FD04FF7D7DFFC292BBFD07FFA8062F
%A8BB99BB92BBBBC7C7C8FD05C77C062828280652C7CEFD2CFFCA53060006
%0628064C92BB92BB92BBCAFD0CFFC292BBC9C99FCFC9C8C9CF9FC9FFFFCF
%CE9FC899B492FD07FF59060684BBBB92BB92BB99C7C1C7C7C77B2E062806
%280152C1C7CAFD2DFFA8537E282806064BBB92BB99C9FD0EFFC2BBBBC8C8
%C7C7CEC7C7C8C8C7FFFFFFC8CDC7C292BBFD07FF8406282FCFBABB99BBBB
%BBC1CDC7A65229062806290652C7C7C8FD32FF7D7D287699C3C3FD10FFC2
%92BBC8C7C1C9C0C7C8C7C0C8FFFFFFC8C0C899BA93FD07FFA828060653C2
%B4BB92BB92997552060606280606067CC7C7C1FD0FFFCACFFD39FFC2BB99
%FFCFCFFFCFCFFFCFCFFD05FFCFFFC292BBFD08FF2828062828766F754B52
%282806282828062928A0C7C7C7CFFD0FFFCEC8FD39FFC292BBCAFD0FFF99
%B492FD08FFA800FD08062806280606062875C7C7C198C9FD0AFFC7CFFD04
%FFC8C8FD04FFCAC8CFFD32FFA19999FFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFA199A0AFFD08FFA928060628062806280628062F287699BBBBBB98CAFD
%0BFFCEC8FD04FFCEC8FD04FFCEC8FD31FF85141A141A141A141A141A141A
%141A141A141A141A141A141A3CFD09FF592F062806280628276F6EBBB4BA
%92BBA0CFFD0CFFCAC7CAFFFFFFC8C8FD04FFC1CFFD30FFAF141A141A1A1A
%141A141A141A141A141A141A141A141A141A141A60FD0BFFA8A9A8FFA7C3
%BBC199C2C2C9CAFD0FFFC8CEFFFFFFCEC8FFFFFFC9C8FD31FF601A141A13
%1A141A131A141A131A141A131A141A131A141A131A143CFD12FFCFFFCFFD
%0BFFCAC8CAFD04FFCFC1FFFFFFCAFD04FFC8C9FD04FFCFC1CFFD2AFF8B14
%1A141A1A1A141A1A1A141A1A1A141A1A1A141A1A1A141A1A1A3CFD21FFC9
%C7C9FD06FFCFC9CEC9CECFFFCFFD04FFCFC7CEFD2BFF601A141A141A141A
%141A141A141A141A141A141A141A141A141A143CFD22FFC9C7C8FFFFFFCA
%C8C1C7C0C7C0C7C7CFFFFFFFCEC1C9FD2CFF8B141A141A141A141A141A14
%1A141A141A141A141A141A141A141A3CFD23FFCFC7C9FFC9C7C1FD04C7C8
%C7C7C1CEFFCFC7CFFD16FFCB0D3C608BAFFD11FF8414131A141A131A141A
%131A141A131A141A131A141A141A141A1361FD24FFCFFFC9C7C1C7C1C7C1
%C7C1C7C1C7C0CEFD15FF84532F062F1B141A143D85FD11FF601A1A1A141A
%141A141A141A141A141A141A141A141A1A1A1461FD26FFCFC8C7C7C7C8C7
%C7C7C8C7C7C7C8C7CFFD12FF842F0628063514141A141A141A60CFFD10FF
%AFA1757684AF84AF84AF84AF84AF84AF84AF84AF7C7576AFFD20FFC1C8C9
%CFCFFFFFC9C0C7C7C7C1C7C7C7C1C7C7C7C1C7C8FFFFFFCAC9C7C7CAFD09
%FF5306062806141A1A1A141A141A141A5EC8C9FD0FFFC9BBBBFD10FFC9B4
%C2FD21FFCFC9C8C7C8CAFFC8C7C7C8C7C7C7C8C7C7C7C8C7C7C7C8FFFFC7
%C8C8CECAFD09FF5306062828141A1A14141A131A141A141A58C7C7FD0FFF
%A8FD12FFCFCAFD25FFC9FFCAC7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1CFFF
%CFCAFD0AFFCF7C0606280013141A131A1A141A1A1A141A141B83C7C7FD12
%FFAF85AFFD1EFFCACACAFD15FFC7C7C7C8C7C7C7C8C7C7C7C8FD04C7CFFD
%0CFFCFC7520628062F1A1A141A1A141A141A141A141A143DC9C7C7FD11FF
%3C1A143C84FD1AFFCA99BB92BB99FD13FFCAC7C1C7C1C7C7C199C1C1C7C1
%C7C7C7C1CFFD0BFFC9C67C012806280D1A141A141A1A141A141A141A141A
%14AFC8C7C9FD10FF8B141A141A84A8A8FD16FFCF99BB92BB92BA767E84FD
%0DFFCFFFFFFFFD05C7C199BB99BBBBC7C7C8C7C7CFFFCFFD08FFC9C0C828
%280628061A141A141A14131A141A131A141A131A60C9C0C8FD10FFAF1A14
%1A141A067DFD16FF99BB92BCA1C9750600067DFD08FFCFC8C8C7C7C1CFFF
%C8C0C7C77B6FC7C1C7C19975C7C1C7C7FFCAC8C1C8C8C9CAFFFFCEC0C759
%060628002F141A131A14FD041A141A1A1A141A143DC8C7C8FD11FF838382
%5F1A147EFFC9CEC9CFFD10FFC2BB92C3FFFFFF59062E0653FD08FFCFC8C9
%CFCFFFFFFFC9C7C7C75252C7C7C7CD5252C7C8C7CEFD04FFC9CEC8CFFFFF
%C7C7C87E062806280D1A141A1A1A14141A141A141A141A141A35C7C1C7A1
%FD0EFFCEC1C7C1C7C782137DC7C7C0C7C1C8CFFD0DFFCABB92C2FD04FF53
%06060653FD11FFC8C7C77C28C7C7C7C15251C7C1C8FD0AFFC9C7C1CE2F28
%062800351A1A141A141A1A141A141A141A141A14A6C7C799939AFD0CFFCE
%C0FD06C7A6A5FD06C7C8FD0DFFC992BBCAFD05FF532827CAFD12FFC7C79F
%289FC7C7C728A0C7C7CAFD0AFFCEC1C7C92F062806280D1B141A141A1414
%1A131A141A141A13A6C0C7C793688D93FD0BFFC7C7C1C7C1C7C1C7C1C7C1
%C7C1C7C1C7C0CFFD06FFA884597D537E99B4A0FD07FFA9A076676060608B
%A9FD08FFC9C1FFFFC9C0C7287BC7C79F289FC7C8FFFFC8C8FD07FFC8C7C0
%C92F060628050D141A141A131A1A141A1A1B143C5FC8C7C8C7C193BB9393
%9AFD09FFCFC7C7C8C7C7C7C8C7C7C7C8C7C7C7C8C7C7C9FD04FFA92F2800
%28285352BB99535384A8FFAF8B3C3D5AA03C3D141A141A3CFD06FFC8C7CF
%FFFFFFCDC75252CDC77C28C7C7FFFFFFCFC8C7FD06FFCEC7C8C77D062928
%28061A1A1A141A1A141A141A35829FFD05C792BB92BB92BBCAFD09FFC7C7
%C1C7C7C7C1C7C7C7C1C7C7C7C1C7C0C9FFFFFF7E0006067EA8FFFFC992C2
%FFA82F2F2E0D5AAFFFFF99CFFFFFA861141414AFFFFFCAC7C7FD05FFCAC7
%752EC1C75152C6CFFD05FFC8C0CFFD04FFCFC7C1C7C15206060628131A14
%1A141A5F5EA6A5FD07C792BB99BB92BB92C3FD08FFCFC8C7C7C7C8C7C7C7
%C8C7C7C7C8FD04C7C9FFFFFF282806A9FD04FFC2B4C3AF606784FF7D5359
%FFFFC3C3FD04FF8B141A3CFFFFCFC9FD04FFCFC8FFC8C128C7C7527BCCFF
%CEC9FD04FFCFCAFD05FFC9FD04C7A05152282F141A143C35C1C7C1C7C1C7
%C1C79FA092BB92BB92BB92BB99FD09FFC1C7C1C7C1C7C1C7C1C7C1C7C1C7
%C1C7C0CFFFFF7E280053FD05FFBC92603CAFFD04FFAF7E287EA1C2FD04FF
%A81A141AA8FD07FFC1CE855F5835585F0D59598BC9C7CAFD05FFCFFD05FF
%C8C7C1C7C7C7C1C79FA69FC79FC7
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">work</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-04-07T11:46:58+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-04-07T11:46:58+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-04-07T11:46:58+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AnU/nfTEH7mOSY9tgq/eS&#xA;T+Gczp/YfVS+uUID4k/q+1xNT7faSH93Gcz8Ij9f2MX8w/mO9vGBLMtkkhoqR1aQg7Vr1oPEAZ0u&#xA;l9k9JpRxyBzTHIHYX7v1kuh/0S6/tLIMeIjBiJ3kLJA85f8AEgFKRMJwJlcSCT4g4NQQe9c5DWZp&#xA;5MplMVLu5V5V5Pt/ZOhw6XTxxYd4Ac+ZkTzkT1J5uzGditk17UfL3p67YKWm02WGdgCQDH6qo6sR&#xA;+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&#xA;dnx/yl+6Mv1U87j9je0pf5OvfKP67f/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:6CAE0B87E0BDE311AE2CD8817FEEC823</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:6CAE0B87E0BDE311AE2CD8817FEEC823</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:218B016CE2BDE311A3D9ECED03ACA01D</stRef:instanceID>
            <stRef:documentID>xmp.did:218B016CE2BDE311A3D9ECED03ACA01D</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3ADE799510BAE311AD4798840E07F613</stEvt:instanceID>
                  <stEvt:when>2014-04-02T08:56:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3BDE799510BAE311AD4798840E07F613</stEvt:instanceID>
                  <stEvt:when>2014-04-02T08:58:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1C6EB54051BAE31182FCD901002658C0</stEvt:instanceID>
                  <stEvt:when>2014-04-02T13:26:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:218B016CE2BDE311A3D9ECED03ACA01D</stEvt:instanceID>
                  <stEvt:when>2014-04-07T02:50:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6CAE0B87E0BDE311AE2CD8817FEEC823</stEvt:instanceID>
                  <stEvt:when>2014-04-07T11:46:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=75 G=0 B=52 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>75</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>52</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=183 B=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=170 G=0 B=64 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>170</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>64</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=0 B=13 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>13</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=205 B=213 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>205</xmpG:green>
                           <xmpG:blue>213</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=254 G=208 B=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>254</xmpG:red>
                           <xmpG:green>208</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=0 B=98 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=43 G=43 B=163 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>43</xmpG:red>
                           <xmpG:green>43</xmpG:green>
                           <xmpG:blue>163</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=194 B=58 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>194</xmpG:green>
                           <xmpG:blue>58</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=182 B=203 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>182</xmpG:green>
                           <xmpG:blue>203</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=194 G=39 B=45 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>194</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=60 G=93 B=136 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>60</xmpG:red>
                           <xmpG:green>93</xmpG:green>
                           <xmpG:blue>136</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=29 G=56 B=103 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>103</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=232 G=88 B=36 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>232</xmpG:red>
                           <xmpG:green>88</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=152 B=178 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>152</xmpG:green>
                           <xmpG:blue>178</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=217 B=207</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>217</xmpG:green>
                           <xmpG:blue>207</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=194 B=58 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>194</xmpG:green>
                           <xmpG:blue>58</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=229 B=218</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>229</xmpG:green>
                           <xmpG:blue>218</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=29 G=56 B=103 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>103</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=182 B=203 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>182</xmpG:green>
                           <xmpG:blue>203</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=232 G=88 B=36 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>232</xmpG:red>
                           <xmpG:green>88</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=194 G=39 B=45 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>194</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=183 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=75 G=0 B=52</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>75</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>52</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=138 G=0 B=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>138</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>60</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=170 G=0 B=64</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>170</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>64</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=201 G=0 B=23</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>201</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>23</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=0 B=13</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>13</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
46.4575 426.594 mo
31.0239 421.709 14.5537 430.259 9.66895 445.692 cv
9.21631 447.123 8.88037 448.562 8.65332 450 cv
66.5679 450 li
64.8945 439.371 57.4131 430.062 46.4575 426.594 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.909804 .345098 .141176 rgb
f
61.396 438.372 mo
61.686 438.464 61.9678 438.566 62.252 438.667 cv
58.6836 433.121 53.2339 428.739 46.4575 426.594 cv
31.0239 421.709 14.5537 430.259 9.66895 445.692 cv
9.21631 447.123 8.87988 448.562 8.65283 450 cv
28.2046 450 li
35.2671 439.448 48.6812 434.348 61.396 438.372 cv
cp
.760784 .152941 .176471 rgb
f
15.854 431.431 mo
18.606 428.195 22.9233 426.72 27.9697 426.865 cv
29.9585 426.171 32.0278 425.688 34.1426 425.432 cv
24.0117 422.329 14.748 423.438 9.73096 429.333 cv
5.43164 434.385 5.10449 441.956 8.04443 450 cv
17.8564 450 li
13.2817 442.912 11.8516 436.135 15.854 431.431 cv
cp
.113725 .219608 .403922 rgb
f
8.97852 391.833 mo
5.9834 391.013 2.9751 390.573 0 390.461 cv
0 450 li
32.5903 450 li
34.3252 447.052 35.7104 443.833 36.6572 440.375 cv
42.418 419.327 30.0264 397.594 8.97852 391.833 cv
cp
0 .713726 .796078 rgb
f
0 390.459 mo
0 392.078 li
1.07861 391.581 2.17285 391.116 3.29395 390.717 cv
2.19287 390.582 1.09424 390.5 0 390.459 cv
cp
.113725 .219608 .403922 rgb
f
48.5576 421.807 mo
47.1919 411.461 37.5117 403.428 23.772 399.527 cv
25.9795 401.363 27.9697 403.425 29.7119 405.669 cv
35.5313 409.196 39.3403 414.025 40.0884 419.702 cv
41.8945 433.381 22.6563 442.589 0 445.858 cv
0 450 li
29.998 450 li
42.5005 442.65 49.939 432.267 48.5576 421.807 cv
cp
1 .760784 .227451 rgb
f
450 390.461 mo
432.07 389.786 415.378 401.459 410.438 419.511 cv
407.503 430.231 409.286 441.125 414.516 450 cv
450 450 li
450 390.461 li
cp
0 .713726 .796078 rgb
f
428.407 417.513 mo
431.613 405.801 439.773 396.792 450 392.078 cv
450 390.459 li
432.069 389.784 415.378 401.457 410.438 419.511 cv
407.503 430.231 409.286 441.125 414.516 450 cv
433.748 450 li
427.557 440.793 425.248 429.053 428.407 417.513 cv
cp
.113725 .219608 .403922 rgb
f
450 445.858 mo
449.503 445.931 449.006 446.003 448.506 446.069 cv
425.213 449.15 407.57 444.824 405.727 430.849 cv
404.973 425.143 407.426 419.465 412.172 414.53 cv
413.616 411.11 415.503 407.978 417.751 405.185 cv
402.996 412.569 393.912 423.958 395.426 435.432 cv
396.171 441.075 399.399 446.026 404.4 450 cv
450 450 li
450 445.858 li
cp
1 .760784 .227451 rgb
f
361.433 276.838 mo
342.973 278.577 329.418 294.949 331.157 313.407 cv
332.896 331.863 349.27 345.418 367.727 343.678 cv
386.183 341.942 399.736 325.568 397.998 307.11 cv
396.262 288.654 379.889 275.101 361.433 276.838 cv
cp
.909804 .345098 .141176 rgb
f
361.433 276.838 mo
342.973 278.577 329.418 294.949 331.157 313.407 cv
332.862 331.517 348.66 344.897 366.693 343.75 cv
358.725 338.316 353.15 329.509 352.175 319.16 cv
350.435 300.7 363.989 284.33 382.448 282.591 cv
382.792 282.559 383.136 282.54 383.481 282.521 cv
377.241 278.265 369.537 276.075 361.433 276.838 cv
cp
.760784 .152941 .176471 rgb
f
393.978 294.051 mo
395.448 296.716 396.567 299.614 397.277 302.688 cv
400.525 307.513 401.746 312.626 400.281 317.289 cv
396.689 328.715 381.293 329.75 362.25 323.76 cv
343.205 317.775 327.722 307.032 331.313 295.604 cv
332.771 290.963 336.666 287.479 342.054 285.378 cv
343.842 283.759 345.808 282.326 347.924 281.111 cv
335.854 282.361 326.578 287.666 323.918 296.126 cv
319.527 310.094 334.84 327.353 358.121 334.671 cv
381.404 341.992 403.838 336.602 408.229 322.634 cv
411.177 313.254 405.241 302.393 393.978 294.051 cv
cp
0 .713726 .796078 rgb
f
237.212 293.64 mo
214.743 296.991 199.245 317.921 202.595 340.389 cv
205.946 362.857 226.876 378.355 249.344 375.006 cv
271.811 371.654 287.312 350.726 283.962 328.257 cv
280.61 305.79 259.68 290.29 237.212 293.64 cv
cp
1 .760784 .227451 rgb
f
218.874 330.94 mo
216.813 317.118 221.892 303.889 231.327 294.965 cv
212.111 300.774 199.545 319.941 202.595 340.389 cv
205.946 362.857 226.876 378.355 249.344 375.006 cv
257.991 373.718 265.601 369.814 271.506 364.229 cv
269.607 364.807 267.644 365.253 265.623 365.555 cv
243.156 368.905 222.224 353.406 218.874 330.94 cv
cp
.909804 .345098 .141176 rgb
f
254.534 294.758 mo
257.408 295.581 260.17 296.707 262.77 298.113 cv
269.796 299.031 275.453 302.032 278.549 307.124 cv
286.177 319.664 270.913 336.988 250.01 349.7 cv
229.117 362.418 210.494 365.704 202.87 353.168 cv
199.756 348.048 199.708 341.609 202.157 334.916 cv
202.097 331.051 202.58 327.274 203.548 323.672 cv
192.592 336.9 188.72 351.563 194.982 361.857 cv
204.307 377.187 232.577 377.012 258.126 361.47 cv
283.675 345.929 296.823 320.902 287.502 305.573 cv
281.854 296.293 269.258 292.703 254.534 294.758 cv
cp
.113725 .219608 .403922 rgb
f
28.7686 32.4775 mo
44.1992 37.3633 60.6704 28.8115 65.5542 13.3789 cv
66.9712 8.90332 67.2515 4.34229 66.5679 0 cv
8.65332 0 li
6.43164 14.0767 14.7666 28.0464 28.7686 32.4775 cv
cp
.909804 .345098 .141176 rgb
f
27.9121 32.1836 mo
23.3564 25.1025 21.8706 16.123 24.6104 7.4707 cv
25.4702 4.75342 26.6953 2.25488 28.2046 0 cv
8.65283 0 li
6.47705 13.7842 14.4307 27.4614 27.9121 32.1836 cv
cp
.760784 .152941 .176471 rgb
f
24.1118 21.9668 mo
40.3394 35.7773 60.2119 39.0791 68.4961 29.3418 cv
74.0591 22.8047 72.9844 12.0518 66.7666 1.50977 cv
67.042 4.1543 66.9561 6.86621 66.4795 9.57813 cv
67.4497 14.5635 66.6909 19.0889 63.9253 22.3398 cv
57.1484 30.3047 44.4165 25.8965 31.1445 14.5996 cv
25.709 9.9751 21.0278 4.91309 17.8564 0 cv
8.04443 0 li
10.7705 7.4585 16.3037 15.3228 24.1118 21.9668 cv
cp
.113725 .219608 .403922 rgb
f
32.5903 0 mo
0 0 li
0 19.436 li
13.3975 18.9468 25.7588 11.6084 32.5903 0 cv
cp
0 .713726 .796078 rgb
f
6.08545 16.0537 mo
3.96436 15.4731 1.93555 14.7227 0 13.8345 cv
0 19.4302 li
4.05957 19.2793 8.0249 18.5034 11.771 17.1689 cv
9.87744 16.9385 7.979 16.5713 6.08545 16.0537 cv
cp
.113725 .219608 .403922 rgb
f
29.998 0 mo
0 0 li
0 9.68359 li
.359863 9.64063 .717773 9.60547 1.0791 9.55762 cv
12.1255 8.09863 22.0752 4.65674 29.998 0 cv
cp
1 .760784 .227451 rgb
f
414.516 0 mo
419.554 8.54932 427.789 15.2256 438.115 18.0527 cv
442.09 19.1406 446.089 19.5791 450 19.436 cv
450 0 li
414.516 0 li
cp
0 .713726 .796078 rgb
f
438.115 18.0527 mo
442.091 19.1411 446.089 19.5757 450 19.4302 cv
450 13.8345 li
443.261 10.7422 437.71 5.8916 433.748 0 cv
414.516 0 li
419.554 8.54932 427.789 15.2256 438.115 18.0527 cv
cp
.113725 .219608 .403922 rgb
f
404.4 0 mo
414.349 7.90625 431.349 11.9146 450 9.68359 cv
450 0 li
404.4 0 li
cp
1 .760784 .227451 rgb
f
349.428 440.329 mo
356.888 427.643 362.542 424.551 362.943 411.423 cv
362.969 410.926 362.983 410.425 362.983 409.923 cv
362.983 394.064 350.127 381.21 334.27 381.21 cv
318.413 381.21 305.559 394.064 305.559 409.923 cv
305.559 410.425 305.57 410.926 305.599 411.423 cv
305.999 424.551 311.652 427.643 319.113 440.329 cv
321.376 444.177 321.516 448.27 321.454 450 cv
347.085 450 li
347.023 448.27 347.164 444.177 349.428 440.329 cv
cp
f
334.27 356.644 mo
333.286 356.644 332.487 357.441 332.487 358.426 cv
332.487 375.455 li
332.487 376.439 333.286 377.236 334.27 377.236 cv
335.254 377.236 336.052 376.439 336.052 375.455 cv
336.052 358.426 li
336.052 357.441 335.254 356.644 334.27 356.644 cv
cp
f
345.156 417.349 mo
338.729 412.508 329.813 412.508 323.385 417.349 cv
322.247 418.203 322 419.612 322.715 420.288 cv
323.43 420.967 324.646 420.853 325.524 420.197 cv
330.69 416.31 337.851 416.31 343.016 420.197 cv
343.895 420.854 345.11 420.967 345.825 420.288 cv
346.54 419.612 346.293 418.204 345.156 417.349 cv
cp
.909804 .345098 .141176 rgb
f
312.988 362.943 mo
312.572 362.052 311.512 361.667 310.619 362.083 cv
309.727 362.498 309.342 363.558 309.757 364.451 cv
316.952 379.885 li
317.37 380.775 318.429 381.163 319.322 380.745 cv
320.214 380.33 320.601 379.271 320.185 378.379 cv
312.988 362.943 li
cp
1 .760784 .227451 rgb
f
293.993 376.787 mo
293.239 376.154 292.116 376.253 291.482 377.007 cv
290.85 377.761 290.948 378.884 291.703 379.518 cv
304.746 390.463 li
305.501 391.096 306.624 390.997 307.258 390.244 cv
307.89 389.489 307.792 388.367 307.038 387.734 cv
293.993 376.787 li
cp
f
299.079 401.769 mo
282.628 397.36 li
281.679 397.105 280.702 397.67 280.446 398.62 cv
280.191 399.57 280.756 400.548 281.707 400.803 cv
298.155 405.21 li
299.108 405.465 300.084 404.901 300.337 403.952 cv
300.593 402.999 300.029 402.022 299.079 401.769 cv
cp
f
297.795 417.852 mo
281.025 420.809 li
280.055 420.979 279.407 421.903 279.579 422.873 cv
279.749 423.842 280.674 424.49 281.644 424.319 cv
298.414 421.36 li
299.382 421.19 300.03 420.267 299.859 419.297 cv
299.688 418.327 298.765 417.681 297.795 417.852 cv
cp
f
303.664 432.806 mo
291.087 441.612 li
290.36 442.121 290.229 443.188 290.793 443.994 cv
291.358 444.801 292.405 445.042 293.133 444.532 cv
305.709 435.725 li
306.436 435.216 306.567 434.15 306.003 433.344 cv
305.438 432.537 304.393 432.296 303.664 432.806 cv
cp
f
314.886 443.35 mo
314.032 442.858 313.062 442.946 312.714 443.551 cv
308.989 450 li
313.104 450 li
315.8 445.331 li
316.149 444.729 315.739 443.843 314.886 443.35 cv
cp
f
357.92 362.083 mo
357.029 361.667 355.968 362.052 355.552 362.943 cv
348.355 378.379 li
347.938 379.271 348.326 380.33 349.218 380.745 cv
350.11 381.163 351.169 380.775 351.587 379.885 cv
358.784 364.451 li
359.198 363.558 358.813 362.498 357.92 362.083 cv
cp
f
374.546 376.787 mo
361.501 387.734 li
360.747 388.367 360.649 389.489 361.281 390.244 cv
361.915 390.997 363.038 391.096 363.792 390.463 cv
376.836 379.518 li
377.591 378.884 377.69 377.761 377.059 377.007 cv
376.425 376.253 375.302 376.154 374.546 376.787 cv
cp
f
385.911 397.36 mo
369.46 401.769 li
368.513 402.022 367.946 402.999 368.203 403.952 cv
368.456 404.901 369.433 405.465 370.385 405.21 cv
386.833 400.803 li
387.783 400.548 388.348 399.57 388.094 398.62 cv
387.838 397.67 386.861 397.105 385.911 397.36 cv
cp
f
387.515 420.809 mo
370.744 417.852 li
369.776 417.681 368.852 418.327 368.68 419.297 cv
368.51 420.267 369.157 421.19 370.125 421.36 cv
386.896 424.319 li
387.865 424.49 388.79 423.842 388.962 422.873 cv
389.132 421.903 388.484 420.979 387.515 420.809 cv
cp
f
377.452 441.612 mo
364.875 432.806 li
364.147 432.296 363.103 432.537 362.536 433.344 cv
361.973 434.15 362.104 435.216 362.831 435.725 cv
375.407 444.532 li
376.134 445.042 377.181 444.801 377.747 443.994 cv
378.311 443.188 378.179 442.121 377.452 441.612 cv
cp
f
353.654 443.35 mo
352.801 443.843 352.391 444.729 352.739 445.331 cv
355.435 450 li
359.551 450 li
355.826 443.551 li
355.478 442.946 354.506 442.858 353.654 443.35 cv
cp
f
322.797 419.708 mo
321.833 419.922 321.229 420.876 321.441 421.836 cv
327.695 450 li
331.35 450 li
324.924 421.063 li
324.711 420.102 323.759 419.496 322.797 419.708 cv
cp
.113725 .219608 .403922 rgb
f
345.742 419.708 mo
344.78 419.496 343.828 420.102 343.615 421.063 cv
337.189 450 li
340.844 450 li
347.098 421.836 li
347.311 420.876 346.706 419.922 345.742 419.708 cv
cp
f
318.539 448.326 mo
318.539 450 li
350.001 450 li
350.001 448.326 li
318.539 448.326 li
cp
0 .713726 .796078 rgb
f
63.3242 241.547 mo
76.5342 241.547 li
76.5342 198.983 li
63.3242 198.983 li
63.3242 241.547 li
cp
.909804 .345098 .141176 rgb
f
111.422 131.472 mo
28.4365 131.472 li
24.042 131.472 20.4805 135.415 20.4805 140.279 cv
20.4805 201.922 li
20.4805 206.785 24.042 210.729 28.4365 210.729 cv
111.422 210.729 li
115.816 210.729 119.378 206.785 119.378 201.922 cv
119.378 140.279 li
119.378 135.415 115.816 131.472 111.422 131.472 cv
cp
0 .713726 .796078 rgb
f
109.091 139.516 mo
30.7676 139.516 li
29.5254 139.516 28.5146 140.635 28.5146 142.009 cv
28.5146 200.191 li
28.5146 201.565 29.5254 202.684 30.7676 202.684 cv
109.091 202.684 li
110.333 202.684 111.344 201.565 111.344 200.191 cv
111.344 142.009 li
111.344 140.635 110.333 139.516 109.091 139.516 cv
cp
.113725 .219608 .403922 rgb
f
50.7109 186.445 mo
50.3359 186.293 49.9355 186.281 49.5098 186.408 cv
49.3682 186.451 49.1611 186.537 48.8867 186.667 cv
48.6152 186.797 48.4033 186.885 48.2559 186.929 cv
47.7988 187.066 47.1152 187.283 46.2021 187.583 cv
45.2891 187.881 44.6035 188.1 44.1455 188.237 cv
43.2988 188.492 42.8213 188.583 42.7109 188.51 cv
42.4824 188.365 42.1523 187.569 41.7188 186.125 cv
41.5459 185.55 41.3447 184.789 41.1152 183.837 cv
43.1689 183.036 44.7012 182.421 45.7119 181.987 cv
46.8525 181.533 47.709 181.195 48.2842 180.974 cv
49.1836 180.576 49.5029 179.938 49.2393 179.061 cv
49.1025 178.604 48.8369 178.283 48.4453 178.101 cv
48.0537 177.918 47.6406 177.892 47.2041 178.023 cv
46.8301 178.136 45.9609 178.474 44.5957 179.035 cv
42.2031 180.02 40.8047 180.586 40.4014 180.74 cv
39.8877 178.792 39.4834 177.33 39.1904 176.351 cv
39.8496 175.958 40.4844 175.623 41.0918 175.343 cv
41.6982 175.068 42.2773 174.844 42.8281 174.678 cv
43.9561 174.34 45.1641 174.152 46.4551 174.12 cv
46.6289 174.115 46.791 174.089 46.9375 174.043 cv
47.3945 173.909 47.7197 173.625 47.9121 173.2 cv
48.0879 172.826 48.1182 172.447 48.0029 172.065 cv
47.7998 171.385 47.3203 171.023 46.5674 170.967 cv
45.3262 170.874 43.7783 171.105 41.9219 171.664 cv
41.2373 171.87 40.5273 172.14 39.792 172.479 cv
39.0527 172.817 38.2891 173.221 37.499 173.692 cv
37.1709 173.59 36.8457 173.586 36.5225 173.684 cv
35.4922 173.996 35.1455 174.708 35.4805 175.827 cv
35.5586 176.084 35.71 176.453 35.9346 176.938 cv
36.1582 177.419 36.3125 177.787 36.3887 178.046 cv
36.6826 179.025 37.0537 180.526 37.5049 182.543 cv
37.9561 184.564 38.3281 186.067 38.626 187.055 cv
39.3389 189.432 40.2061 190.858 41.2227 191.331 cv
42.1475 191.759 43.8086 191.613 46.208 190.892 cv
48.5283 190.194 50.0342 189.667 50.7295 189.305 cv
51.54 188.885 51.8232 188.262 51.5762 187.436 cv
51.4287 186.944 51.1406 186.612 50.7109 186.445 cv
cp
1 .760784 .227451 rgb
f
54.8438 177.907 mo
55.1611 177.794 55.4043 177.713 55.5674 177.666 cv
60.583 176.159 li
60.9854 176.038 61.2783 175.816 61.4668 175.494 cv
61.6553 175.173 61.6943 174.831 61.583 174.462 cv
61.4717 174.092 61.249 173.826 60.915 173.664 cv
60.582 173.499 60.2158 173.476 59.8125 173.595 cv
54.8047 175.09 li
54.4717 175.19 li
54.2969 175.233 54.168 175.268 54.084 175.293 cv
52.667 175.719 52.0928 176.377 52.3594 177.267 cv
52.4707 177.629 52.6895 177.897 53.0215 178.07 cv
53.3545 178.24 53.7217 178.267 54.1221 178.147 cv
54.2861 178.097 54.5264 178.018 54.8438 177.907 cv
cp
f
62.5234 179.054 mo
62.1797 178.893 61.8047 178.872 61.3926 178.996 cv
60.9063 179.143 60.1748 179.354 59.1982 179.627 cv
58.2197 179.9 57.4883 180.111 57.0039 180.255 cv
56.3926 180.441 55.708 180.672 54.9512 180.957 cv
54.0615 181.288 53.7373 181.85 53.9746 182.647 cv
54.0918 183.029 54.3232 183.295 54.6689 183.449 cv
55.0176 183.603 55.3994 183.617 55.8184 183.49 cv
56.04 183.423 56.3643 183.312 56.7969 183.155 cv
57.2266 182.996 57.5518 182.883 57.7744 182.818 cv
58.2598 182.67 58.9902 182.461 59.9668 182.189 cv
60.9443 181.917 61.6768 181.705 62.1621 181.559 cv
62.5742 181.436 62.8799 181.211 63.0742 180.889 cv
63.2705 180.565 63.3125 180.216 63.2031 179.85 cv
63.0928 179.482 62.8633 179.217 62.5234 179.054 cv
cp
f
84.1602 173.625 mo
82.8398 171.582 81.4961 169.055 80.126 166.047 cv
79.5391 164.756 79.0859 163.887 78.7764 163.442 cv
78.0176 162.337 77.2373 161.906 76.4365 162.147 cv
75.6045 162.397 75.1494 163.11 75.0684 164.282 cv
75.2119 167.006 li
75.2754 169.836 75.2168 172.473 75.0342 174.911 cv
73.7275 172.885 72.625 170.963 71.7227 169.138 cv
70.79 167.26 70.0791 166.044 69.5918 165.493 cv
69.0713 164.91 68.4756 164.719 67.8057 164.921 cv
67.2178 165.098 66.8096 165.503 66.5781 166.138 cv
66.3467 166.776 66.2998 167.922 66.4395 169.581 cv
66.5596 170.783 66.6807 171.983 66.8086 173.18 cv
66.832 173.478 66.8535 175.024 66.8682 177.822 cv
66.875 179.692 67.0596 181.22 67.415 182.413 cv
67.5381 182.819 67.7676 183.131 68.1064 183.349 cv
68.5039 183.606 68.959 183.659 69.4668 183.505 cv
70.2764 183.263 70.6738 182.574 70.6631 181.437 cv
70.5488 180.573 70.4355 179.704 70.3252 178.829 cv
70.1963 176.244 70.123 174.305 70.0938 173.012 cv
71.1738 174.951 72.2842 176.776 73.4268 178.49 cv
74.6621 180.357 li
75.2754 181.062 75.9258 181.311 76.6211 181.105 cv
77.3203 180.896 77.7627 180.387 77.9453 179.585 cv
78.084 178.983 78.1699 178.239 78.1992 177.352 cv
78.2529 175.123 li
78.3838 172.78 78.4648 171.065 78.501 169.979 cv
79.6611 172.337 80.6123 174.125 81.3623 175.344 cv
82.7881 177.831 li
83.5225 178.862 84.2891 179.256 85.0938 179.016 cv
85.498 178.894 85.8252 178.65 86.0674 178.289 cv
86.3232 177.892 86.3877 177.475 86.2598 177.041 cv
86.1982 176.84 85.501 175.703 84.1602 173.625 cv
cp
f
98.2061 169.2 mo
97.7998 168.969 97.376 168.919 96.9326 169.053 cv
96.6396 169.141 96.2607 169.463 95.8027 170.018 cv
95.124 170.856 94.6729 171.385 94.4502 171.604 cv
93.8125 172.213 93.1318 172.626 92.4023 172.847 cv
91.6543 173.072 90.9209 172.977 90.209 172.564 cv
89.501 172.152 89.0254 171.544 88.7842 170.742 cv
88.2549 168.983 88.54 166.839 89.6318 164.308 cv
90.416 162.502 91.2676 161.458 92.1953 161.181 cv
92.666 161.038 92.9658 160.976 93.0918 160.996 cv
93.2607 161.017 93.4678 161.171 93.7109 161.458 cv
94.2373 162.063 94.834 162.266 95.4961 162.066 cv
96.0264 161.907 96.3711 161.588 96.5332 161.106 cv
96.6543 160.741 96.6611 160.372 96.5518 160.004 cv
96.3037 159.179 96.0215 158.476 95.7109 157.896 cv
95.2764 157.088 94.6836 156.797 93.9316 157.021 cv
93.4775 157.159 93.1348 157.435 92.9063 157.848 cv
92.6924 157.864 92.4531 157.9 92.1865 157.958 cv
91.917 158.013 91.6191 158.09 91.2969 158.188 cv
89.3838 158.763 87.8369 160.415 86.6582 163.147 cv
85.2725 166.364 84.9492 169.205 85.6914 171.67 cv
86.165 173.248 87.123 174.452 88.5615 175.291 cv
90.0654 176.154 91.6465 176.336 93.3027 175.837 cv
95.3984 175.208 97.2021 173.734 98.7168 171.417 cv
99 170.979 99.0781 170.542 98.9492 170.109 cv
98.8291 169.717 98.583 169.415 98.2061 169.2 cv
cp
f
104.517 153.592 mo
104.078 153.539 103.661 153.571 103.265 153.69 cv
102.84 153.818 102.146 154.053 101.178 154.4 cv
100.699 154.589 100.336 154.738 100.094 154.846 cv
99.9365 154.094 100.21 153.302 100.914 152.467 cv
101.382 151.935 101.85 151.4 102.316 150.863 cv
102.8 150.265 103.118 149.707 103.268 149.184 cv
103.462 148.527 103.44 147.807 103.205 147.024 cv
102.973 146.25 102.419 145.733 101.54 145.474 cv
100.775 145.248 99.9922 145.252 99.1953 145.494 cv
98.5547 145.685 97.9854 146.036 97.4844 146.542 cv
97.1367 146.893 96.7598 147.399 96.3486 148.059 cv
96.1816 148.332 96.1377 148.608 96.2236 148.888 cv
96.3018 149.151 96.4775 149.321 96.751 149.4 cv
96.9727 149.464 97.2051 149.458 97.4492 149.386 cv
97.6523 149.326 97.96 148.996 98.376 148.395 cv
98.79 147.795 99.2451 147.423 99.7314 147.275 cv
100.008 147.194 100.317 147.194 100.66 147.281 cv
101.002 147.367 101.199 147.497 101.251 147.671 cv
101.454 148.343 101.271 149.054 100.702 149.803 cv
100.207 150.394 99.709 150.988 99.2109 151.585 cv
98.6865 152.231 98.3428 152.822 98.1836 153.356 cv
97.9746 154.052 97.998 154.832 98.2588 155.692 cv
98.3936 156.133 98.5352 156.447 98.6914 156.632 cv
98.9395 156.923 99.2725 157.007 99.6875 156.883 cv
99.7373 156.869 99.8125 156.856 99.918 156.844 cv
100.02 156.833 100.095 156.82 100.146 156.805 cv
100.326 156.752 100.588 156.649 100.929 156.499 cv
101.271 156.348 101.528 156.247 101.703 156.194 cv
103.736 155.59 li
103.843 155.558 104.023 155.526 104.275 155.494 cv
104.53 155.458 104.714 155.423 104.83 155.39 cv
105.098 155.309 105.291 155.145 105.415 154.899 cv
105.529 154.667 105.552 154.432 105.48 154.193 cv
105.379 153.86 105.06 153.661 104.517 153.592 cv
cp
f
46.9561 244.004 mo
92.9023 244.004 li
92.9023 230.793 li
46.9561 230.793 li
46.9561 244.004 li
cp
.113725 .219608 .403922 rgb
f
100.97 195.664 mo
89.4297 195.664 li
86.8359 195.664 84.7324 196.895 84.7324 198.414 cv
84.7324 199.514 li
84.7324 201.034 86.8359 202.263 89.4297 202.263 cv
100.97 202.263 li
103.563 202.263 105.667 201.034 105.667 199.514 cv
105.667 198.414 li
105.667 196.895 103.563 195.664 100.97 195.664 cv
cp
1 .760784 .227451 rgb
f
57.0215 315.41 mo
57.0215 269.199 li
40.4609 269.199 li
40.4609 315.41 li
40.4609 331.502 32.9487 341.351 19.731 341.351 cv
9.31641 341.351 2.44678 335.232 0 324.768 cv
0 351.606 li
5.72363 355.44 12.4834 357.563 19.731 357.563 cv
40.3252 357.563 57.0215 340.479 57.0215 315.41 cv
cp
.909804 .345098 .141176 rgb
f
19.731 341.351 mo
9.31641 341.351 2.44678 335.232 0 324.768 cv
0 351.606 li
5.72363 355.44 12.4834 357.563 19.731 357.563 cv
19.731 341.351 li
cp
.113725 .219608 .403922 rgb
f
40.4609 290.416 mo
57.0215 290.416 li
57.0215 269.199 li
40.4609 269.199 li
40.4609 290.416 li
cp
0 .713726 .796078 rgb
f
18.3213 264.456 mo
8.93164 309.707 li
21.1396 304.073 li
20.2017 333.189 li
30.5313 287.165 li
18.3213 294.681 li
18.3213 264.456 li
cp
1 .760784 .227451 rgb
f
432.613 247.649 mo
435.307 238.684 li
429.918 238.684 li
432.613 247.649 li
cp
0 .713726 .796078 rgb
f
379.051 247.649 mo
381.744 238.684 li
376.357 238.684 li
379.051 247.649 li
cp
f
405.924 164.511 mo
424.111 215.624 li
426.125 213.165 429.186 211.595 432.613 211.595 cv
433.238 211.595 433.848 211.659 434.443 211.76 cv
416.355 160.921 li
405.924 164.511 li
cp
.909804 .345098 .141176 rgb
f
432.613 225.574 mo
430.959 225.574 429.619 224.234 429.619 222.581 cv
429.619 220.927 430.959 219.589 432.613 219.589 cv
434.264 219.589 435.604 220.927 435.604 222.581 cv
435.604 224.234 434.264 225.574 432.613 225.574 cv
cp
434.443 211.76 mo
433.848 211.659 433.238 211.595 432.613 211.595 cv
429.186 211.595 426.125 213.165 424.111 215.624 cv
422.559 217.518 421.625 219.939 421.625 222.581 cv
421.625 227.896 425.402 232.33 430.416 233.347 cv
430.58 233.379 430.748 233.396 430.914 233.422 cv
431.469 233.51 432.033 233.566 432.613 233.566 cv
435.775 233.566 438.619 232.222 440.623 230.082 cv
440.705 229.993 440.787 229.903 440.869 229.813 cv
442.563 227.879 443.598 225.354 443.598 222.581 cv
443.598 217.14 439.637 212.633 434.443 211.76 cv
cp
1 .760784 .227451 rgb
f
430.914 233.422 mo
430.748 233.396 430.58 233.379 430.416 233.347 cv
429.213 233.103 428.082 232.657 427.057 232.053 cv
427.057 233.9 li
427.057 236.729 429.045 239.024 431.498 239.024 cv
433.727 239.024 li
436.18 239.024 438.168 236.729 438.168 233.9 cv
438.168 232.048 li
436.539 233.012 434.643 233.566 432.613 233.566 cv
432.033 233.566 431.469 233.51 430.914 233.422 cv
cp
.909804 .345098 .141176 rgb
f
378.324 211.013 mo
380.164 211.013 li
382.617 211.013 384.605 213.308 384.605 216.137 cv
384.605 226.262 li
406.578 164.511 li
396.146 160.921 li
378.324 211.013 li
cp
f
373.496 230.638 mo
373.496 233.9 li
373.496 236.729 375.484 239.024 377.936 239.024 cv
380.164 239.024 li
382.617 239.024 384.605 236.729 384.605 233.9 cv
384.605 226.262 li
382.008 233.566 li
373.496 230.638 li
cp
f
380.164 211.013 mo
378.324 211.013 li
373.496 224.582 li
373.496 230.638 li
382.008 233.566 li
384.605 226.262 li
384.605 216.137 li
384.605 213.308 382.617 211.013 380.164 211.013 cv
cp
f
376.559 203.106 mo
435.887 203.106 li
435.887 189.897 li
376.559 189.897 li
376.559 203.106 li
cp
0 .713726 .796078 rgb
f
406.498 163.504 mo
403.186 163.504 400.502 160.817 400.502 157.507 cv
400.502 154.195 403.186 151.509 406.498 151.509 cv
409.809 151.509 412.494 154.195 412.494 157.507 cv
412.494 160.817 409.809 163.504 406.498 163.504 cv
cp
406.498 135.491 mo
394.338 135.491 384.482 145.349 384.482 157.507 cv
384.482 169.665 394.338 179.522 406.498 179.522 cv
418.656 179.522 428.514 169.665 428.514 157.507 cv
428.514 145.349 418.656 135.491 406.498 135.491 cv
cp
1 .760784 .227451 rgb
f
402.096 211.415 mo
410.9 211.415 li
410.9 183.075 li
402.096 183.075 li
402.096 211.415 li
cp
.113725 .219608 .403922 rgb
f
257.561 100.701 mo
265.576 98.2915 li
257.561 95.8833 li
257.561 100.701 li
cp
.909804 .345098 .141176 rgb
f
257.561 148.584 mo
265.576 146.177 li
257.561 143.769 li
257.561 148.584 li
cp
f
233.343 98.2915 mo
233.343 97.7329 233.4 97.188 233.49 96.6558 cv
188.04 112.826 li
191.249 122.152 li
236.945 105.892 li
234.747 104.092 233.343 101.356 233.343 98.2915 cv
cp
1 .760784 .227451 rgb
f
243.165 100.968 mo
241.686 100.968 240.49 99.77 240.49 98.2915 cv
240.49 96.8159 241.686 95.6187 243.165 95.6187 cv
244.643 95.6187 245.841 96.8159 245.841 98.2915 cv
245.841 99.77 244.643 100.968 243.165 100.968 cv
cp
249.63 90.9106 mo
247.901 89.397 245.644 88.4712 243.165 88.4712 cv
238.3 88.4712 234.271 92.0122 233.49 96.6558 cv
233.4 97.188 233.343 97.7329 233.343 98.2915 cv
233.343 101.356 234.747 104.092 236.945 105.892 cv
238.638 107.281 240.804 108.115 243.165 108.115 cv
247.917 108.115 251.881 104.738 252.789 100.256 cv
252.818 100.109 252.834 99.9595 252.856 99.811 cv
252.936 99.3149 252.985 98.8101 252.985 98.2915 cv
252.985 95.4644 251.783 92.9224 249.871 91.1304 cv
249.791 91.0571 249.711 90.9839 249.63 90.9106 cv
cp
0 .713726 .796078 rgb
f
253.284 93.3257 mo
251.628 93.3257 li
252.49 94.7817 252.985 96.4771 252.985 98.2915 cv
252.985 98.8101 252.936 99.3149 252.856 99.811 cv
252.834 99.9595 252.818 100.109 252.789 100.256 cv
252.571 101.332 252.173 102.342 251.633 103.259 cv
253.284 103.259 li
255.813 103.259 257.865 101.482 257.865 99.2886 cv
257.865 97.2964 li
257.865 95.103 255.813 93.3257 253.284 93.3257 cv
cp
1 .760784 .227451 rgb
f
188.04 130.893 mo
232.822 146.827 li
232.822 145.181 li
232.822 142.989 234.874 141.211 237.403 141.211 cv
246.455 141.211 li
191.249 121.567 li
188.04 130.893 li
cp
f
253.284 141.211 mo
246.455 141.211 li
252.985 143.534 li
250.367 151.143 li
253.284 151.143 li
255.813 151.143 257.865 149.366 257.865 147.174 cv
257.865 145.181 li
257.865 142.989 255.813 141.211 253.284 141.211 cv
cp
f
237.403 141.211 mo
234.874 141.211 232.822 142.989 232.822 145.181 cv
232.822 146.827 li
244.954 151.143 li
250.367 151.143 li
252.985 143.534 li
246.455 141.211 li
237.403 141.211 li
cp
f
213.945 148.405 mo
225.754 148.405 li
225.754 95.3647 li
213.945 95.3647 li
213.945 148.405 li
cp
.909804 .345098 .141176 rgb
f
184.988 127 mo
182.027 127 179.626 124.6 179.626 121.639 cv
179.626 118.679 182.027 116.278 184.988 116.278 cv
187.947 116.278 190.35 118.679 190.35 121.639 cv
190.35 124.6 187.947 127 184.988 127 cv
cp
184.988 101.957 mo
174.118 101.957 165.306 110.769 165.306 121.639 cv
165.306 132.51 174.118 141.321 184.988 141.321 cv
195.857 141.321 204.67 132.51 204.67 121.639 cv
204.67 110.769 195.857 101.957 184.988 101.957 cv
cp
0 .713726 .796078 rgb
f
207.847 125.575 mo
233.183 125.575 li
233.183 117.703 li
207.847 117.703 li
207.847 125.575 li
cp
.113725 .219608 .403922 rgb
f
179.863 164.453 mo
178.279 164.453 176.994 165.74 176.994 167.322 cv
176.994 183.949 li
176.994 185.533 178.279 186.818 179.863 186.818 cv
181.447 186.818 182.731 185.533 182.731 183.949 cv
182.731 167.322 li
182.731 165.74 181.447 164.453 179.863 164.453 cv
cp
f
158.504 159.096 mo
156.872 160.721 158.719 170.026 165.916 177.246 cv
173.11 184.469 180.327 180.992 180.327 180.992 cv
180.327 180.992 183.829 173.789 176.627 166.567 cv
169.434 159.347 160.135 157.471 158.504 159.096 cv
cp
0 .713726 .796078 rgb
f
179.863 180.021 mo
171.522 165.551 150.312 172.105 149.117 185.723 cv
148.005 198.409 153.279 209.251 162.278 220.803 cv
168.939 229.353 179.863 223.433 179.863 223.433 cv
179.863 223.433 190.786 229.353 197.447 220.803 cv
206.444 209.251 211.72 198.409 210.609 185.723 cv
209.414 172.105 188.203 165.551 179.863 180.021 cv
cp
.909804 .345098 .141176 rgb
f
136.933 247.959 mo
222.792 247.959 li
222.792 225.462 li
136.933 225.462 li
136.933 247.959 li
cp
1 .760784 .227451 rgb
f
132.045 258.16 mo
227.68 258.16 li
227.68 247.959 li
132.045 247.959 li
132.045 258.16 li
cp
.113725 .219608 .403922 rgb
f
136.195 273.036 mo
223.533 273.036 li
223.533 258.16 li
136.195 258.16 li
136.195 273.036 li
cp
0 .713726 .796078 rgb
f
169.565 267.937 mo
218.431 267.937 li
218.431 263.262 li
169.565 263.262 li
169.565 267.937 li
cp
1 .760784 .227451 rgb
f
146.709 231.382 mo
143.658 231.382 141.183 233.857 141.183 236.908 cv
141.183 239.96 143.658 242.435 146.709 242.435 cv
149.762 242.435 152.234 239.96 152.234 236.908 cv
152.234 233.857 149.762 231.382 146.709 231.382 cv
cp
0 .713726 .796078 rgb
f
217.691 247.959 mo
219.816 247.959 li
219.816 225.462 li
217.691 225.462 li
217.691 247.959 li
cp
.909804 .345098 .141176 rgb
f
213.441 247.959 mo
215.566 247.959 li
215.566 225.462 li
213.441 225.462 li
213.441 247.959 li
cp
f
209.191 247.959 mo
211.316 247.959 li
211.316 225.462 li
209.191 225.462 li
209.191 247.959 li
cp
f
152.234 273.036 mo
154.784 273.036 li
154.784 258.16 li
152.234 258.16 li
152.234 273.036 li
cp
f
147.694 273.036 mo
150.244 273.036 li
150.244 258.16 li
147.694 258.16 li
147.694 273.036 li
cp
f
128.942 24.9814 mo
128.942 24.9814 139.866 30.9014 146.526 22.3506 cv
152.38 14.8359 156.644 7.61816 158.612 0 cv
99.272 0 li
101.241 7.61816 105.504 14.8359 111.358 22.3506 cv
118.02 30.9014 128.942 24.9814 128.942 24.9814 cv
cp
1 .760784 .227451 rgb
f
128.942 416.001 mo
127.358 416.001 126.073 417.288 126.073 418.87 cv
126.073 435.497 li
126.073 437.081 127.358 438.366 128.942 438.366 cv
130.526 438.366 131.812 437.081 131.812 435.497 cv
131.812 418.87 li
131.812 417.288 130.526 416.001 128.942 416.001 cv
cp
.113725 .219608 .403922 rgb
f
107.585 410.644 mo
105.952 412.269 107.8 421.575 114.995 428.794 cv
122.19 436.017 129.407 432.54 129.407 432.54 cv
129.407 432.54 132.909 425.337 125.708 418.116 cv
118.514 410.896 109.215 409.019 107.585 410.644 cv
cp
0 .713726 .796078 rgb
f
159.688 437.271 mo
158.493 423.653 137.282 417.099 128.942 431.569 cv
120.603 417.099 99.3916 423.653 98.1963 437.271 cv
97.8081 441.703 98.2148 445.908 99.272 450 cv
158.612 450 li
159.67 445.908 160.077 441.703 159.688 437.271 cv
cp
1 .760784 .227451 rgb
f
60.3223 59.5967 mo
0 59.5967 li
0 82.0938 li
60.3223 82.0938 li
60.3223 59.5967 li
cp
0 .713726 .796078 rgb
f
65.2095 82.0938 mo
0 82.0938 li
0 92.2949 li
65.2095 92.2949 li
65.2095 82.0938 li
cp
.909804 .345098 .141176 rgb
f
61.063 92.2949 mo
0 92.2949 li
0 107.171 li
61.063 107.171 li
61.063 92.2949 li
cp
1 .760784 .227451 rgb
f
7.0957 102.071 mo
55.9614 102.071 li
55.9614 97.3965 li
7.0957 97.3965 li
7.0957 102.071 li
cp
0 .713726 .796078 rgb
f
55.2217 82.0938 mo
57.3467 82.0938 li
57.3467 59.5967 li
55.2217 59.5967 li
55.2217 82.0938 li
cp
.113725 .219608 .403922 rgb
f
50.9712 82.0938 mo
53.0967 82.0938 li
53.0967 59.5967 li
50.9712 59.5967 li
50.9712 82.0938 li
cp
f
46.7212 82.0938 mo
48.8462 82.0938 li
48.8462 59.5967 li
46.7212 59.5967 li
46.7212 82.0938 li
cp
f
449 315.41 mo
449 269.199 li
432.439 269.199 li
432.439 315.41 li
432.439 331.658 439.457 344.544 450 351.606 cv
450 324.768 li
449.342 321.951 449 318.822 449 315.41 cv
cp
.909804 .345098 .141176 rgb
f
449 315.41 mo
449 269.199 li
432.439 269.199 li
432.439 315.41 li
432.439 331.658 439.457 344.544 450 351.606 cv
450 324.768 li
449.342 321.951 449 318.822 449 315.41 cv
cp
.113725 .219608 .403922 rgb
f
432.439 290.416 mo
449 290.416 li
449 269.199 li
432.439 269.199 li
432.439 290.416 li
cp
0 .713726 .796078 rgb
f
135.505 76.3687 mo
135.505 88.8872 129.661 96.5483 119.378 96.5483 cv
109.096 96.5483 103.251 88.8872 103.251 76.3687 cv
103.251 40.4185 li
90.3672 40.4185 li
90.3672 76.3687 li
90.3672 95.8706 103.354 109.162 119.378 109.162 cv
135.399 109.162 148.389 95.8706 148.389 76.3687 cv
148.389 40.4185 li
135.505 40.4185 li
135.505 76.3687 li
cp
.909804 .345098 .141176 rgb
f
103.251 76.3687 mo
103.251 40.4185 li
90.3672 40.4185 li
90.3672 76.3687 li
90.3672 95.8706 103.354 109.162 119.378 109.162 cv
119.378 96.5483 li
109.096 96.5483 103.251 88.8872 103.251 76.3687 cv
cp
.113725 .219608 .403922 rgb
f
90.3672 56.9243 mo
103.251 56.9243 li
103.251 40.4185 li
90.3672 40.4185 li
90.3672 56.9243 li
cp
0 .713726 .796078 rgb
f
135.505 56.9243 mo
148.389 56.9243 li
148.389 40.4185 li
135.505 40.4185 li
135.505 56.9243 li
cp
f
118.281 36.728 mo
110.977 71.9312 li
120.475 67.5483 li
119.744 90.1997 li
127.78 54.395 li
118.281 60.2417 li
118.281 36.728 li
cp
1 .760784 .227451 rgb
f
424.463 59.5967 mo
424.463 82.0938 li
450 82.0938 li
450 59.5967 li
424.463 59.5967 li
cp
f
419.576 82.0938 mo
419.576 92.2949 li
450 92.2949 li
450 82.0938 li
419.576 82.0938 li
cp
.113725 .219608 .403922 rgb
f
423.725 92.2949 mo
423.725 107.171 li
450 107.171 li
450 92.2949 li
423.725 92.2949 li
cp
0 .713726 .796078 rgb
f
434.239 65.5166 mo
431.188 65.5166 428.713 67.9922 428.713 71.043 cv
428.713 74.0947 431.188 76.5693 434.239 76.5693 cv
437.292 76.5693 439.765 74.0947 439.765 71.043 cv
439.765 67.9922 437.292 65.5166 434.239 65.5166 cv
cp
f
439.765 107.171 mo
442.314 107.171 li
442.314 92.2949 li
439.765 92.2949 li
439.765 107.171 li
cp
.909804 .345098 .141176 rgb
f
435.225 107.171 mo
437.774 107.171 li
437.774 92.2949 li
435.225 92.2949 li
435.225 107.171 li
cp
f
339.851 104.87 mo
339.149 103.237 337.341 102.902 335.812 104.12 cv
334.282 105.335 333.611 107.645 334.313 109.276 cv
353.099 152.973 li
353.8 154.604 355.61 154.939 357.138 153.723 cv
358.667 152.505 359.339 150.198 358.639 148.565 cv
339.851 104.87 li
cp
.113725 .219608 .403922 rgb
f
336.017 104.12 mo
334.486 102.902 332.679 103.237 331.977 104.87 cv
313.19 148.565 li
312.489 150.198 313.16 152.505 314.689 153.723 cv
316.218 154.939 318.026 154.604 318.728 152.973 cv
337.516 109.276 li
338.218 107.645 337.547 105.335 336.017 104.12 cv
cp
f
336.163 98.9165 mo
334.392 98.8862 332.943 100.396 332.927 102.286 cv
332.485 152.905 li
332.469 154.793 333.893 156.348 335.664 156.377 cv
337.435 156.407 338.886 154.896 338.901 153.006 cv
339.343 102.389 li
339.358 100.5 337.937 98.9438 336.163 98.9165 cv
cp
f
343.745 90.0249 mo
330.347 90.0249 li
327.921 90.0249 325.955 91.9917 325.955 94.4165 cv
325.955 108.417 li
325.955 110.841 327.921 112.807 330.347 112.807 cv
343.745 112.807 li
346.171 112.807 348.135 110.841 348.135 108.417 cv
348.135 94.4165 li
348.135 91.9917 346.171 90.0249 343.745 90.0249 cv
cp
0 .713726 .796078 rgb
f
295.519 89.1899 mo
299.379 100.563 li
313.62 95.729 li
309.759 84.356 li
295.519 89.1899 li
cp
.113725 .219608 .403922 rgb
f
303.841 77.4839 mo
313.106 104.782 li
347.284 93.1821 li
338.019 65.8843 li
303.841 77.4839 li
cp
.909804 .345098 .141176 rgb
f
330.636 61.5903 mo
344.04 101.083 li
393.486 84.2993 li
380.081 44.8071 li
330.636 61.5903 li
cp
f
388.502 42.4927 mo
387.436 39.3521 384.024 37.6694 380.884 38.7349 cv
375.749 40.478 li
372.608 41.5444 370.927 44.9546 371.991 48.0962 cv
385.066 86.6147 li
386.133 89.7563 389.543 91.438 392.684 90.3716 cv
397.817 88.6284 li
400.959 87.564 402.641 84.1528 401.574 81.0122 cv
388.502 42.4927 li
cp
1 .760784 .227451 rgb
f
294.532 84.3589 mo
293.96 82.6772 292.132 81.7759 290.45 82.3462 cv
287.698 83.2798 li
286.018 83.8521 285.116 85.6782 285.688 87.3608 cv
292.692 107.999 li
293.263 109.68 295.089 110.582 296.771 110.01 cv
299.523 109.077 li
301.205 108.505 302.106 106.679 301.535 104.995 cv
294.532 84.3589 li
cp
f
93.957 393.619 mo
91.563 393.619 89.623 395.561 89.623 397.954 cv
89.623 400.173 li
89.623 402.567 91.563 404.507 93.957 404.507 cv
96.3496 404.507 98.2905 402.567 98.2905 400.173 cv
98.2905 397.954 li
98.2905 395.561 96.3496 393.619 93.957 393.619 cv
cp
.909804 .345098 .141176 rgb
f
160.442 393.619 mo
158.048 393.619 156.109 395.561 156.109 397.954 cv
156.109 400.173 li
156.109 402.567 158.048 404.507 160.442 404.507 cv
162.837 404.507 164.776 402.567 164.776 400.173 cv
164.776 397.954 li
164.776 395.561 162.837 393.619 160.442 393.619 cv
cp
f
126.317 351.611 mo
128.942 351.611 li
128.942 304.708 li
126.317 304.708 li
126.317 351.611 li
cp
.113725 .219608 .403922 rgb
f
127.63 348.224 mo
124.463 348.224 121.897 350.791 121.897 353.956 cv
121.897 357.123 124.463 359.69 127.63 359.69 cv
130.797 359.69 133.362 357.123 133.362 353.956 cv
133.362 350.791 130.797 348.224 127.63 348.224 cv
cp
1 .760784 .227451 rgb
f
103.419 351.611 mo
106.043 351.611 li
106.043 304.708 li
103.419 304.708 li
103.419 351.611 li
cp
.113725 .219608 .403922 rgb
f
104.731 348.224 mo
101.565 348.224 98.998 350.791 98.998 353.956 cv
98.998 357.123 101.565 359.69 104.731 359.69 cv
107.897 359.69 110.465 357.123 110.465 353.956 cv
110.465 350.791 107.897 348.224 104.731 348.224 cv
cp
1 .760784 .227451 rgb
f
103.002 349.917 mo
102.067 349.917 101.308 350.677 101.308 351.611 cv
101.308 352.548 102.067 353.306 103.002 353.306 cv
103.938 353.306 104.696 352.548 104.696 351.611 cv
104.696 350.677 103.938 349.917 103.002 349.917 cv
cp
1 1 1 rgb
f
114.868 351.611 mo
117.493 351.611 li
117.493 304.708 li
114.868 304.708 li
114.868 351.611 li
cp
.113725 .219608 .403922 rgb
f
116.18 348.224 mo
113.013 348.224 110.447 350.791 110.447 353.956 cv
110.447 357.123 113.013 359.69 116.18 359.69 cv
119.347 359.69 121.914 357.123 121.914 353.956 cv
121.914 350.791 119.347 348.224 116.18 348.224 cv
cp
1 .760784 .227451 rgb
f
114.416 349.917 mo
113.482 349.917 112.723 350.677 112.723 351.611 cv
112.723 352.548 113.482 353.306 114.416 353.306 cv
115.353 353.306 116.11 352.548 116.11 351.611 cv
116.11 350.677 115.353 349.917 114.416 349.917 cv
cp
1 1 1 rgb
f
125.831 349.917 mo
124.896 349.917 124.137 350.677 124.137 351.611 cv
124.137 352.548 124.896 353.306 125.831 353.306 cv
126.766 353.306 127.524 352.548 127.524 351.611 cv
127.524 350.677 126.766 349.917 125.831 349.917 cv
cp
f
137.572 305.646 mo
147.739 351.435 li
150.299 350.866 li
140.133 305.077 li
137.572 305.646 li
cp
.113725 .219608 .403922 rgb
f
148.285 347.843 mo
145.193 348.528 143.243 351.591 143.93 354.682 cv
144.617 357.772 147.679 359.722 150.769 359.036 cv
153.861 358.351 155.811 355.286 155.122 352.197 cv
154.438 349.105 151.378 347.157 148.285 347.843 cv
cp
1 .760784 .227451 rgb
f
146.86 349.895 mo
145.949 350.097 145.374 351.001 145.576 351.915 cv
145.776 352.827 146.684 353.403 147.595 353.201 cv
148.509 352.997 149.083 352.094 148.882 351.181 cv
148.681 350.267 147.776 349.69 146.86 349.895 cv
cp
1 1 1 rgb
f
89.3413 380.056 mo
98.2905 380.056 li
98.2905 308.457 li
89.3413 308.457 li
89.3413 380.056 li
cp
.909804 .345098 .141176 rgb
f
155.969 380.056 mo
164.919 380.056 li
164.919 308.457 li
155.969 308.457 li
155.969 380.056 li
cp
f
86.8545 308.457 mo
167.404 308.457 li
167.404 299.507 li
86.8545 299.507 li
86.8545 308.457 li
cp
f
164.919 368.708 mo
89.3413 368.708 li
83.8491 368.708 79.396 373.161 79.396 378.653 cv
79.396 388.011 li
79.396 393.504 83.8491 397.956 89.3413 397.956 cv
164.919 397.956 li
170.409 397.956 174.862 393.504 174.862 388.011 cv
174.862 378.653 li
174.862 373.161 170.409 368.708 164.919 368.708 cv
cp
0 .713726 .796078 rgb
f
226.311 410.232 mo
214.577 410.232 204.607 426.853 200.957 450 cv
207.646 450 li
211.081 432.158 219.096 419.644 228.436 419.644 cv
237.774 419.644 245.789 432.158 249.225 450 cv
251.661 450 li
248.013 426.853 238.044 410.232 226.311 410.232 cv
cp
.909804 .345098 .141176 rgb
f
246.003 438.308 mo
245.65 437.337 245.283 436.407 244.899 435.499 cv
235.576 437.058 225.244 440.27 214.83 445.196 cv
212.445 446.324 210.16 447.522 207.924 448.749 cv
207.839 449.156 207.771 449.582 207.695 450 cv
210.167 450 li
211.977 449.011 213.822 448.043 215.748 447.132 cv
226.398 442.091 236.968 439.151 246.003 438.308 cv
cp
0 .713726 .796078 rgb
f
279.849 444.129 mo
276.003 436.001 263.749 433.01 248.115 435.017 cv
248.439 436.018 248.732 437.067 249.029 438.113 cv
259.601 437.674 267.646 440.342 270.433 446.234 cv
270.99 447.413 271.303 448.676 271.411 450 cv
281.061 450 li
281.087 447.912 280.704 445.938 279.849 444.129 cv
cp
f
182.186 446.234 mo
184.973 440.342 193.014 437.674 203.583 438.113 cv
203.881 437.063 204.182 436.021 204.507 435.017 cv
188.874 433.01 176.615 435.997 172.771 444.129 cv
171.916 445.938 171.533 447.912 171.559 450 cv
181.207 450 li
181.315 448.676 181.628 447.413 182.186 446.234 cv
cp
.113725 .219608 .403922 rgb
f
211.654 436.229 mo
211.32 437.063 210.998 437.934 210.684 438.816 cv
218.756 440.066 227.785 442.832 236.871 447.132 cv
238.804 448.045 240.665 449.01 242.481 450 cv
246.935 450 li
244.022 448.317 240.978 446.703 237.788 445.196 cv
228.826 440.955 219.917 437.978 211.654 436.229 cv
cp
f
241.021 416.741 mo
236.732 416.741 233.256 420.217 233.256 424.503 cv
233.256 428.788 236.732 432.264 241.021 432.264 cv
245.305 432.264 248.782 428.788 248.782 424.503 cv
248.782 420.217 245.305 416.741 241.021 416.741 cv
cp
f
334.27 11.5234 mo
329.059 11.5234 324.835 14.9512 324.835 19.1816 cv
324.835 23.4102 329.059 26.8379 334.27 26.8379 cv
339.479 26.8379 343.705 23.4102 343.705 19.1816 cv
343.705 14.9512 339.479 11.5234 334.27 11.5234 cv
cp
0 .713726 .796078 rgb
f
334.27 .855469 mo
347.142 .855469 li
347.142 .855469 347.104 .538574 347.085 0 cv
321.454 0 li
321.436 .538574 321.397 .855469 321.397 .855469 cv
334.27 .855469 li
cp
1 .760784 .227451 rgb
f
341.942 2.67969 mo
326.598 2.67969 li
323.727 2.67969 321.397 4.58984 321.397 6.94531 cv
321.397 9.30078 323.727 11.2109 326.598 11.2109 cv
341.942 11.2109 li
344.813 11.2109 347.142 9.30078 347.142 6.94531 cv
347.142 4.58984 344.813 2.67969 341.942 2.67969 cv
cp
.113725 .219608 .403922 rgb
f
341.942 8.26758 mo
326.598 8.26758 li
323.727 8.26758 321.397 10.1758 321.397 12.5313 cv
321.397 14.8887 323.727 16.7969 326.598 16.7969 cv
341.942 16.7969 li
344.813 16.7969 347.142 14.8887 347.142 12.5313 cv
347.142 10.1758 344.813 8.26758 341.942 8.26758 cv
cp
f
341.942 13.8496 mo
326.598 13.8496 li
323.727 13.8496 321.397 15.5508 321.397 17.6484 cv
321.397 19.7461 323.727 21.4473 326.598 21.4473 cv
341.942 21.4473 li
344.813 21.4473 347.142 19.7461 347.142 17.6484 cv
347.142 15.5508 344.813 13.8496 341.942 13.8496 cv
cp
f
307.604 5.96094 mo
308.458 6.45313 309.431 6.36328 309.778 5.76172 cv
313.104 0 li
308.989 0 li
306.691 3.97852 li
306.345 4.58398 306.752 5.46875 307.604 5.96094 cv
cp
1 .760784 .227451 rgb
f
360.936 5.96094 mo
361.787 5.46875 362.195 4.58398 361.849 3.97852 cv
359.551 0 li
355.435 0 li
358.762 5.76172 li
359.11 6.36328 360.082 6.45313 360.936 5.96094 cv
cp
f
330.044 2.3457 mo
331.007 2.13281 331.611 1.17969 331.398 .220703 cv
331.35 0 li
327.695 0 li
327.916 .992188 li
328.129 1.95508 329.082 2.56055 330.044 2.3457 cv
cp
.113725 .219608 .403922 rgb
f
338.495 2.3457 mo
339.458 2.56055 340.411 1.95508 340.623 .992188 cv
340.844 0 li
337.189 0 li
337.141 .220703 li
336.927 1.17969 337.533 2.13281 338.495 2.3457 cv
cp
f
350.001 5.625 mo
350.001 0 li
318.539 0 li
318.539 5.625 li
350.001 5.625 li
cp
0 .713726 .796078 rgb
f
226.311 78.6895 mo
241.135 78.6895 253.151 52.1709 253.151 19.459 cv
253.151 12.6401 252.623 6.09668 251.661 0 cv
249.225 0 li
250.375 5.97852 251.013 12.5542 251.013 19.459 cv
251.013 46.9717 240.904 69.2764 228.436 69.2764 cv
215.966 69.2764 205.857 46.9717 205.857 19.459 cv
205.857 12.5542 206.495 5.97852 207.646 0 cv
200.957 0 li
199.996 6.09668 199.467 12.6401 199.467 19.459 cv
199.467 52.1709 211.486 78.6895 226.311 78.6895 cv
cp
.909804 .345098 .141176 rgb
f
210.167 0 mo
207.695 0 li
207.603 .51123 207.505 1.0166 207.415 1.53027 cv
208.31 1.0083 209.242 .505859 210.167 0 cv
cp
0 .713726 .796078 rgb
f
235.057 37.9492 mo
210.188 49.7148 185.703 50.1162 180.369 38.8438 cv
176.266 30.1699 184.73 17.1201 200.174 6.19727 cv
200.281 5.15137 200.423 4.1377 200.554 3.11621 cv
179.527 16.6162 167.529 33.709 172.771 44.793 cv
179.107 58.1895 208.218 57.7148 237.791 43.7227 cv
263.367 31.623 280.893 13.3799 281.061 0 cv
271.411 0 li
272.341 11.3394 257.326 27.4111 235.057 37.9492 cv
cp
f
252.435 6.19043 mo
257.104 9.49219 261.125 12.9893 264.365 16.5049 cv
265.055 15.6758 265.687 14.8486 266.282 14.0225 cv
262.219 10.2598 257.438 6.56445 252.052 3.11035 cv
252.186 4.12988 252.328 5.14453 252.435 6.19043 cv
cp
.113725 .219608 .403922 rgb
f
179.514 16.7217 mo
175.225 16.7217 171.75 20.1973 171.75 24.4834 cv
171.75 28.7695 175.225 32.2441 179.514 32.2441 cv
183.799 32.2441 187.275 28.7695 187.275 24.4834 cv
187.275 20.1973 183.799 16.7217 179.514 16.7217 cv
cp
.909804 .345098 .141176 rgb
f
214.826 43.7227 mo
244.4 57.7148 273.51 58.1895 279.849 44.793 cv
283.109 37.8955 279.692 28.6768 271.584 19.4424 cv
270.752 20.3896 269.886 21.3398 268.955 22.2832 cv
273.032 28.3916 274.428 34.2373 272.251 38.8438 cv
266.916 50.1162 242.432 49.7148 217.563 37.9492 cv
195.292 27.4111 180.279 11.3394 181.207 0 cv
171.559 0 li
171.726 13.3799 189.251 31.623 214.826 43.7227 cv
cp
.113725 .219608 .403922 rgb
f
249.443 1.48242 mo
248.62 .982422 247.781 .489258 246.935 0 cv
242.481 0 li
245.084 1.41992 247.578 2.90283 249.919 4.44727 cv
249.777 3.44238 249.618 2.45605 249.443 1.48242 cv
cp
f
226.313 3.12012 mo
218.187 3.12012 211.601 9.7041 211.601 17.8291 cv
211.601 25.9492 218.187 32.5332 226.313 32.5332 cv
234.434 32.5332 241.02 25.9492 241.02 17.8291 cv
241.02 9.7041 234.434 3.12012 226.313 3.12012 cv
cp
0 .713726 .796078 rgb
f
259.17 42.3262 mo
254.881 42.3262 251.405 45.8027 251.405 50.0889 cv
251.405 54.375 254.881 57.8486 259.17 57.8486 cv
263.455 57.8486 266.931 54.375 266.931 50.0889 cv
266.931 45.8027 263.455 42.3262 259.17 42.3262 cv
cp
f
221.826 7.56055 mo
218.047 7.56055 214.982 10.624 214.982 14.4043 cv
214.982 18.1816 218.047 21.2451 221.826 21.2451 cv
225.604 21.2451 228.668 18.1816 228.668 14.4043 cv
228.668 10.624 225.604 7.56055 221.826 7.56055 cv
cp
1 1 1 rgb
f
221.826 7.56055 mo
218.047 7.56055 214.982 10.624 214.982 14.4043 cv
214.982 18.1816 218.047 21.2451 221.826 21.2451 cv
225.604 21.2451 228.668 18.1816 228.668 14.4043 cv
228.668 10.624 225.604 7.56055 221.826 7.56055 cv
cp
f
324.432 224.791 mo
324.432 250.101 315.133 270.619 303.663 270.619 cv
292.191 270.619 282.893 250.101 282.893 224.791 cv
282.893 199.484 292.191 178.965 303.663 178.965 cv
315.133 178.965 324.432 199.484 324.432 224.791 cv
cp
301.708 170.308 mo
288.071 170.308 277.014 194.702 277.014 224.791 cv
277.014 254.884 288.071 279.278 301.708 279.278 cv
315.345 279.278 326.399 254.884 326.399 224.791 cv
326.399 194.702 315.345 170.308 301.708 170.308 cv
cp
.909804 .345098 .141176 rgb
f
291.146 202.472 mo
288.953 203.509 286.851 204.611 284.794 205.74 cv
284.621 206.573 284.476 207.439 284.326 208.298 cv
286.759 206.879 289.314 205.519 291.991 204.252 cv
301.789 199.615 311.512 196.911 319.823 196.135 cv
319.499 195.242 319.161 194.386 318.809 193.551 cv
310.231 194.985 300.727 197.939 291.146 202.472 cv
cp
0 .713726 .796078 rgb
f
321.767 193.107 mo
322.064 194.028 322.334 194.994 322.607 195.956 cv
332.332 195.552 339.732 198.006 342.297 203.426 cv
347.201 213.795 332.632 230.975 309.754 241.801 cv
286.877 252.624 264.353 252.993 259.445 242.623 cv
255.671 234.645 263.458 222.64 277.664 212.591 cv
277.764 211.629 277.894 210.697 278.014 209.757 cv
258.672 222.176 247.634 237.9 252.457 248.097 cv
258.285 260.42 285.064 259.983 312.269 247.111 cv
339.47 234.244 356.789 213.818 350.958 201.49 cv
347.421 194.013 336.148 191.261 321.767 193.107 cv
cp
f
325.74 212.585 mo
330.036 215.623 333.734 218.839 336.715 222.073 cv
337.35 221.311 337.931 220.55 338.479 219.79 cv
334.74 216.329 330.343 212.929 325.388 209.752 cv
325.511 210.689 325.642 211.623 325.74 212.585 cv
cp
1 .760784 .227451 rgb
f
258.659 222.273 mo
254.713 222.273 251.517 225.471 251.517 229.413 cv
251.517 233.356 254.713 236.553 258.659 236.553 cv
262.601 236.553 265.799 233.356 265.799 229.413 cv
265.799 225.471 262.601 222.273 258.659 222.273 cv
cp
.909804 .345098 .141176 rgb
f
340.938 227.39 mo
344.688 233.009 345.972 238.386 343.969 242.623 cv
339.062 252.993 316.538 252.624 293.66 241.801 cv
270.782 230.975 256.214 213.795 261.117 203.426 cv
263.681 198.006 271.078 195.552 280.801 195.956 cv
281.074 194.99 281.352 194.032 281.65 193.107 cv
267.27 191.261 255.992 194.009 252.457 201.49 cv
246.624 213.818 263.944 234.244 291.144 247.111 cv
318.349 259.983 345.127 260.42 350.958 248.097 cv
353.958 241.751 350.814 233.271 343.355 224.776 cv
342.59 225.647 341.793 226.521 340.938 227.39 cv
cp
1 .760784 .227451 rgb
f
312.267 202.472 mo
304.022 198.57 295.826 195.831 288.226 194.223 cv
287.918 194.99 287.622 195.791 287.332 196.603 cv
294.758 197.752 303.064 200.297 311.423 204.252 cv
315.747 206.296 319.771 208.569 323.426 210.981 cv
323.295 210.057 323.149 209.15 322.988 208.254 cv
319.624 206.21 316.053 204.261 312.267 202.472 cv
cp
f
301.711 209.761 mo
294.234 209.761 288.176 215.817 288.176 223.292 cv
288.176 230.762 294.234 236.818 301.711 236.818 cv
309.181 236.818 315.239 230.762 315.239 223.292 cv
315.239 215.817 309.181 209.761 301.711 209.761 cv
cp
0 .713726 .796078 rgb
f
331.936 245.827 mo
327.99 245.827 324.793 249.025 324.793 252.968 cv
324.793 256.911 327.99 260.106 331.936 260.106 cv
335.878 260.106 339.075 256.911 339.075 252.968 cv
339.075 249.025 335.878 245.827 331.936 245.827 cv
cp
f
315.24 176.295 mo
311.295 176.295 308.097 179.493 308.097 183.436 cv
308.097 187.377 311.295 190.575 315.24 190.575 cv
319.181 190.575 322.38 187.377 322.38 183.436 cv
322.38 179.493 319.181 176.295 315.24 176.295 cv
cp
1 .760784 .227451 rgb
f
297.583 213.846 mo
294.106 213.846 291.287 216.664 291.287 220.142 cv
291.287 223.616 294.106 226.435 297.583 226.435 cv
301.059 226.435 303.877 223.616 303.877 220.142 cv
303.877 216.664 301.059 213.846 297.583 213.846 cv
cp
1 1 1 rgb
f
297.583 213.846 mo
294.106 213.846 291.287 216.664 291.287 220.142 cv
291.287 223.616 294.106 226.435 297.583 226.435 cv
301.059 226.435 303.877 223.616 303.877 220.142 cv
303.877 216.664 301.059 213.846 297.583 213.846 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\704\740\770\740) ()
%%Title: (1404.i029.083.F.m005.c0.science seamless pattern 3.eps)
%%CreationDate: 4/7/2014 11:47 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBm\;ufC8[*lf(.=GAgY5,\UP8;RBPjXe^WPKpFd.Or,0#og6k#iVDm0=_:,J>IG94g.q$l@p'_0k+"GQp).5K'FuPh::G]e
%&,s;j0H*$5CGbNt>eG%?dZ<33q.O2rFO6VLjSeW*E6um#UL_^j$qE5pabNp3nYgR5='CSjnm68(=!R.@g@*skkaqYulh9mc0Ka'/
%)r@_`-g`j7o<T%a"V'BESbM$s4+U?-q03==J@=^Q:[Z7!,I(`\0#)^q+*C*6@;FX=oRFK)<MOm^2nbiU[eKn\G,&J4\I98nBn"^'
%oZ$gQ7SsO'a&a23`7;lf;`lk1]0(>"8];6p^R9X6+j5n&Impcu,<WCQG/N;%m-UYE%#ZW\LhXA8M&X[,#N2#ne4IU:e,8:6f,Eg/
%<0lY6\r@a0d(dZE0EtKra"qm%c`l?C2KrFcoGXk]:72-QnI/@O;[dmL^75.FU[_jNlJt;eWmPduhu+XUSfeVbqT5P"&"iO,@mHYV
%k<^5O7tXRn")s1QZX/QE=G)q=M],Aq_kVSf1caboE'/"p!^g;kBl`dKocZij1W;^&TB?*MKBLb3*RjSLL2XlcmFq&ER$Q\i>i1a_
%(A_u"e:pm[N3-J,Z?76ZC(El+nZ[AimGHP&@$!Op'\%GQf^0Bkl<B6urt-6_JbBT8>BC[3+-6$-m([8J8KMSVDsTZ6/=uD(G]IiO
%DflY;<^?*RHPHYQpX@^'"f#u?L'tojG9d)@c:;j(J<t-5Ii)=5Kd$Fk&pY7tK)bA@D<"XNk,VWS\+=I.LXeKt^Ngl$o/s,:H!)I5
%%7@31L0,gV(Yp-e==jrd)BRjeXHk,6/P5H_,f)!&Jp"@-Y@a3cdHt(k's`d:i_FQ]\OZQk^5BDBla@83is/UP\F;^`6b"DKHjtYD
%s&]MW_Z'bN6jMV.E8c<EL-X^ICl4@o9d<L0T4#\A4H4==;]2Lg"0@6MiI@qmAU$t1&p9d#c+%:`iIAS,Tk=A8qqO8^5':0AQ)qhU
%XG/FgIr'uIOs0"(@c6_UX!*FBU_u%;1W"tJnJ_PNFFaB[kOB8ca(bl)ro_+.Eae$L&+H!M(9$hfP2su0(E)sLNKGT._pC1>e9UI#
%5FL8l_o>^;$gSpcP"$$K\t(#-b6T?la(e<6#UAA`DoVfZ#6BM4-'cZA`9?5o0VqE_Q:)t^N]PK3_aGXqM&]a>551+XcVJ06;<R&V
%8GK^l=A:uOS*("N3kn)GH(m'*o@PjN\;?/N9Zk?@kBl-13I?[0-BV<P"/^0##7=)!gC%bZ1VXcDM<eV-YYPn&FF/QOfj39Bq.+B1
%D`(7A?MGsOV(#`:`KuHXIQ7mf00]18\%=8b.R*[iqu"/&jAuo^pE3:.&&]uUpepY(Y;k\5`@&FYp,(l0`@&Eh:&\IHo#ji__<5eH
%nNW'fJ!]'f'4J8<`,Ut`9+<QE"3UmBa"b<u,sNWe*WUqaM,,G5s%$GT;#fUbUX8K=cOJi&(C,a7i@>e<KA6@%CP<@M[1b>O*B<cO
%3<;#O`27%aE#&h0g53>*)GHYm3;\*nC%>o("h&-7O_Y"X<q/Yf5_je<?jk.:c@!e&#?I&.f<lne[YO@/@fjQ,4@<0D4f^#OK%C!Y
%'F2^WB*.0!NpR^`C!3u"#LjU,RDNU$1jOIZ?Vl7ATLZF2e'hc-65F=.5o<eX"ATFlEIf&K\3QS$92:e`2@^N3%:VJXK%NXG"NN=f
%S7a$:G,!&)!OPuq'T,26!Z.;V:AZIu@g,tB@K:.O8@-BmLB<Tl)1k+LO$('L]H+Z(bK9q*?s&!;']YB'L:j&hTt_$@8CF'Z`%E;"
%@L!04J0?ra6NdN(3.tclJKZd2^WAW)as&MJ!5QK2&?uCH\2[5!cRa@`7&2,JS*bq5YlI.`3e0a?S*+e,cBmZiknD+S@jFB^eD2AW
%XTUY&)KFqsob!1/4p)qiFG^`bjqb>a$7p/"E#+m+h$u+qAbTKbD[(``+Rq2nX5u^h*B=1XM1#Ck=.PC%E0'IL]:N,uj]^<(O+_;h
%:'C.gqJ(i3#ECu2&j)f'JTELKR+hKcpI4!]So)mq@<M[=c6Qlc+:2n80P$(4Bbk1@,LZ]8(Z8[j1jp(Edc\"(E^m8;U>*p<_]`NY
%[hCcmiHEZ^e'\k7Nnap&5fVW7H!hjC&?MjbP:,903jFBB4[MLVp#1RbdfXItGhPD!Oc]Z'!9sjZM"r1;_h)%%W%WKWdqNP$LbsE%
%HkIK__Z2,pLP%RC&1>guP;&&VaWm$P0&f%$Tk2tM,b?=-O\eaP-SfB5D&a)6H-;6W`T(VK4]=I#U[JeE6^#8tCh.K^6ke-HXN6(2
%Z^E\\2YMfqP6#$17IQAJ;K)JtKgir?/tN[UesQsZbCXGD+F1ID%O+844c-"g;4+h]`8t8ZE%nHc43oeP$T;J5`/h`8[U%r*@`AH?
%&R>fQI*pZ("MZ+3B&\M_EU5QNPp-dhH1!Laf?!$pMJSKQ#ZC`O2iYSF8k[G9U,jSlLaX7bED7enm%QTX8=qVu'@8OY*q3lQB)qUB
%7#`J#k5tp]F4a>0$df'>"OMcJpOG;#eE$s:aTBSH8>Pk,K>?Spe.2X/%6Q8:c6IA2N5YgWI:i:?U5JE'e3WdBcn#HYa8:J7bDpPr
%e%I0g_(WN<',IqZR_o/h"H)1cF$F-g>ht,j)>1f*Go0#l%@CElk)=pZ9Sd>NkQr[e9Go\.gdfI9".4`ESe8K8jh$WukB%R:?Jn@r
%&I#](fdsi^WLRLV_dXpUFJnC_#e>b:;'7\G!sF/YZ^87\>U:V/O'$qHpc.G7K.$e(-Jo*1,noVH\fJ-LL5n]Z&BIbTKf8TsLb=EB
%anUjoUI0Ghb&:\6$1om96g)p'!/7*qAfS3oE/3E*%R-BGT/]'?-AuT!1bU$pAm')"KcUh>]O10ZBmic)S!blR.T&&jS5=u>_(LR]
%LdhI!q+sUX^p%Ma!;K8^?N_a='Q8[O`Jlr4F?%[QJ6M(fUC%\<<of)i'*4"tg-t2hP_#je*#q=5-GXOH6lgff84]/iB0(Z/T],uG
%Ru#K!Ka+4_l-,WQ<cjdd[_O]k#fIs[(Yt(J5D`Y_kor6J=XU_Q5]Xk--KRYa%Zpq@X!g`cj?*6!1Z)=m5dQ"eMQ?5Pq*lfs16GPo
%S&a>$1<sEH'<3W^AAWq3&^Ro*LaqmVr@Y.hJ`o.&h$r_h%2@B+0J5mXjj'd"hb7ON]ACbRS;0Mb%\#+C7#[SLcBo_q5D_F+A/uqg
%L%kZgq_#+nb-qni^@)*_6FDJs":`.X)/#nN$M=sl7p*d6>/!Ha;$G?"_XE`+khs7.d'P>X>qM["BKThEZgo-YA(g5pB(V7,+ttOG
%43Iuj(#;@Y$N/^uU<6L`>U#Y0RO5=JH-V9R:o;b46N35)`YOY:In!=PJ\'j_RE.OWWf`g-;H"s29+"Na,Qao3h:_i0>?DZ!0b6k`
%.Y(,+p;fL!Fr.l,gkF%\k\[S8MZR2%2&r/aLJ0$?6^5r<ZU>_'A3WHd%iG]fm_#3*"dAj*P>st>!SGAeSD13=\<[R^0/hpeC'8]F
%1Ac6G]0j%`QDajsQdmo8l%CdE"%NI2X?qN#A>oDNmU66-&/CKN4N7Ti@%#;W/=[tL.#5N,@"`KWO8uBB\KT6]'I_ES;CYniB-a>[
%WWEc8;lo_=49q63BtgoS_,Q.'mUiDZ_@pDuq()hIl?8B='np\0=@a=Ng!D+"GU<;[We56pFW7uNl9bgc]_oe(eQ8]tA28ji,3oRj
%XY:EFCDiOkBR+i=N(>t3`3dj.(fH1u*!j"VE?,aiX;8CYgq^p'8*Z-8%MZd'P>&fl2tD7mPVDgYQ9`-L#;B$2/rQYNk1b`f#UYN$
%XpGl'M(18>7b>VLS'e0GG?I'3=JNr-/Jje>Jc1B+H?qnRf+aFcK!o>pRZ'9m$'VSKGDf\Pb&\20#Ycg]Z(8+lB(mS*D\d=Qr"$96
%=^e1ZNfBE-cigeL\s@+l^m!_5PX\d5#k$\-S&"3nQmCdH%4p1IPd0mjq"11pCM^ouEL$pO$h-P3ArU!1k*`g""D1bL24_\ViS?ng
%$oc(F*h0CT!&r7o_7$.0!kE+ja4YgTF,X(mLi$AJ-J/b@T>M[Yhh5W_n!ANe%4b4gB(hGr`'^""2_/UPAEP/3cCk%83d/<Cc_T60
%R0o@'<"j]8V_6)_PXuS6?tkiRNLE\-Z2Q5##,Ic_,)ik""@>F1(oJ*a,/UCs2QU3ZAo#'$Z6M!LA=$A&9S:+qm%>4gGA!,i2F<eS
%En1t9K\AjspaF3^'F;U4m:>1'68&[L<RM2qT-PW(Vi"8rUCeJ;b;.597j6!MN3e5q)'s."&4;G=X%/g;UF/^pQSgkE]W\o7#dSFW
%)8></R[*?I*0D'aMXi(b&=uig\U_pYOr,@l_,uK0,:/D>ln^BuJ]\jC5PLE/GJ\'RY+dr_1<Cep;@EZL-5MngUbo_\>'&,T`LEVO
%7"SNOT9Tt=aA7GO@1pcZ2m51,ng[C#a$S.CJZCLLEUMN81`@LP$Ul=n0rC15\5:i#'$E%.;HOkmYqs<5H>]4(l3d"OoI"Zc</9Bk
%ATZVhp.a)QZ%GR#9Bo^ja9Bfr"ZJg)J_XUM5se,8m(js.=\9h`"Wgg/_TW]*&k,6qF%h(Iq`-":c7j7&'[05`&U.QeD<(aX$?iB'
%&2_<l5RTe]TL%om5HS)`C-hmmd4#J'iT[L6:KO^j<'_K=6Hb<!!;5\V"Jr=H%>$Sm_[OlL5pHcS[881C@h?PVEUgPo)*?5gQpHOj
%2\=:P_T3nC93<cTA_H]X+`A^6EKTB?o)KHNk=5Or`V@OW7uA/ULEQ/O)*ER_Hje3N7uTFu47To#Q=;%HcOARmL@>Y<D%/$_f*R+t
%+D-a4]FUAq'+"_)@I>;)J=09,MXZ?/Gk-ed`:Gs%KX`YfbEh@[jtWTZ1mLO)-VV?bi$]",HoId=MM\;'A&EC?qIE&)I03spktZBH
%.$t1;B#8=<qpqhT1''DJ5l*:00kLM!81J.fUYHplLH!ioA2?$h3Je9AarCTPCQ4=,3]iJ::2gj*laB49I!6+q;j]m,KU-/3nq:Yq
%6DGs6>i[j)?A.d(N`*i1RIYa7R%0F[SI]^&Y)\^$W7'gI=ssI;36Xqb1f_rF(eKVm$ii3ZUHj9hVH=[l/<_Y7CL23B:ul^N+]mCd
%<ULkNhh[EB/8&TDlP=.@7;N<"R1((A2CmVrlg_qS3Dg,9+S^>P+dQ69mfTtMX>.imOQq(OOOpa9Gp2%`r)S+JC-dDY(T_RSL^FP5
%4%3(IfSL*XK*%1X5WH4\'ibS(ZMlC2/?1Qfq2#AgY7ZZui%#Y]dtUAtOEpJj=F>GrQcNqBlABO-,[ob(?=:A_7nktJJYHVQTQpj5
%.FU(D0pdM>h#UH,`kG`>SW+\QkfbF<;'&HJ(g//=2q=S+kH<OP?[1miJg?K_!bnYZrIH4dad*O!9C`?82VR8oGVQ$d,oErk^fJ?3
%d%HL,m=M':T"($+LeFO8fVs(G+XnbFG9k%n@Gt"Lk;QsJBd,D=)/fpN&`-tfOYJ[+'l782%\o,]%(hUgj.SbP2'X/h`G#_f\]o`$
%#8c`!8EH%%'i^gkBQYLtd@`dgPfFo^KWn"o>MsOp%7-j/(CDSDHB+f%>Oaj37*&.QSA81l1/20>4b@"E-^*]er5lguW/q;5eVRs*
%(CM:Z3QqS-`*MJ(65E&.lLV6#AAlVYfK,0E%#FG(AN5Mk99(i$q?<Hg@SBL)_$'Nq4%3;0nTgPe_JTF?1kN:T6:*+l*+&0"2k6^_
%W0p&<:4l/mHFiI/EhJcTq4S(:!P/@'E)>Od8:98-1Q2cORJB/KII^B1<:N4Gs-]$iJae8hXQ@fM'-X(rmYOJ6NtSFQ#Z`D@W0m'^
%$;67#T-0(Jdo"$Fi1q\lUg=\G+BfG5:l+p84HuNFUQI]06nDe+_W<FUSS#lm%CD`0Tpuji.D=!EU:93*,/AM%jO_dq_@@ejTsRZL
%OGj8_*^uqM:GlNO+_;$7Hm#19CqjIp!ku>VMsk'q&:R^V.%/G\,>X4`cV'6R_gpV7l*_d>;Fgfk:'2[fVld32_DC@FT\l"1kOT8V
%m@ak2aQEjGKT&CE]S/:7"Hgg2S;;.K]L5&b/=U0a&035LK2-Oi3N&>bKfc[R)Ou4C'9#&O;P-JHd?\m0A3jD30cS=bF=roJPt28Q
%L"FCL'':l8MG#2uT>u%!58CW."<j;tWsfL"+Rh3C';8]>FH)Hbji#!W$*;fj!3Bd@/BEr=-R^8K$-j$>!8F*'FUe6/7;o3OA%.7C
%\AC_#a`1M8#O*?t&PeS3-9!ULDKKX"CC=F?Ia_*kk1"$9NPlfa`7PLG4:Dn;"Z:Ad,?8hVJ-7>nV5\&N#1G0_k2f/`U`+C!1[0)L
%'.$X\+jWG2#k^.35(-%MHh_ad.J8Qd3]W=YBVQ]+d+h=9,RHGhAjl`Y,aj!-<E&/G`'+dqd8MB6l<8,'!]=r62_AW%k?2h5,OuMm
%=(cU;*>+jfLuo^VjXndN>#p(jPj-,D=Q&b#8QUfZhq@8:6!!-]Y#&$t/V$TO;pBm/1N_R//paHMY>[K(kC8*7T;i3U#rl$@@=mW)
%#n507S)eHB+q,p16H9<dQB<Zf(?4i90klshT1EHY_M5-9E0)/A2M0`l6jVW1nMF`I+uU$n/](7=m(AiaMs0.l,Fo;q4P:0qfiZ3\
%:_HW%aV,^.l0(TWPrW/-!f$(D.&B_+@[3NNS]Bn>_Te32nsCX)S484K-IJ/Vp&G<NAu4!hG/-,LLbK>BDIg=%+/=-]rC23![6;ZS
%ZAPFYG5Y8&JAK-WcSf>FRY``8=Zt,2?cS=D8C0W#m)KAG+]CA3bUh4#C0S%_8>oKuLd5usFEj"3+rkWc);66U3?VNQJ4&OD,Vm=H
%A(1.K)jZ%3d8LXHE'<(_/M&"Z/0r>3Umm6ZU4H39+&aL`#d(D"CXh$:W4oF$@H&g2/kG4_PfbLjRN`rA8L)=MUmdop``Kqn-cigR
%!8e&)7H;1T$Chs>5,cXGV'uP$3\'6nLtObfo-)fUSAl`#Zts=;_g'minBj0dT7\1Q4pm0t,n15TR)F"("lq6\gkVS/<m:f4,4.Q,
%H&i/UI^gI#Z\u]6D+h3fkcH;HU6Ico/6mF!.?Kn<fE>ZO4`dr$+m>bSDTCN7aXHu\aT$pkPaqIL2'n$5<'Wfb/<rFQ;WbmH-(5B>
%62QpUPpF.!"0[XAKQ7g%p,thkEtR]L9O\f`h#q<810Q4tRPImGK\!@u-AXMIJP=dJcT,l;;H[]T@'),I`^l@)P9uO%/sa,&@NIum
%$40I.#-X9Q<W3,R8\$hgaX5(e+HC+^79l]4gdk%X?T&`Fhm)AYMMJ&o6u&5\c:5IBr$7-Ao@&lrVV[Pi.0`Q.X5hnenm3KoQp5,?
%?HdIZq7n.*Se/%A37ctT>,iQ!:1$VH?R9-5OMc@Bb90HNF:HZ0Bi54@>):-ch?;nE?LUjdJ>Sk$-<Fj$YVlK9"/_sH`Mu&$-pSZq
%pd\.3l&P6:k>bWpaEa&)q\8]CME]Mh81aGLeI;qGntF(O(_N)(>SBeY7YY/(;$;;<7(Ocnjpi&"&gUSY;b*6486k+*j?-&r:(t*V
%[YIDe-*V&FODT#1NH@>e&i)=<E=p>A(0F:\.TYfSC3E$\OVR];>`747aK.=KC8n_%FE_D>9@BEo+k1b08BmuNVdW3ZIlUW`Ql%Ap
%#r"mWTk^:M!iq=YdQCX=E_<1Ij!'N!GF@a=$n=SfT3/eF6`!3reMr\j`9of@iZXkO'a#a%;CLqn-o((ADa,!3-"UZ%/]T;\'[i;]
%b0Y<!1Fa11J`7LB*a4lRX?\N%bUVQQ&rVr5LobVXe`)K2HW.I_/:BjY9o"W(`F<t]CNIK>%?jo8j>WX>1fRBe8b..H8s5/J^kiL#
%Hh3f$R[[A)"02T:Q:qP/8sC,!eO;$q&o<VShXiMDl(fX>b5'8<$ZBH&4+Hs&H;@ch[a>Hh,D?G]_AF^WD3Xq/E-D+n"W8Xc8E3oq
%q^;pqb0rqunTY[(bFjq:'!@9\UdKAqB'#O3KOa%8'@[^Hbp1Sp5tCNt,MPhWk"cSSM)k0Z7O+[>E$D4Q+t[c?$9k3^B;P.FA<9nT
%aeL"eB-cHAP#.r;QA&3#'.qj5V<^OH1knP:8C2cZ'8>R@,SrHiDio.V!3Y=LaGAc[o-=fiS\?Vf:1t<j.Ms(XGS%F(nhW%YkI[U!
%eEHd_Rj(aU6Ak,fgjF9h'i$A/eeg:7>a@/8>Y-,<YA&G9\efe&f^VkH8_Ea5duuQgAF<%+$_59hUQo!ea/#YL:8/t0fl%WF$+L7(
%ai$fb//5YW#qtRsY5tbiYde30aTrk4R&1"r+%m?76^]&,kRnd7S2kE_,2t0cB'GaB1NN,"87j0"Gt:r`e,[J;f9$e-9_1hV,iitK
%gr-3)TLWULb8_$^UMVaRH''D!,im)`61Z:>^htf#;%$>V%)P[Pg2b8fX4*s#Mk'8jjF"-DATOH@R>Ib)85cmTQANNdZ1:Ha(U@<k
%PX(T6[#VqE3+6FAT`e:KOrd9T*CGHU5#Y<I-Be[Z]K*eJm=gr.]'guo7kVL.^*]MlC3Eoq7CKd%8J8Zj_VF6ZRBW?h@UuDcA6;OK
%dQ:C.@q2LH8LJRX4b)b<jttWRT]Wn0;G*5gZa@#Y7,H,"-EAtTCa)6DW)0pEUe!uKKRAE\;9Ckh8HrMrp4U<a_et][i_re^BqC]V
%Q%Wlu>bDkD1^i>Gi^.p:lpAG@FZsXo<[D"A_S+:l1M\tIe8UZ0-7l=Ib1)51CrOj>ABdl!@NR-6/Bf`r![fRd]MM0T_'EMRi3@CZ
%bAV^$-%%`dR1UBId]errX:j\C/[S2`Z[+,YX80+m\W%Se&ZLXcD(YCkVD:7o&f_i>XcK>E3l_Z9=I#2g5&[6^k)TF>b7ULT;I%B,
%J0C]%\.2T9:'dfc'XM8u,)iHak,Bj'J-T0)1obp>)&$W?aGEM9887Y9oHM+gd$5S1\1E"+S"g]4<%p;-`)J*#n:eh"hhk2u.O+)3
%o7?^"YH,Z\QDe$#h.DdNS&cR&ns@B,C"-Sna=Td3XV+S`aRYO@U12JDmS)"A.hFj`VJ3j]&SiVT;'EaW8A:jDOt/p9#PNgKR`Ru=
%8VYq-7liXnL7T;X@3c>!I_KO$!M3`&'msTe@RQf$2p:@#bnDESE_\Ar`5U.mHfFD):M#!4=I$u_+ZghX4`/59f][(TUTW(8,*>_s
%)*a7GhjDL*_lR/f=4.`S<sbis/SRLkck_0l&[/q3K_IeRNAr!)YcDoERG:0K/2kSsO=&Xn+C36VVBpq'WEU)g"Qii8E\7cg"/^;`
%Y+"9db1m5,PtSZB#%&%uUPM$hJo!iJdZ6O+og'Tk@TphqPF'sZ=>Apt:_L:61Qg-Th5**P'XcVnE4dsd[%SVm\HE)<2J*hjPu^6g
%.Hcp.X-3%[.<^iQkW_Pu"?!"7=<u4K\54snM`_`Xe+ODG9AQ``*<Il+mlWj-G-`=7^nQ@*&]>+=;?Lc!3Z3Pdj^'%9Z[sX:$u"X8
%CEcGF9P".89Q1!2KSl3T7LTXW/YHu(D+\W[S^9]gWedmSb2]0Z+1[eA^EL0,.LjtJY+ef@QN9o]]OccgM'uq;EZ`;VY1KMI/umHJ
%),25?-`I[f>(siLV>1#e=JSJT-a,7Yn5D0#d)Jsf.>4(7%b<:OZTsQ%:ea9_O>`IJcgV8!!_q"*bA8U.5#_o$?-X=YiN]c&eJ5Vr
%1o4k9Q&mnm'*:M]NQodpn.W4"(rOX"+<9aXk)0ke6ej5H&ooDKMW%/dMC=]ld^)*aH'tB2?W/[ZdXpW"'ria$&t/I#[O>,!b1*gg
%2),._'\mWH4:ZWbAPd*4<&`mLD"R(U?.Y=/&ib#eQPc(W!Acu31\M/%_Fm:J7Rnd7nVUT5m_l"*a@)Pcm[JID#RghJ8Zc$7]](%i
%V(,7+Ao:O@)IL:[`'U1SW7#XNJdXnc$>A+mN:`Y_Cg9'dq16EkDq&eH2QDZD(J[=j1<g6c2+o8,.5$%1>Pp@d8n)]0)>)E$7aU@c
%C,tcDD9duh$SgCK3[u6cnJ8&OEnnXV%e:&!!\9UY9elJsP>`^;%O5maApLX`(F^.=+<(_o(l?%O?-n4T)F=jF&rW!i'g'L9N($$H
%!!oF&KrhahCA'a!OfCB7"t-qJ/T.?+S#l#e#JIs9\6=9RC]!pPEdEj,O/3M.IN$!2h*18fHL\jJHnBTLf:0Rp]>MJGoNqQ:E:Lg,
%W&$ES)pe-LGVJL`0CL_=+2!:\<uRE4gQqNdp5IV3")lNH[qkInf7W[6h6l`uK.f3u\6p(23r%Nbo.JYbI:uhJDn"7[]s=GT=g'^,
%)giCgV6BB6LnAhX:\2K?n>'aU[;B%$+7,>4'Rb$s"N1m;^o(h_0t_q4_/2(,n+5Do'V@#h)m+RenY.m'Xj`WM?E;s%2X&"*G3(r-
%1Z6rq`SbE^jnfK.%/b]9dGUtNq@>^a@J;qWV?IZ3X5!GhF:)MI2c1S!_U8eFV-8ppNK5#u0CO*ST8k&Ck8O^^q!#rt$4$L-3^)6t
%E,mYrF[mh/02qL3a$"R].HoTo`8iXPT=HC1UoDehk)%2cUO-7Y?oElk8$,s""+bR43S/f,W/fEHml2E_+86Z#_o_,PnT6JKI6+Yc
%]AN[B%7,LW$Ug7NJZ_kCc)6\[L1BYu^B4O;q6TeO'V*da"9hua6#(AnHdV_dea%@=L98qbDYs#,?toO>nm#C_TT86Jj@Q60`s[Hf
%e)+=;X%bB])G3q+\Al)C]?_%`6t(lt_f6s:&h"?thj;R/@OrWPRX*u)lDS)RNFo'rqTBjU\?O9X?`e>F\FHeM0Ph31q%CMr7"*_T
%GG(`.PO:DC[EL1s`KA#CTS0.sUJ[\W6Jki%A&F_cE7#-h%B,W)qREl<=KurdEF5nhGM)2&6$'`e\GWGcDk2DRGpH-B/9jY7fnRoD
%)fb'#Ki]'Dgq%_2pVJg>__rLi:rr-c^^,pUp>KeU\4sC8C:J&*VJcYc-Z(,@C,X>\1+^n[/DG3\XRpK#;Qq"5M\iH39Xb]<h6pa]
%_!#XNN!&\$"0;W5&P&)$SD$\!F"i*pK$0273hG@nJJ1'VDSY6gS]iB1jl-HJLE,)WS!#r[2fVd*l"6OO=WS^C6W65A+trX&YN]W4
%iEJLiB\[pg%t.,+Du*UEJC+OtF5R40!T;hh5n&Ks1WVm:EC'o3#qtp"6S8k4Y_f5QA4:\&6nT=+(ab-73(fo%C;r_Z``?or:@(=;
%@V@J+ifFrN,]O_]U#8g9oN,M;)o,&#7'8HlY8S+R8fP(6:mt?3:mob7CDSY"JEG>o`>6E)`LSG!]b_Ar;1.5tOf)MDTsn:*41%O-
%!_>Y.a+rXTHk$l.esQ.7U!b310iee3?]&Vd04"WP\UZ=`_POnWQiRtl@1%u_P\oUdL-<>Y%JU-*!o,_e'[REq+mk$P@T"e:OU5M$
%2P6UJ]Kc[+%&4Zd<pDpm0X@"*S*SuNV$+e#L676W"WHkn(T>.NR\3Ai^fX"C!917fBJ-kM:-_6E%B.CG@KDI>aU*Y5RfKB!($l>m
%&=Wgn!t$>0-@Z+k(-;WpKlZ^88B(lJ?Bd\h+"/1g\.N<S(P<)V25p!U-W\FpAl'mJ+GqP(,Dpjd>g,m+<0UK!G2'g&KXhIZN]`Mn
%pn).8h/$]JlsjCQ"1k*tP/[(5&ucLV5Rue`37?,Bg(E7nY/iDM.UhI<iN%Fhq1ucVSI%H5(>VjF&clp:V&p/MGX77[q=R0[Uf!7!
%DcFKqW?MY,$.TX,V;_e1JT;rf(4f0u^^teS<hfsIUIJ(#=;6]\q10.]AVa-H(^`idZ6U#=gI.H=6B=^D(aNB\7Hl_DA\gB7X4^<%
%ZAs;5-WTQ$>h".8MS_MIVWSCD.4W%[/f3`H,Dp56]EipT7X2_3MNWdIQpQacU'+^$O1m#O;_<RfU,Z)jSl5d_TLJB"k.Cit)aFbT
%AdY7ZDFVF3K;RPuRVpRT7V2ZF$t'=b1^/FEVbnA060aY=EBs(sJ0KV(_b*4,_$h'jPN/)e(Z_&[X&TUrCe^'>1!,PCaUjs&LI&3j
%-.rlmm%AS+0O,RX#KdL.j@0J33$tU:OPFe@6F5H$@(N]"LkXpZJc32+3@pC8^]n`m+34nQ+-DX*\CudNLIneH$%aiSfb'D6n47_Q
%NeanB*PNdZ@ZhZ2aUAu=!;)D^N^/HK<72s98`9sn@A/&kl&a=kXU%l!8/A]X")K)S;t,7qq*:J_EI&`%]1_dSFD;A01/0MEqCmD(
%MA%2A0o`"t;%_3<:G`07VNIc`3oQ4q8DpJ>#4b1h6jZ;=7#=?(7$6b%;\YUm@XYI+=ZJVr;/B)L;-ZuZUX]mML]Ufa7O]TgNCtg[
%E8Y2c)3q'IK%UBLqM8i8`FT$/O@#=V$AVZkEfkmqa3.O48gI"[MHH5T/Z,7!7?O<7:1dE=.DBXr*)Ts<"Mufu#R/lOdHUsp,#MfH
%&lDP(R\E=rBlJV@6u5MV]],Jnc7+[P'i-?o<W]CVRV!19O]Gqn,c[YDBkeqE$><3ro.m_JG?]PW>&gse\e\\=m#7YA=p_SLBdM>&
%U(pS:Tg`"rRp*pk;I[gA0U.6RhJ)fu+o-1GUfkk"BuS[rTTr>(;,NuT;UT:?S]7KbnW;kGUIjogfhi_l;\EFj\u_#l`LaV9.&'m"
%9#l!['fsHQrM?X[orpkF"+Y$Y[_XjPl4l8tOP7fW-#,k1'r_YAM=&b/a-t#rVK'Ea5b"!=8$Yi](9%O4D:Tas:5`@7#+h4pG=52^
%>V@AJ#$d*HQDJEF&@`-f(#g@a&e0X)i/G_0D$iAS-Tb;:6J2PH$^@_ggsJ5Qb>(WW?PU\cjEFCJHDOfV:)s]/3@::<$FEo;$n7H0
%PZ0/iZ3')efg_sKN.1>Rg66a3YsZs=<i)oANmPLCU@3R'CK"D9j'THf1F9.Oa\:*%N4:IoFcg:b9p]7bpbN*KFllC5GG[>7`L\MF
%W1^:DiNK<,f%">?DUm6K5qLU8A4`u'U!)$=A5VAcr6Nte:g(ZX&lf\aIq9kh-)i;,ASFmUBMhl\ZXm=QBQi?N;(pFGVWFII@\p8%
%HI8Ni9r]YJRr#D#f"YHf.S1i>A7YX,@_XUb@-8-p\E*%`M2$8Q)hY#JoX-!0D''(A@f+6aV<a#A$HeO=`RIo7Q_Z=kb>tJqTJOqJ
%RF9Ao23A)L8S^RoASR]Q2/+tt,)_:7+l-U:H\nl$Bj5<&:7AVSI,$DT=\7(#P-C%tggL!Q6kQl@;Eu`aHW!5`ZHoCbHf2N@.$5u&
%H.+#3Q5'&,0V&:(9e!/m:\e*tr"0<Fq%k*&_@rRal$=A!>+0o;J$No>YK_N:)b'(1ku7G.MB7)R9M$933.(`KH\d?I8:?4",LUKU
%]gquB5,#rK]LgPHV#3jMPQ,:Df0oXaN(i2SP27S_%qBJ*2t9g_jH5U3.Ip.]H.i*@:M?$nm5)Mc/M;I:2:K(2_^LKJ=tG'H<B?&A
%FNF89c:=-od35tN<n4^n-u-n2n>>,6m/=(%3sD1OYXk[%Ve;!ZVAMBH=fO+-WZ40]Q+^q2#c^OH_*CFd;\;MW73iUrGL/hl:Q<I@
%a"^Rm6rdO`W!26H6_@L2,-*'d_.7XF;"7QX@6l!W[On5TIQ>[\-Cl2l74YheA`XaZ7p%4S$@3R[=(@,g2CY)0;Z,%<po"^(5R>q+
%%-h()ej0M7`,&UO0_h,TdqaPT%dF`Ff:_c4c"7VLO+F;Z3dSRSn]3n+]3*"7,Y\Oj=ZXNtF%NrV>Z%;l<B3.;_biJnjGuPnMm4[e
%.]Fgj;.RI9WZG%a0-##\Z/snq-ZTj1U.A@hEjnZ-VfY#Ca2d`seR'1M:/r"=W=4-Q%S9$\E!T(FRNm\?MKC_6[-:!HKuoHt/eS2j
%$hBR_daVdj,)WNndV!(SZdEmZm$8,ojmn[s=%5B\(b$0?%]CK/`Zf,K]lKR>Y419_5/"h^-bY"`:U#)+pCLN8.E3K'iGU93^qq?L
%r07H4Km/a%io1-i\Rd5fUOa3$QGle!n@KI=:%<fND9[8T($`YM=SR@RT5`a</dNfT,3"<[3Lkqd#Kg7Vpok.Pp2"9dAfIup'?$9]
%9KYJe/ChUlQ)#GdnNtSWA^!u:_T!r"HcA"Vc+M_AhJ=ud[[B)/baUE&2T0(\B&7>[Dml&mgWZ.(k05gUAt+(Pc+M_AhJ=ud[[B&r
%q:_&K\!]20baWJ3c'^A+C?OH(ob/"h9P<8,k2/jFi(W=l#`fpM&@G1O.P_Z-cc%?=EF_7nUcY!.,I2>l)\cU<VF*q37=L7e)QCs-
%+hsPOYh6s)aqPmXTN.V+BBcD%Qq@OQ18W.KSVU8"5gV&\X[=S+7HA-\>b38ONqDF%e?+7;'j#\Q/@*Kq?]XS1p?a#t6H\se3t4?#
%m,)kUWNo+/7AF/bq9X.t$=@/7iZ^,n;T(e1g]M4]76"g_UPNO#.W,hr`fQ-TYYJr6(kdc1Ygtnrqb'P$"[/HM7hWs.%a>4a/K/\X
%)W`A51_h*o]O<l$8G@,V1YG<bVV5TbC!QK:2"-4@W(E5oBKAd8.X=L@i`?n`oeTgL4X]jDZq&*OXK8G.ZaJ)C]/>ecV6H1a@]2>;
%X.7!`S\q::EG9]','V5$_M_@05oCX'j(XR<`/njc'GeNlD,>XsQ]Dm,m?o$>p9L1jk%R=8(JN51YHARAnV-Eed#J/:T@;F-hk<K0
%,0L[)*\[=`+3C>>s!u+#)#IdFPj+oF5qDfBXS<8W2J;.r*LE;.VKSj7ZDPqKKpu"?/H;%E;Z",uH3%>5pR3[]`R?q>5?fb':V"W_
%4EYLLnL=o889J;.P5;QnfqC9<D6s8N/T*t7oBaM#lV[BW,UFD8dWV6m>qRQMMfRM]X_4J2();=(B$o0^d,HG.?"#bj-1B.7nceVT
%lhTVejL=osYAK3P(:PlEM&&<2"*nSr);)2DPH:!=2OfIaPt<m!9;]#:^j;(6N+A>V7L"1$P?_WE$ZEbFR4NEC7<\7@$S'n)j=%&[
%AXTI_MC<*[@[aQX@Q$[)dM*SBS?iVbXGB@N+p&X?m,aJ,N$>]DM.iWB+o3Bp-mOG&M@FT$ZQV)TAcAk`ZC?9-k8UD5?CB'-WVg%i
%[4?9?an+brr7k+[j;+/n,6(^*h9'P<R:TU`f*8mK]#pu%1Z;6"#q%NA<>Ji%s&N[P()aCXqS`gt2ce+Zead-;Lk/8FG*B-L7Y^TW
%2:Q`IOCRS8"j4jY.3k;i]@1<UZV3KIDF3ldVL1sH?C>@I[?Z);'ePfOMXLKsI,ef&?Ig[M]#qDJ1Tb`;Q.d.qEC?%(]$*VTWlmou
%V.\"\T?UgUWjC?O`CS@%FWPmlaZc3;DJ5&J($(,&@-]i?U:<!^m<W)cOkF(%[]B=LBMm)qfCRe*9Qr57VR##N)=K'@*Tksqm^naK
%_V6OF?I+6WB>\LFnKKL?04i/hg%"/Dq<;/[ElPb:6&Xu$Bhjpr&iF9Y$8AD@HS`&ZMHs)Lb+^Y,TuD&DmC_H)/O?p4Ma9d4Is$T_
%'X4Rb\5oRoGBJHPMf56L"YCL[pp1Zln("B08ZNu6f0MB2'u[bM&CkP>Z;MHp:50)Sik)oO6BnEh>srsT6r;$N.Fq!s2N1iiV,W[W
%?;2kCBZ`'-\SO998'g-CXe7)GU6o7[0t!aM@U6tFlAF7p(=T<9r7Q3/Ud\%^^o1Fp;7.l@0;Y&1p8X-<RWIJR7TF7<o3A3EG0H9;
%)!^`#&5f+>fdLZ:[!&lW7sg0E,iqoE0j[mK#5Xi<oZ*66>Pf:2]bX6Qk#Ypsm@lLWq[I&e#]7WSi#iGVh_ak^!RtgB$omle3r*a)
%CP@d_"q@Wl)@b.LYbh;V(G<DsjG)Y+p'(p]cO\s>n$o6OotnLcb`E`o)=6?#-T!CLZpQP'Yc^QfJ=?o(X6FEUqHPV0rgCR#n.m8<
%_5+no]au(dfFUmWM;03r*#N;OE<Df-GN\!)i2;&+MB2`g%$fk&Y*$#LcT+V+nHgFN\t:rKd(lQ=O9I4bL&n#\YU>f6-TB/5)dV(P
%r7\4.rS#0VYO1oSf>VNK+\"I0F#k.AhQT?O5`=R_Cfka>^cicj0*7RlXJnP8H<:hRKe?[DW,.cOQ7?-"cb$96/G0,JZg+B%;Rgc0
%lr9su1+gW@!2p<dT!_P38q$WIG,L35;Z0;N9=6aEP\CKIQEJ-2qlj1Q.NO=c)(N3/,N1tJd>:CCA=9l:81(pCZKI.!G5a)b:o13?
%PkpjVjY`eY@$u3+d,JK%C<iidSkRGpG<'(oSOsMJ4?Cu7ckXnM-k(d.PjlhKnEHb<;IVVm=IgXB/lAI]'36EB$WlT5Q)(EFMj<Hi
%^2-Q&-#,qB7k,$_Bf4<r;RB6&nAK,UjZ5f/&Xc<`NC\OiETlIQh]t:m4W='F0V3%)Cq6qXD60FJWZek$i!hOVY=Z8YQ:OW7>A?\f
%2(c(1%Vgbte<ON)(/(O$;qb'k>`aos,u%/!M\k;9-5s1F.of5Dcnj>h@]&MQ>I$E2`='hbVm`JL>^BZ'P38f);bI$cBQ;VR=&l-b
%e[YjJL%6,Y;bP6WpfYb+C6>IN.!!UGF3J:gafD0,'bPAAF3i/C?^;LGbneP/?S9@rZIn8enH,ho4POYFgBq-^=LZqA"-j8$39SH)
%Q@Et6g'W`b;0P]u*"]5-?.s&<D6`A,Y.KrLDgC_%YJ-k+[hg]R27P)\?=WQpL9u7M+CDFuA!d#W12C1XX)l:lbZ7M3\a#=Hd8/r+
%Hckg''$So^f4FY:(XgO#771XmbDc/We:&%LSe=J[IOWPoU*#NOIA4:U22[3t5`>V3(U'ip#j>nPS("*$m4%GVhue\fR0f+K_OuZL
%bq;ku!ORba)\Su.8=N#0\8DB4%OhkOMV$Fp/0ZS%<=d'KRdumc:YTS_?W/boWeOP/JEgR+V9>pXH#4"oY2T%2]Y^PYJjHPJOK05Z
%3X/d0+BFV[@_o9%eh_P[<O8IO2;$%dD9<S'C8[5R<pGK]nU_N7.`-"5`(-X:cBLRId%WYr(REc.BX.JU5IIGTkb"u)W>8.@>snKF
%j^6."CB2q&Qb5g0ckQ?5$k&*;[1lfIK?cF5"S2$hVd"l4pX@h^B,.u.m"SG`iJKG^3`J%1Qg)Gd]"2^Qda\N!)^b2SF*/3J7'\8N
%:m&4NI3`)_jfESlF/W3PK7RJ6OkO5ses@i;!':A2Ef$^Fs0@cJ=[e1U!na4FJN^7oQ'2$5XN_)T40p,i,qI0e6Co)@.8_:hh3LT<
%n[boe1-JF<eJ6dF"]ePs9+%Rn.hc3BR8Pb%Yt.bFP:RJAc7YB`>V&I`>\s?^T-9_iS4ddWoIHD9*%iOGH"=b6<322*^fX7NOssN<
%jiYJ;Mo7/ZC:`tpFG5M)#T_+(BbQk7@'d0uFE*o23EaPf3<`@'hmEpJ.=%">]e/2<?Q1Wf8b:`=T',7C97+efWm=jc*D6!N'ob#J
%l[ZjR_O8&]IE]R&nY.3t+;+L]aPC*?0,NKe,uT)Ao3Pb5S;!Mh*7:(7C/b1p_M]H6(_PkCDrpD8;l)83WCKe8:2[MqLJD@qnP0&j
%-)RBUDQ.Hb+pZ1@m7:=>nGie-qoVEo4'Z7:.a4VIl""$5^SGAYh8I"U8TRTXQ`Nk,;sT&d%!ud0!DkCK9?@taSHCBa0A6J.D$!@d
%%E160Z*qoLg>Yo(-ipq5,rX?-!-CeYOPoB_=D\/Y953d]V6o@'[#s&p09hB0`MRp$@4a(5"eP.<-+:899M[<AX0*5@a&GrgNi+cj
%@?mP1(+L"%S\[uSSnSo_'$<M;'E_)m/sHE<#q?X@8p-f+A7VA:+;ME'jAEd$M19rS`OV^m>2[^4q[-2-ncWZ9Ieb#j20ST>7!^$#
%$UO2rq:&;qVc&0a!rRt4mho:(BaoKRi3quXTVheEqIJQe[3b\AnUQ$7r%(hocM40_oR#54NIIO)r2-p"C[ge9_tbf!N<[Ct)__6&
%G[Z1/BZ4A)q#S7dLSM=tmOoEp`hUPShi(#0DL)'=ie8C;[#A9IAfH3_H&\$P;s(6"_tZ?io2).WPUF21g4E7O['69'm)3BR-.h`T
%1S>Ej4)f1-JQj%[Hf3nd6<94fJG?P]41)*/bLW1Yc#hO;lr6EW.fhcFGi>&U3t,+,koVp9VSO)CTARo)4_X-?L$S$6E<EqgI.Zp+
%5prSj[+cXG#Q<6C_idYO)jgRgl1O#p%Wl[B4d_3"d?V^/W#,u!Xm%n6j)2%VbkkAWC0\LYqPh&^s2H-UF1QT6-MaJgNU-JgB`G#9
%l$]Tk&[dYjma:QL:-BjtWWkVJ'sF_s3.H'4j5V')LjH*'-G&pulCB!*hO)JPl?6pXK9]I@bi%DrhB'^i8\Y@UN!FhcLZsn4c*MkC
%4K8EeWV3?bX@%F-+P22?HbD`?:]l@]$C59%>W866SdZ,V]tE7JQXbX9>)Ea=prWS?%a$II9mUrL]WAUmE3/0*oHu#IgZ-l^]FO,O
%/$Ed?JL7rJXFo(Pc\D7f'-PR]F)\/YWdsCGp;c!/H_/=/!$"kLVqk[]JLf9Ra_^**?nR%=\Z!ZC/n5f'`tsfS8qq#/0H%<?0ORY:
%]BpO%7_atpd9h*`fBpoE-"T';eH%EAdi''UdsTdd%u)rL.B9Oq^*J>pe%qtEXuBY#:bP@N>i(%tBn"^E\M`L"&=cHNjd`G%[l*9u
%$&%nearLsrT\9'g)K\JRA$-H3<?$!:(ub`<F#?('>?bu\bAD+,XXuI8`n$I1g2^U!39SJNWs-f2fQ)!254@k\[lT/Vc:)\ia#XIV
%:-B`F\%T\RT3Mig5k*C0%7]AQR_S="YWoP&9YL;&i&^'rk"2RK1uVK7"l*rh7\ak%+4#^[^%LM+jOU<J4ut2Ncg&;BLQ?X[aN3[A
%O1".WK>YT(5$fo^2L)Ah-J14sQM42j`b`B_TJm_Eq!31=h,9Cl+*r'WK;.5&BWaf7_.YSdCpim5G,lZLV<V9Nn4@#H:@n2>ah2o*
%M=+TsW'PD'oq^1X2ZGr]o^dMPY\%fV)1_D=9*Y@B\90.nMH`!ghuKM[?H[?\^D]Z=h[43j[h]\DD?67"#35=/^gB^SfGer0j+m:i
%>h?\p2tk3iI44`BNDt4=$_FaBTkF":r2X</lV2,`B(MNEb->h(TS=NZcE8l==D:d2<C=.,S*'c#_;MCR%.hK="G=893q9gCN;)-8
%q<iM9P+P%WYJ!VG%D1Z\PC-VJ?oCV8p:B:t<d1^#\.t$nB`t'IdsDj"ZH<2rPRigq`8jC&47suTq&GGKg5Bg6cSitE&fgLjAbdU(
%5qa;Aq>Y3JLXnZ.kMNOXA&k];Ja;aCXi2%#G92sY>@WdSm^=pN6^k=?C2M5eP*OS^p0)T*jr7m"eJO[5M94<lZ87<;Q"n!biT]m*
%2`RhRmaf_n3F?T=bIlDjH(Cl+J9=ohCmim>UPGFnI+VU1a4?bn*RonSCsMtXbj/h@3PdX6$hbPmN3>ZQCHpG:.#aWNf5"nADrB@K
%)C)UpgV7]Es4Yc"9bBK,^-TTJ4<pE4l7Pk7n[aC'Mp0k)XHA,RA@4.dZOS[)+*2a+,8QI_\,-'9\"EEcG!1>uln,8i0<,V]3BMVp
%\#`]cUtsF4YLUooo)AD]lZ=@?c:JD4WtFsY#YW3OaO6G91eWVI!N*aq8t;umef8\s7;WL+g?-JTcb,\-.X>9NMh)s%@M8"OheJ.i
%]$HBtCFqJc^Q0:nONj3d21YMXZ[U_BgL8@.Yet@^="e]r\%2T_k=L.dc;S@K(Tt/$V5OS8#Pd%IFo65aDiOSNiG`a6LU*l4Wo.R`
%rb?k[0eC,g`iWZDk/T>\2Had^&;*"J`*d^AoXb"6<F`!p]@C[])Uukgf;bt\W*rFZl>ih,SPFCaI:!5ZU?\bOWhJkETZMuh6pN;Y
%Y?ZQW5kYH]3oee/:JN5EZ?Jp&BpDb7=g\%]P?M8+p8*(S%Q7qR$+?6MCLNmDcVl/_*FLeEIBh$b=XX5c/]q8o\UL,*;<hsr[XkD+
%gYWFpbZpAnF)+]Bc\CVWe5._U,T#QL,BYme(SuPOE`)*%Zctqlk+_bedUnu,Z=^PjOp%$@R>Xt$,He_Y4\rU:Fb&-ZNI'&p;/2*0
%]$HE.RZ#TX:UqlrJD$/is#Hi2S![,QCFmfI2-)`'S%X)RXUME#88R.C)k/Vp?aLWMm(p6d^G*7n-DgZ?hL&oGd3d#>3Zc%1g$.\4
%D3"RkGPtYn@m/R!1L%S:(;ApJq-"4AD#)eNYAO*h7e!hJ&C,+B[B7$Kc>5(&,2I:I/QY"Q=5,3?>@hZpe[A`M]Po_k,4oINna1Hd
%8IZA]C.NNC!eB$>FS9G0Dl6GA'Ps\pFrHWZ`\eZPN<DELqFRe/5-=7Q1brGKHelI.hHmDYiQZ"A%Cd%$rp_(Ug-kp!bYJFaQiD!X
%jt5D<-U6tkkPt$`.BVnmDiN4L>IeEi<s>$qB1J<U`\d]@.-GP:QdI7"LU%nqm:Iash[F(aG-Tj0V$aO!:+31%j:1^XAMd'srYl;k
%hh5M7]EoAm?Y3H^l7A%'m.dl(WmUY=Tu);pcs9@pDQP!!hj>\gHJn]?e+hO?37`NKT/h5)p1qh6UAQeMO&iUH@rQHL(kLrJGVY=U
%I3Lm[,pPr+F;r=*C3[YQbtFbX#6QKYbj_b9_n;@7#mP%U@@/uS,oFi@WrFqaW5F&@X`?di1\%ISOcHgarO%uOX^QF$I$0QVM#**r
%O^Den`H*1J2_bk``j+@&o\6P@gW"`X=T%nLDooJJs/mm,h8XrRn_\3]pZ'cio,%G_rYWX5rk"0irWCk!7Y!)NAkc!?)tR?6=4!Bt
%[^IpJD9R2Co0'F[?'hqlCMni4WkBl+qiLPuK>3_)f'=@tO.jEc)`QWT!T!AW/$k=PfLOc8_oX<&#(=k)qfQ#YbT/4_)JZMIam]l6
%gq$HfY.j&2Dqu_ATTaFBP\NR-hH,MM4_,Mk+l!!<n('k7ooO#RAAqBqct'V'Z8HcgZ+Y2LBUIu]S"M(i2aMV0Ns7Q#G6bg/Huk[!
%D@VE'rnP$Wepk,c/U(rS1\2Z8X6FQNlE3ga#\q0)qHru-17n7;I&4A"CTc;aPBP'BI>CR;V7A$()]B4j\)'Z]#A/(L4Y'b"_cf,D
%7]1MNV"O58XW1GMWY:IQs#pT<W0Tqlp6LsE=@974hO_Pp3IAs#nZm;MC`P05a33'(Z?<fr*A:X;b>LocDAIE.#VQV^?abu]27>cZ
%NgI(3?<5)^cVL.Yg,P2fKu(+C*i(UFn8%KT3,^<^ceWIP?ef5"9$XfsRn_DcjC#UQ`*248Y5MrGFiIkG2k)dF^O/mCZ#9O%ijmlZ
%U=UFS[CUGXm9APZ`_:Y.*7k:IFVg)$@4.rKHtr'1iYa?+X__6"c#%Z43aXs&SRGd4].\#F?Wn247ebd++1F:`^U?@)o5E<Xk^9MT
%YHbRfG#eOqW!"'SS@uoQ7<WGD;CPUL'ku3L@34S__=731:QMpH?A$/5;*N"Q0[)U9=n8H7q8WWu^X38\R*e'h`k]0FbSL\?CsJ\i
%/[S6VcqN3([%'IDo6QflWoC$(T'=`*kHAd$<Z7F*[jkbmlZp+]mmgL+.tM`]FDDFq*W:29l>Jg.l51]e[XO1CYQVV@+(Kq>RZ7&O
%"R!R];$ViX+(K.>h+aC1><g-YO0NRIZh7gEr>6L5a$<jSgo?XTZaH%D6_*skfP6IO]q5Mb3r.HVhbqCkk#VU^q_MmVX9OJ!^8fH2
%f;;%*Ck$Kr(b"p&XgQW(j])=mm+0gkkFa]TZXNjr,k&5.=DCe-<s;fXYWqQ9g[grI-$KUFHeRl;)RiW3Fe2dk*M/N]ghnsU_SkL+
%ZHl>f??nLMSCF5iWjXBJcJ^ZK`bpbXbo%&Wk^A*66*]5sBk'%oWhU8FpI_H;XLqW_lC:(Off&%e3I[PpL'Nn`OO.T#"`%hGlY`P:
%2a(:L953A=.UBGp>NE27Ph'hgS?IUL>2X3l_H.m#hTT1C^NF+k>LHRn&mY$mY<!ermt@n71::rI_?gLp3V(/@aN)t!=1kg2`IFm@
%I[0coL>-bA=N&dZgKJZ&CMmq4XU@*-C!G1io36!JCX$^u\SZZF^VcYDYtr:Bg2f-Eg7!(eF)Gd=D9]Vn3O^m/VX5K"I$o&`^tB]K
%m_rS\3?#?kbic)[[hcF-Nd2,9\U$N2DgUobrN\g#4(5`E_s362RLA=<jCdC/IU@s!rg;Gg,rT^LM%p)9I[JaMfcXc^cKH;d%f?^X
%2\(/9p:He'4uG<:[CbH02er-t8)k,n3aQPuDcLm\o7s,#AffKUB2b[)L4m$uZ`*:WS4BRM0DBL)bW'GJ<u]Q,U<35jD<LomnsF1c
%gT=Y:5cOIW#jnhU>0GZIiWm;D(3+U?\EOr5"^d6d'>G`[%/TTHlud-VkrVoL?&bq^d:@LSC?K_rZ<Vfn^jZn5[==flA)pPd?edg-
%)kD42[N<S<n?&R7=KB%h<b^/n-a!Dk:F<L/JZ@k4i#r]>Jj"CnPkpVf8_Q;.(L=cK,s+Fei1U_P)l_)QGJ.Xi)6C5XE2I"+h&,OP
%c@1-Ro&ei-K77-"h4D;kNNEN?fe]!/ZaXb9U9.>c"dPga:A!4$Z7kA07Opo?r8%-*Qa,:-jYcejIrQcJlg4W'TrB3Vhp'mU7ir/@
%ZmtXH"2hd]IL-3kXVK-*oBMQJ0\:Xkl7h+>/*+D,/\e^-+*[\F@VaU:+.qW%IU$?WjC>AThJ78sRZLb4\Ah3f.id.CL34;mF_GLF
%Kk#Np[J"Y2N#(n`2Qf9hrG-!)-@1c_5;p$S9$`i4ns_EV?aLUg8J1-)&"iIdX5Zd]90'11k)J,_BY2SA.Grm>M,lE#-S9#7`XWY$
%_8FNP+\L:I3jTf03ik]*ZJm5#q6_#BGN%u;Js<X%[d8<miM/h_D8"W@q9k;KlP:RLIRW$AkKq6;Og.hPdp)]D13Us\/fA$AbHqn$
%*reUn@95Jd2gCOC1[$^ZP12B4=E<gBlnFZSU\+2:D,#F2![Sd>2J^VObW<MW]oi/u5#=+;'5lMTg3A>J4:,&a[?l[E0^B3Mkl4bo
%&K\CklAY.#GUKU_NVEYXr4K30YuH(hga&B]gJ9_jNLV@?g[uLTj1LT/h(>%sR`s"IcckC6-AR\>K1hf.%U8nZ@@^b'=@8NARoZlh
%9%o]bJnuGLX.VEnVU]G0>LuBqkYTE+eE^s'S<'MuD2RGA8[81[4ZMJ_+C0lmRDt_.^S?5dM9`YVlHN+WrZ8F5HOT:to5T6/mH[h+
%?MNcLXp'2iY;_%4O6JT7TL2RhE0*$<iFI&cGgu#fNq-W=nZW+D>^!Bg=-H[gf0*RL.&oHO%!pMEDW>iOgW4]CnT@\d)NGp6pKHTe
%W->'=4hb1NL25ddoD4`lY37T*=mk_pJ:.n-#\!hO(!7kDTjYl:8:RB3Zb=n/W-;7Z+8>GSj&mH1WZt:-iAem[@-h'jA"!EbY\P,"
%BE;=PL^Y^R*0i&Iq&p1B)K^9I[m2#9"+&<9r7.]`aFu8(lh)SPh0s.02h&kq]tn&h`;To/0Xh*ir'"2iYEKNfoK1%\Kj@H6>MXa\
%X(5\j+Z.e>SSQcbm>kK=G=uh3>GH(?J(1.KR<6L@lJG"DYh+I-Re+`a?(HH,@bRZ@dr)o_VrDTpHO>#Z0nno'`:2m?[V<F`*TOQp
%g>WR^%X`R,TD'<hkP=W'KhiArMgKid_-a,B>k$\(a%V&^h/P(a;@jo%HTVF+3-`K]WlnK]mD8QhhAu[3l-NG5-jC^MHZJY.Z"pjE
%BNRO;7d*rD#R>op"h%-I*P,S8fm$9CZ;')_]Z/,#mT$6:00eC(qf)0C-\L1K$SFSW]_]ldF=tGl-cku>Z\)OO^>+5N]rZ@3H+V'J
%$N?W?8#O&O#Q@?ggrB"7H)l^e!803]fC8Uqlk:Y)IQe[8:Ik@.1kpch#fI:;Lb>P"C#8<;*`lTmP!bRD\i_"[[BSF5MuUCCTq;<u
%2]<trQBBjCSJqQ80%7d;(DJtf4e.+J#.QFSWaV5qbDi:plsb`B1N.RH`BC_Bag>8GOjl]`ON+FB<03?$oOLW-PX\24/+Yj;(_SQW
%(4u+fjr;So(*B+]i8!l4$]]MH=YS1k'[JP%DP:_<_&&MWeRSM[\LZi$T]A5,jesT#7Un2kGOrT@H!JicY35mf6n[^0c:Q4k3M\<'
%(hHa+lkD[4A?g+?j*=S/<0'ga.j"4jSZOLc;b,-5P@"!:d(!TPR\!s1o7Os.\7DDJm>k&h0W2?gM5H-P293!p@:O/.c++NHW66<a
%r<J##B4@i"X$-]9W#>aU1bM!3jj!OFs)CR,,V(cXbeD-hk#s'?YU[r*p].57ASEk"ol[i+%(YJ>06]aSbf'XHp^$>Kit?B4=&qs2
%rg#0#,@*iP*ZnJ4Li$DEf_oDYLg(f3T2eZmqm!:D?h9.sqL"t;rWggPp9JJ/Ao=&\5Se>N\E:0+Ckn=5Pq:+&J5fj`4pmur_ob2[
%X*qej!;A>McJ'$!$t#76BKtV=H3egp!u.FMl8(*Ff>%")R$VHYYE(LM5KRiQU.P52=S_#\`sOgS*"7QLZhBm"e7c;Ea,A/"bL4U>
%@@!%Tk4*^uRVde`QS%#oY&E8K[#S_L^jLq*p=[A=%AiAhU?IYVp@;WrDBqGpom,f%/^/aoDLZTO'dqN@-\M.qIlrlkU/F'UX"C+)
%WeY]\@CMkiAm>+/Di((>T:@0Zdr)>6E[*q`+"o.9qIAVc`=9SHT/dmM>N>Y+'9ILAri#BkRNE"1U9C<!<kgFMl2GUTqTO9TEj@58
%a^EcILEh3;l1bW?o]c`dHM47^Wl-GW^QP?RUYN]ujg^:j"lHII4jASYJCGp@"_=qS?<cBr<>h^ebWbtBkZ1\gle/^tSro2NqO]J9
%k(p<b3&kbG,+fW]g;RX'VA*3H;B9t0'q<17H_5(@H_Kn251moImok*H#Hj+b1#EIH(IMRI!H[diBpl+oB.,b5l,XmQHc)"YGgPc#
%Uk6b&59:75=&ou1>@"tbPBHZPZh1ldkJM;=iV$s+88sjDm^.`;C,4k"+a8Ch*K;CkA$:#I3F5o2^#dY6d<-6DQ=2#IZ#(k-*;%nZ
%Snk)7cghLb-]ILTL*&D=`O!e81P-?]o=b+$dlN2$Dbc-X^Y.q6/)n</^3sB<S]7ErDqnoA^)P#Dgu,@h9FmnSJ\-XP#klZ0:nQk(
%SmZ]3f!r+@bui_^&\l"fr]V>tgY>:=gUnSOA[Bd5Epm>mVU0F?*dd-%Gl>\[AaoQQs,ugEp1=0UoUil;Vu/^5q<C2Vs*'t'9_%)B
%Z_.25`+X_6gb:lU5R]ZUM15$O0^p%qjgee:[Xf&TPdt@qm"2Mb?e_!X4u;Zu>0ad"47iH.)#b<]cYb+8`Ip<TgBm'@',0dU:H\=+
%2)'Md_>+jCpM[Y1Zemo+m1m(U>^sYT:U[@fVV+u/_3ErF[^'6Kf4uI?U[NMgf02l"hf\Dr]]%Lq$SY"tR%cc<9AfJ-*dVM81(!a&
%UXWHXF)+X\#XJnsK_sH\UkKZ1IRdUsZ$\^T?E9ERa#SdWG>Q'3QX;n,q^E'WK_4"6_SF@p+b%TN/md1GA$`?$Kt'AO<%]9pbXZVW
%gV=')Y2_TEjVen&kN+)K"3K?s*n^AaY!i_-W("l/#P.BjHR:$gqjrEa=PSXaFn^4rJ;Cs!MApakgN-)UDXfjD6C;pj`sMm7cG7Wd
%::Nb1aMpp2&=n@J743a*g'q?S4WPI;D&-5lHlM:=72J)4F@(bT@f!N(1uA`ZCeWQup1,ECA.,cnpj9'kM?.e;`9K$/:.R_dqJ*Qo
%<+#eA;aGN437M827LKZ"?m-""e"GAC@'dZP24ZL'&L)b2kY(,B(8ZqE%Ofc\"]23d8j+o&"2k2hJ]CnBU.mt;KB$KgG,\-#C\\!k
%<8`D5[,jh'BMLRcV&4/:*0?'73St0;#9a3I"p&iloK5d@?"LPC,/_)Z],=_,G!ed3#m<SC!b@'MR1[e;_OTRF86T1-9gKW.7%C9X
%fZCb_gEAB`*@ohR*60<7krH0c"G?dh;k:2\d%dLA9H5`?d%Z*iFpf5mg@hc2+^l&V"Drr]^cF'IEEs*I!OV=$GJWcrO[nIG*5^N^
%%L@J,=s:6]P8@CT@DoAPZ!>>RCg'XHL7pp&)o,07T=@B.(t<>V-4%mW'9JsB[Ol/T5cW=\4i:UV391%+rbL^R?lB\efS5I"@+TE]
%`tKJuGX]ZU/#S+<if#CI[u99`qE"9d6""`%Pm*C=4U5lE$+n7m6]VLP5SYD<D?1JH?IL8Onime!>8lWkdj"8_i3+Csboj6YJOs'(
%?ng-R.E.bfj-CDm@gTjdSQMM,*a2p4lDuWua/q-ooLI'6cRis5HbfV4?V!j80O1&KJRoGP]8TR]i(Oc4Qn(L6)P9h#(.7."+`KH)
%^q5=7\C?0B1<aoEr6X4uQid&n%En`!nL\Y4M[RKrWD@/2+o;iCUQ<bi91jIA5+[tA17OG/]b#BKdP7doEd'`gENj0H`Vg;p#D4'U
%p&FZ<n5Eu_4[C2E*OI1AH%2?9i<e])>aHg7*QP@[D&qPf[c^#sjnUtd5\7?Y_EZSpB6q_5XUZts=h%JNV)OaUl&X]6D[f2qQgRcQ
%Q1;`>I@jJW7cgfmO/dhM^B7jss0307$RjiWa$1/2C7n5'IVgZem19':[k<5X]g;O$hPg[SXSOr6imSLEE&WkODsE=)(H4CU2)FNV
%m`Ge7lqHBXqtb+0l`LJT,Fn/CBKS7W"8;IX8bC$$Kl/H+Ttk@,;sHS%Dt]Ot#f&[\TCXq*7u)Sr!I\kd-Qi#mmIS68SKd<60#YeU
%pZT-<oM\cAJp#[rmB:D?4R\%4bFj]\CB<+/\<d+.%mPJ:i7Y(c<(h]bM)t-79gDU]e[b/h%*"r>4Nn>VO,)PdjW"+pB4c'c)uY=)
%,O]=`UYB3?'F9e9CXJ3,I,*_cpa:84r8c.Nh%B(;=u</-VGesmqJL4jd-<d9:FEi<gdOS?:2qr54&8Zq4P(W\^AN(l3r^Ce\UJ[5
%(>C=bq6\]:'Q*?`4)']2:!^i,l!QVZYLVs]\Pa\FFABH[;NAgdl%)CI-EKW0)UW(XBKU!g`q`GC>%l/MpIqn:;:g'E#Kq9E))mS1
%K?<B;]%tc,LRu!XN82T>?:qWC`[UcF)Pc`BUfVA@;@k<YBar)f"3a2Jj3LOsYq<%BM^M;)6i=K&kZ>4qm3t#"bHZZ0XYhZnh5#4"
%>Z9:Y>C!.e!1rN1mej)^hM7qMofaq/>kGl)m(cY%V-brkp#!5JqZXRTdST?@o2.]!T/WA(IubPn:3YJSkk;UJ&&hA&#,/?n<J"(&
%3GglpooCH%UV*ij3)u2`q:27Qe"*!cT&`-V'+nGMPIIP4ghpbppOPr82rfYT3\h(gMr6hB8&pLKM4Cs9kYn7djmcl/$Il`L-Cqrc
%`hDZpX$?#1@,A<P`,c%2qHc?*S`Z/0Ihueh%<@$^hd_ZGbca[pVGp^eJYD`:VIHa`cPp@2TW*3si!JHfEds[fE9%oJoCmO6@^N1>
%*DpR`"R`S[m2EV5cM?q'HeG4HP9]c@^]:1HeTm[&8r2s!]cUHg\GbBZh<Nt7Ni5:PaB,bM]R4rW/_/CT5=O$:+'m!KA(!M^L-,tU
%m9]N$V@n1gre@Co"HZ/Zpr0Tjh(g6Bg3K=N>36$FPns>0n\W>:b#pWIT+=^P0MpDkfC_h;.>5uW=qtlD+`nqAbhuf2Hh(;K&-n+?
%>^7Ndm(aJMi=%+O]FH<sQlmF`J]B,a4O2H)/4a]o7!ckcC/55Kf8#%En>*etSAuhF*fEqPa4$uj_l9)Oqe*\[em=(`DR1\(\FOZn
%Q0Z]2(g!_o1=>)<c:hNLpBLjb2nFF+7q1fY>,5E]qKcQX>^ngpfKI3USO'h\GAO,t5.];1/ZCXSf0)7s5i3<TX/n5_`]5%#"56Y!
%EE*RbW;4YNZIAKB]KQ][nfH%'-"JkWqYoF2?N4ukd(%sg7$fYPX*TZMjOAi8H7QQe)Y\D:g_TQ`iMjCoX=idPRehWIVk"LJl?iL+
%]f>C1D3^[O7Eqhe4ZsgCH4-=&Q,Ia?KFcmE>A\+7?!$d="HL#3cE15i8""G!F\cCSm.N]jOB%iWB6!&'5\anK?n^^of,e\_#V:JW
%>uI;sI*#39b(0M6)@%?&kn#\Bi>cmUqthZd3r=m01]ljl.Nr^r@fu67]uuk6XuA]Q</k^W-![1.O1Ii0h<_B^c2@b'NEFg[eJoQP
%H[20>XjKFYI*t&]b,EJC0ai#?\;O:,8X9"BO3;^oG[1FW<`Pjr3-0EYB5S5A]7V90SS49'p<&hZ+Bd6@@r_TL<[0n1i<ks#nBpZ5
%$5Ab9(f8tnB=]#KJtlLR>4MP(84W'r?MhVAG/]a#rR!r8L.Ys[piPPE%[8YT^"-m,FGPg4!'!,&H+0:;;2nr(QEf.7/I@e7^f6<H
%[l,rVe-1^Oj#RqNB\`BkMU>j<i:s6O:%=tCXra83Z)giM3&k2E#;r/,M"tWTL0CVRdc[@Ji1MqI/K2D+$t+_!W2WX@XM_HIZ7]n)
%\^aJZ_fqlTT%']EoV=rf]dHhOkcd;.mIZ]`5H])h4<3u0Z9G?KRN/7dBig;F#f&%Fn5WHuBFWIc5p,Lfo-;ugG]><7gqg?8/YO>h
%#bn63UpZeNmBmXYeU.iVNfI>:B]k;XKsgJ+)U`A%BYm8NHW/Jm.c14"l#,0b0-$rieV:tU*te=CWi@,b<1QrbLe#^T;`2!P7J>"X
%WS6Yji[.K3E8"X:8#XF@d@aBscD7&f4E]Zs]`Ka[;%5NNeIEu*p*(.-9#=b5A5M)<WnZh5Q'6V^[AA%4qaB%q/jJ+Hheg$I&&>sc
%'=$#2I<kk3j1X&G)XjeRp=BUaCV!8BV'\MT[%t;37C5E6Z*UEXnmS4q<R`"IO-LkiK3sq/r^u<P@e>j]SdsK8Qs6HBZE@@gS!HX0
%;P2)9F!U3gPT>M$Hf>eNl+QNBH#G>X*p2j(V5^m.]]?A1hpYlApp\fB#Trb,Y;P3kHSNqZ;;kgAT:`Zpr%*$FSG?T@>Fh[+Ici.R
%S@88d?E#6`;a,-VG%M8pDd<n$j]C/JJW5_1@T62CK"RF^Dt[T"mZhmq=XoVXAINMYeX*9;2W*&`WuPq5\soAh()Q8jS9>pS.js-3
%AhC+\FP&W;>uoG8Rba/ta966&m%NR@=O75^(;4n'nM1SRi/BO_BINatq<9Uf]gce)2h:3OKKH(4=p?>>NuEKgkP`E!ocD5UeScT/
%?(q-@'dAu^Zpo;&pBZE7W/0YTj4T5,LArL4YLN&s_5)&X';.)D2aE2Y($Yu^HA#KFFSgGm6R2PF%=#*lTFVlQN!J!34)]5_pY'BS
%>(#34N8;@4p:>+$Fc@a8A*i]uIS0$aU+q,&GTItI3-A_M=ELK'C/"KmE:NJdS2hre&6`r^];J:Y+?:oIntWP=d?CkgB5YUiCGZ73
%qn/Eu<J[ul[=M2(8.*oA6+>aN5uMn]'EE1Pl1*iqT\o&.('ukK1"JsgC2rSY;\Ni$7+bGo5.B<Y0L>A:&,91?\FPB&YXS,&#)`?m
%,aUOtJ4HD#':a`V@BI\:d3g-F?Q!(>WkThS\JTd)P1'\=<kf99Kp%(:g.9.XX7BDn##d'&s00GZY0EnbQX,An".77RC-=tsl_e;(
%GBj](aDn\pP"0>K94V3C][34QB.sdlAd2N'kh:(Le;W9GQ.DCOm%Zjr:^m4aFCn#J"(`l^C;EMUPCGP2%Sf9jr&#>*e&@h=LRZi;
%?)TY9X(U;5btI6=R@'PAh1ir5k\QJC790(C+<A(Lh8OQW>RWi"ihDhGVFZQ*XM_&Y#ukDYL*W98eC6[:mcJ/K-SbcOC(COSXms<[
%LKpg'B1#RjSh:4hMW`5L>%_4t6)-[$A#$FY9,"`%p"Q.l9N+lLa^1OEE]+ofef:TPK/+UpnS-NL2d/>iVZph;*O_=L/#?Di9%4R$
%-L7U%l]fl8](n\]g)3e"Wr6gnTW!d'79!G7\XR!$VAY;_6lD&l%YFZ1qj_iOJke^4Z2)Rs%DWE]BOO/`n7XlSk5O;3nX(uo3@)=G
%c>1h.Bj/_9>Ib*3@"e5Cj5'E:U+B"&)nFRMf>(D0\l2".G>)6/qgB2F>e'Hmo>BU,?<t8;iqmY4[U*:PDh%A'-b_CLHZFMoW;kEH
%m&Oog^J2;Ah9g_cB0S;fYA`3AG5(\TkD'ue?[qt:c>_5*Z_mCD\7@YGf7l"PhkioqN;qbFq>9T(GA^\J*ShSrYcblRmbE3bePOi.
%5E:eRr;#<B>>Do)FMGTH:3Uos4dpZI_p0q)5X3LGh=,p-4&4]4(-B;!>`2>]%nA=lj5[2L]rredlMUBFr3l@e$[>?kB\YhND!eud
%Gj%Blq:4fpBsRV`r_rK92h&A[lWs5=SK"?[PH3rU99\`5h9I0+L@CK,!@4-Urq=3iHZschD]Hd;j5ekmeLY.iO)NITq=)]l[sn,G
%"ZHRT*[SQCrB>b,DuNH!FmaYmmf[S/)t!*Ah<.PGCiq)oR.0M)X6jNRrV:JSm(BlS/%T8@F#Es]g)jDb,i:f/P'liVmH=5Y5/,]f
%\)-(@pM0<hiA!RN1p4=c@J@Ndh!"`d^D$>orUB4"nET=2oPji"57rDrGAc8%[c&stc0)jtM>HUX:Tf0HkiR$fjRr7QhnM?9[%h(,
%SpC"b%9#.;:@F78"6TN"F8pr2FDc2alR`rao?m<!GHU%Icegfm(k-aTktZ9ff%2RDf0U;JKhCgIo"Mj*-\L<[hKn%(Fi-98qDW0`
%G5i2*FPH]\CE/XAh@&f85,.=cr9fHO,7*pekFl>`p@Y3QHL'-@fiM7)*TCQk]^S"j6<2qu`kd/m3V;FumHg,u](MfnJEnT7RX]9l
%eh>T;T\u0Ve_@R&f<"V"U[LW=0>>2DZh*mghe=oIO.j8-Yq$mu[Gq(`$bmE^0J@qU"Dd*/STDQ'dl2qt;"T6V]O/@]mHA9\p1enu
%rP>,N<pSN?`nnP<T>S?80:t[oPB\`Dh!b5fkKi%'*5Q,okEi)b(nn]jSR7k)bcB'"k@O9F9AdI.PB>].f5D_%>WU#j_s^:7iU&jW
%s%-j"4>>FfoAi40pu-E-ZLgcP!FnXZR\p.K_"`$GkGpg0DuId#h=cHOSXWEqs,!?(+&?L"RmO94#rrhULL80#p0e.g:2i.Ik-(=K
%8(JckIRoIboc9Oci79!ZZ4q!5]5(L.62:?LGa4Dl&$?l\-D)B?7h``Q6DL=@rkl@qS,4P[c)n%E2ugrO+$S>:N*B)-[BBH%pKQF:
%1.JpuP;(<8Irfo^3VK&WCL2G!RhbQ&oAGr90q8,R#7:&5bc[.J!4]59,Y,o"Oaj_9lq-:<C;#uULV4dVcV'8tkAGA(g-Jgu/E+5=
%5m!+(Sj)FE"_Mg;9]LoC]W:<N<RpBjrP_!Saj[U*l`ThmQ@-]!fp08-bq+!e[BAB#qZlP5;1Jji[1BTUlM@cpoCt?9SmCs.kL\ps
%l1I89^Ph!04"#$Os*PA@4b!36B]Hp/e\Gnjg>F>/qe!lu'g4Q>rYBDKm@2b?qX@Ukc7A/<[m,2chn_%R`9-ZX5>$qG:O)B`;`hU4
%o_hGDpOAtDcLHhVfqnD@>jn0GajX>)i,*Dq(3-fM0&U5s$A85qXn^`6dr'?pY'F/[otN]dY,.lsA;eI=:#fX0]_q`#0+,fWFVP5Z
%o%60Y%d*XE'nSZQhRkd."TI6Vg5X?Kmo?apa8JD2%AQ/Uh"ibYKdqR7#Cc13S(RX]ng<(_4EZO^<#Ks"S2n,9Cu>#BLJ4>=f71@(
%_rIQ]q[Zk;)u%CVmMHHeT/>M6-T3$5SVW?ps71RD7k\eu\^hf"S9Ygt*V^JbC.m@Xi:9_hmsGL5=2I,78_bqj^^Y:!V]""]i<^L;
%9t?.[Hn$243f(39L?L?>l#[kJpXL;YhfViE*UXU7N`q!/csmnjC(e.$-/Rg+U,@O\*eUpt@nCfhqPb!D$1'p(%*bgp[+k&1+5_ZR
%c[LCoY9G!Vo_cnIhiW`-os9AU7d7,6rZk_D4XuPOO"$,jp%Y,$0W%=6G`;=G?&:5uWi5s_[R=+%,@%GIb!\VXK9)Vk`&q_u$k'ne
%8$Y^+[Ib2JK>qL5Gq>VJ?b^oc_c>(,/AC<L4f/Qn$n`\j@RPhe.p(_q#Xj;Ki35K#1uN>:GbAfHg`:7?1;L)2Q_'*%nP`fOk'9l6
%=a=ZuIFogs#@pe.))3r;2Ok"5WRA-0MQsu)B1;PmU*6VQADf::;km^T`:NLIq']^J@1`JqdV)D9e$""WjUm&sJ2"(^^+S`)haL>5
%5Nla(^<N:%*H5]Vnfs+i+?bc,Aq)r>j[SsoGIo9SN;VU'+>n\?s+3Fu^:X!rlXr^Zp\-UjRdG<KI`&HcdkTYJhL'B7f0ujV+EIdi
%[Bdb=>tpB'Y5H'riSM6uY7%%*ZH%p-ml^XDEgRhBT)>$@Gjo@IK+u)BUF6$4nX]X9LBjd5p?nH<ji:UPe)JAC7dnU(SNjEro[W:-
%\ag(9e`WjTp9ggMA+,koUR@E[HuP>4h_fm7<%_(AmSC\$2aTTQ*B_oS4'f/mq\9RuYa5e/=`'XBi2$Obm0p-^HLa,6NhHLX]"Iq+
%V\h'E//M3W51+VS@C\pO:_Dt&!lp%<a[6"*?"(PP^"qY.@N:tFH7.4>QhP"<E!oV[9q=A`KC!GhEW,YnI1Ub__@s'l`'<.)oj.Le
%V;K:g.NA-NRXPF?FAmmls0hZ02net:D\\X,_ZQ#KL*5d]kWeN!Hl>.sp&N/TVCBu-d?Ai6#G^q"kC'8j_;2Wa*PEZO!$5(+#I@^\
%+/a>??-6TIrHo"/+)O!K2SOP7T7\i1HIM\hh!W'?2U&:A"gb`YmJ$$RL"h[f1ttfTG\l2]p/NNbfr*`hJ?O1B''Ff<las?aj4@Yo
%J0)IN,>$h&>l]*c\Np)\d8_l"p'r*#;/W&_n9b)YqYmPTJtdPN7d$R[i)&5_=jgWHh.j[\<NZ&Ln%X;FFk5nTE-b]S_NTN7le6il
%^C'o4_u&uMH[#1b/&.VP,e?&4j\kaB:]&Jc,aT<R]X7p3#N$Bt]?.m\naLY0GB`[=+&4t&:=#o;J*ohE@h`KdGD=#qB?lK,07KQA
%gbaJiq$.ggM/a@ZpU%p^T>j+8c6P<lCX5IWQ,_e5mnn?$_2c+reG40p)mQg%]QRr_TDLibhd*eT!:+q3#10bQ+2l]n/:2I"X(-h5
%^2rVup\p^"5@=BO`pqUX/kEnL/WmZbX(PZX5OP?ALYr%R-uG8f^1uNeWbNlI>,sTA/MHsT6mDGCQH`sPn5Cs2``c/W)M>FW3)$oY
%Y".o8SQDI`2#g7HR]PHWd+\Ho.hLi`)VaE1j?\j,gb=AaIR5Z+jd3Z#o\^Ol_diN@K:b2=k9R\e8au;#^mtG@8<Y.1B&U*Qq!.Q*
%3t0crp>UGn7fLFe\Nn]+He7<7mLp6Ph=$O[!fu;Qrq%c:s6Y5KF'V5_k4ano5DU=!,c^."g9:V$Z@lpEMnrfF@MX5tYqXh?hjAmX
%q)k'FVloH1e(ErRLl$tKpC3A$Vj=EcbcG'a4oFa!b?rH`mlc0bO3>"=lQY\n:4:!3dn;>%1@"au62(k=I.OD2f/4N<n#uQ*2\Ed8
%#6cU7q!e%(f&aIA1gca_mi:3\prDhkA%;TrF8+JKna#V4rV<jI9j$A6UABGc5J;=+ik(htEom7`T>/)[^\Dhfs4[9Emd5LMrUhDj
%S!W%02IHI6hgRO70IgJeIe1_Z?a%aB"8S0G&RKnUZYdl=f3`gfZ_QtqI-'LU]7R?3pWH3J>l!Puk?aq+ZZ#rF(\_88<@FWVE8g4X
%TDc-.elfrVViM<p5G.A(ndajUqfeBF?2EQW5QC(KYN2)>4eM^Y*T9k?3F:Ut?2M*4T6KaRrSBs^UPiC2F[,fcmbP@$IeDEMU?fLt
%Irsf7eaqNR\+[H/\kI2(gBV)8oC%/$`VKGZnV*$"rT(hd>N^I3h<h>*mToV`n;RZ[H!uoamsc+6^4#J2ch"@"GJA63ZU%5;4qcQ>
%iD6K1]UQW_n)0sn0A\i\+QiQGq#&a<;ZH9dSFiXB#.;j5EdNDs)lQ(rs2gRJfTV6i5tZ&;rGhMiQ2@Vl.*-Rn[pFI]b2(CXIrOoK
%$SOrBn+l#BhqiYY_)=X>fmrc[IW543rUB6EIfJH;%R7IFiUZH4>&J,fptDR"]Cdm<oVMNamHot;go]JKH2,p\5@6F)de_/)=0IN7
%E9lZcK:b=k&#?=k9\6$6k;UTTAQeK95EO#LDl7:gQ.018&$PHbqC2*Zn#kHZp'<ug\V@6\lAJ.;qqp6l3k0;#e#P.8mGHg)DuR>_
%r?qL*J%>3jp%Nqq\p3>_@6)2k?[Uh\>;u!*]2X6/p`3(s>GaChkK`\3KU+gtks+")l@8,p>^Z#>LF9:?PM`tZH1T'X(N/rqRY5Gt
%5(\XkRaB,/Y?^q`me+W<i:!Ik5/+>sl0[;"Dgh9$YCksis6k8[iTR`QF5?J8qo=/9/)p,VaMYD1GkM'*5M`mCI7*b"H,ReSNuq`>
%HL&tR.rY?1FEm?29.tcI'RB;2b9nCH'/td1g']+MIf5-2e-5l@0YR9ndG_7CH0+JeL[lL.G>Esoq#7%,^OP_6UZXkOo^Kh(IpT\_
%i8NN.\ud/Hn"#)Pkf]`R]C/M<2/;S!BFGd@>?/@s?Ma5ZT3[8frcI88G@&!.H:L\E\NTrOX%.Tn$V.D6J,9EkT\k9(I!Oi!`ERRX
%4FV^(,Bc#nFT/[h,sJt\6^4GAIbFbR?_6=9rpHtV0#$rSMrUXMg6)<bm5G8<\jp[dQ/;=a52;42+'\okn6;dKYIN(d8)a;F+n`_"
%lF4[kpmXsj]6A-#^0]XAT7(r0kA^$Vr<N4D?[KXHK)H5&PK%iAPU^nGXUed27(-EOjn\r?b-"UVS^!?N5e#L[5NOq5s)$YIGE8m5
%BmoF[O)I4@="[eWrK$[42]b6391hqIh7Rj%m`22F]`.Uh^\[,D+;$uu?G<$b]u67l3CFNC'D_Q9Y`;N:g:_k'@GgBaX8)2L3Ht;u
%rSP@Sp!+X-D%Pen*rb@U^,kQR2It6cfY@I(*V_HtKX8_dJ,3RGkERtiro80#TRM=EQb=_a36`t/a"O6,je_SH_kY-?l.+6$a<+JJ
%?1Bq'iU4f<YK6&/QaE\^>I8tmKmt34n\?m(^JQg?gc0][j&]S(*8]EJGJALf6b/7"]HgDtm;8=rVWkGE\9.9?dCE+?5<[_5:VM@h
%bC:LZFBH;UJ9h*a7pjf#;1`q"=)YismG(FK?p8o.k83$eBY&*Ye^8U8hb:m@e,;r8bBo$Ajh406_NDQZo\)NR^Gt_TT00](kH.f\
%ACmHF)lJ/JNt\O[jO!?:hcXT_O8$hY^Y]tU"PN6Ff7(4Z9&KeqiU5_f%o5"@#Nr;'3IK5&bbQ4\3WAO@1Ju.V4$'rp:PetUa4G80
%2&RdUN/7kR&j@!J\e.>%\bP._B5_%<Zak;Z\$]p@UPHmN?heNRm-_Oe<AC$g16GAIh75ZJHM_m^iq%*'./D\OWs:k;IJX11_-XWn
%n_/*Nap0"nI%gG.:O`R3mHB=,%PM,_p2eVPo<m1UGiOip@JX@0.Ur2@n,&a6O#PWlndf)6H?ASu(Tr/TcUk)8`QQ#7j/ss>i01A8
%p$Wt%#.*,u0-7cSj^(V6>^YT%2a=3ar]#BUc_U/^**kZf2PTQNWjA\ESrBR1Z8]fOYIsl.V>S1F"s_2]^-0Q0h0s;TWqu0;h:c-c
%U2Sl%I=2!qnAG&t0&PRZfAHJrX"SsdZha4`@fOoLI!"\pa%,$:qtMO,E4j?6e*_-m>b?9Yj+0;#%F>d!qr[;U3W792g]-Z]H]L4[
%>9!-632':ki\oB-rBg/1>E8rC2d[=9GO=qkY=<4bp9/t;Y:o+?^L$bJ-(@-0Z"E,$VSBkh1@'/YB]!+nkkDoT8pjonp#>WpkC7sP
%pu35O5Ie@5hKU.&^%*t&_ctmgUaKTc*K[7LLSA9a52Q>7K<+LRhRa(fKXE[CHU22]SZa^EE9"bfGiHG_prgiNL\8L0LUY"ql#YfH
%]/R4srql?`a'\jUb[u"ibnC=H3qqfk#D^@a>eL!n\T:!uhql-A3Zm^dc.LW9(\mL`<MA]E^,k&_=mfReDbRbF$2f2:NI1QSY<4k<
%rqPE,GMe]&oP=$o]'.`nm%^)#)u&L8[sic&b-sUmHuU:<4qO@d,(iX^1raY)i295WGH\Z/s5:mG28Fo]hn44+g'<rPcK:=ohKU`I
%@*O:p3fj%RDq'%,j7U="YfX;P^Oe4\oenDXc'\'%V>5ful,haf\'M^0pquj@]WqLk]?btIo_iR_#$d%(Y5Ine]5CbZ)uR<P(Z,2e
%lDNmK00fJ6G&uifF@RK6iuA#?0G$VO4!uh31YVZR>;(I&+%7d#qVCIm+22(Cp:^H[gnj=t%ZfMX.RSX`b3q"6cO[d>WSY7<QaEj]
%.W"s.\+[$*FSmLeM11X?phi75mn.@]\Q3!MCWtc:rVN5C6($ZYG[N<=E9O*AWnYV<kZ<@X^#t-A-O_uc^3jE\dTh!D-p)6^\.\mK
%rJ61Zq"9Y3\$Ppjd=AO2D3^h[J,d[:><D]In)W*3EVH%%r:=6s$k*"D4`&b:nB:iWmN7McfC,griNr8KqAYD#kHm1C[H$ZpdU'"R
%ff=?G+-YTGR4Ef:0?[8k]GKUm"Y_)eU6M4[QVsgXDN9(CL3_tW\UW,Bi7$`fb^2NI4(YT0a7&/r(R'm]8TC39%SI-N4SOm^Z_h"#
%DpaWp]N=BWEMpB,AaahPhO?Y5S^>8G`n4P&b^K4Z\j%L%#1Am>aR$_F)ZiAK5/QG-BG!Ku5AEO3;/@T`ZisA.)Bm5BUAS)\pt:<I
%RBhrh:QCW@/SLq?D;WE;,!X[W:*DidW?Yd$&_rm;nu&u6;YGuqq'taTfS/M6Ag+RPG;_/)E;tmQa*^:A1Q:YoA>:$0pG0?RMD/Dt
%ZkJ$2kVOa*12]G"EY^M_Ur`8>YI[f_<Jj$P*)8e]as.:GYp)/orHS-NKug'H+3o4.D@qCbemCS%T4`U3afjd;.S&ZX!1=#8qdf^f
%^hd+&o)#r[h)s^/;#j7N0=Vh6]\qXZfe:*;gj>`T_Pq2$U_(b1p[S\f<6Hm@)0H$O%JNZGT<7%3J7b]/o>j*jY`Dtb=[C=<_63\a
%H2u`,b]7QkrqDocV[$T]STKGpYa^rn"VH&,KGn.gAOhP,$W6tm32,[g`QXq[Ym>)U2mW22"5R:F)h\oFkL"*>VTjEU2AUa2"PC-u
%.o='sKP8.rE'!ctjE8mQj>I5dX8j.@`;:6lj8eLFUCNK9.\nIQM'+1?.$PYs,Lnfu#1sf*4j\WTXVQQ!feFjc(<*,'[H%6f&)n68
%i_`F%4/H^?A/sYK$T[BD,h>,HD;na\r%m#`P=qKXioP@R4!?m5H==r5gI6-+HmhK(-]c/h'pL(Y/&sT4*97/]F=s-;O)`aGbt].3
%>`Qhk-b24B;Rq!#VFdtBn2`CA,b$;]5$fHoh""YFTD6*@;85e%-uG7lOHBliL*X:^`0SiskJBB+?9>XfjUDsE:NN/4MWJa6'YncF
%E%i$[0rS`N$Tqum42EVrI.g=g$IKL"hW`_8H+?b2jeIY_0H3Q6i$_p1(ml%pQ9%Op$5t\N<jOiV)ZhoK9>cb^+K1BET->@?RBhoB
%EUjj_8']7KKMP[3,B:@m#NGk1f10YRg9EMj%;b.4`Kj>jEqVsd15Z?YAOdWd=meXRhHttja_nR1i:q"=D&d7.-ko:]*=0$(ZNDK&
%9Mg>p-aWsG>sLXj3Mrn+laLp18G>@T.8M57?9u2"*0$%r;B1OH8rC/^DLBMT"=XiNm>QLp7.HdXs0Ds6;goo]S/drNk[\`#.4CPQ
%i9WEWgP1YbOl-=(;1`0V^<DhIZO7mE5\9/8NJKKg6B?_!KXX3U>KC=V)Tko7J^/mj=l]QBR/GiXBS!D'^1QQj-XVjnrRH&qnB<BW
%PTZ]o?\Btfacsm\-HL?S>\HRO#QdbWM]tr];)E`e%EX=p'TBn-Q/8`d\KI^qL_om]!q&1mJVQXM,MU$W;p':-P6fj+1C8.QK!Z-r
%'l=*%#>!#OpoI##3J%</<dlOZVrqdh%LJ:C'PNQE/7^9*eJIWSC5s]U>;gh?)YnjfOXWt]85ZU%rD7R!_[g`q.b$h2Qj@-GMFdhF
%b_b0tTJ');I\H;R:"MJ9Ms7!-3!&!LJ8\,%K04n-X:_Olh`BGq&<TX0P[;/r64n&@I9qWm<::S6'e4VDaFAi!.PT$$SVg*&`GD38
%J6?EK!RPp.$dMm7(t<b;8T"`m8sVJ'`s4Zu!^6AOSjEqX-KFC_*1W[TkCqZl)hUQJ]\n26@ECipab-sR"@Y>ed0PY$kUfGN+c6n3
%#Z<"[/d+M4WK.>j8`X+>C^V7o&sa2'oo4@lV)7/UjlKI=ih<:7JaoE'G/Kq3k,J]R,8V&?*DA@9#S+@I\-Q2iRt?gT"PFt<&7*B%
%Z&r,5N_jn#([VU!/hWtKJpXgPY<*k6a#BQfO=K<$FP<H7>d,%V'DRg88^CBH8Z!6q:*)_!'c=,%3u0.h$uLmq6P7DFA3hn%+6UTE
%YfEbF6o[M0Np9=>PeEgaXpdFLnm3ZK!nk!.ZRf3LT9%W1r*od5-=I8C3':rs=J.$,;'ZJ8EnAUsBS?(Y<JGZUkqeZ(,H%9&1IP*i
%+=!+UEVuO_Un'*eFKh$?s"+6k6luog@YGHAd[k2pi*27)7F4t%*:8!EbV8Y>H=.a#Wl)fG5mV_Di)[p:KNa&l5[&`18eeQ@G`^qG
%-FnJ%N,^5hd#)g`U;NpOa/<(m\Hfsl[8[p"o:!;s.,kksg&d-CO]ds4"[XJhioK6`rBS0AlCqO[>dI>#d,((j[`eWn1+mg=(bkc=
%T&jij/BYEU4nNFf*M@4MaS#qY!K71eSNne1Adp<omggfbhA,(5H(K9]ETZ'n3YgU-rtc.fAj(!^:2&-/YFL7R%FYFS-$^Vn8[Y`N
%bsG*h]Lg&Fr/`mgjU+e@+>Pq$'>KMLb,W?VilHVBP;fD1+Z_$'PItTMbo=NXj9FPt+gC#L2fX47cWstX+pd>(8!&F%nFU+*F3:DU
%4`h@5Gceus75kr6,hK'e;ARJ32,qZ_Ypqt^GRm,,R,d9#6Bc+]>gK7G)/?_i:f*)e^pYO+#[)=AZQJsu#Tjp9JhY<4k,KU>h[1;=
%M@=h#i19tQKF6iKFD$BV*+V772AFeiGsGS:%q(-7#.@lh8:\S'jQ32e-E!)nnPq@Y@5jHm_HI2I7&nJ$+[Ck.piOAR-^?7i)DpeE
%($)F\LMRB&W\;^LW.%,XZ6XYAj'!.'pZ.U08`ZTn33%0HfmSum%ktX]r?7!:X$C!^o[=](GG5pITN6Xl###Xhc4XNCSH<\T:rX0Z
%&@kOmq!_5>6jp@fOe"Js!/_AEOFj"qc5(HScD]'>m0L.6OHlroO:?S'M.TY2L"12e6n;/mqN0K>@AS;Aj;0"WKH]jIMiLjp/jA\F
%XO;-3"*Dss(d!GWG+*]FYD?f&<^V#9q8'k/Kg6bD9Zd_tahMYno?;;cQt?%pP*%ndbdb3h/_Um.P&iAq\8DKYo82Vf0Uo"k%\bUh
%=?\O$)^gBX$W)-o1fD-lDJ?Egp\i!Wh"IpdNo6,IFVNrXb>ko?TfOmme#PSj,L//6lN-Ol%\LhO+:0C-!F]Pm#+;!<]h*HG(2Zlm
%m*%C9bdLmmZMt>uU&l\.5o@C4Q<-MCEMu0_Q?)tNW*oV!LsT]VpM;2)4B;n8Jq8+^p?*^u9gB/tA#9#Zff/Iac_M=_E'>rENYR<3
%@-5=9+;"2H>N,F3)2lX0kq;^ZL/gJu*8Z3dEdS;TKepVsL2j7$pCQRIOQgJl%DJ7E_,0)d0[$enWLB[6#45*,Q.<a#/sJ0>I03,9
%J7%Y"lC[13?l!7Mk#O+M&K_RUC([*-'\a?7=Q]gjS1;Li*m>Kteiq"iOd<Y98gHH]lK<E'5X0fZpUDfll=B51-@k\==sY_a*a8"P
%bs9B6aM!25!>L9DR_T!+8qQO4a+/q"8)BT<(U@sm94gp6NJ#@a<[%<agjq2Vo$8_Ogt>fkdhne&H?oqq'i$9ea9h:q3<\k#5jBOQ
%7p[f5*7Ph/G70WVF/$$l%L;a-n5RHS6dTJCcsPdZYL!+L!V&"df4Nk!G%_lVlO(3m'oia`?H/HGLDZ[[_gNh?+n-Ufgr#Taca!T]
%"#"lOo+"Je\=S4=m$6]X,>tj!WEEq<_HE:22jS\t98$S9QRM^`W?oDT)@%0seuqQ:==ToO$*5$]I`AE_`$U9O>Qlc=Z]2!PCi*ZX
%NSD3d-#H+64&^rG85m&-0#=9?2Zt:EKrPq4`I0WO?9=WfW3,d-a*;r4Fc<7X$EcVKr?t@Q&/q4lj$fDEDuhs(pgm_SUs@G*rYDFA
%GT-aRk^N19nBl\eoS62t.0IZ5[2?Y9:Y\X7?j@3.=?^nB^[QWGS*`uPI**7HQ+%i$Mi1P#qD]M&2W4`)/#*<I/tBA!J?&T`fI1'4
%[>kLnIu[qUYm+rC-UC*Q4r#e-d2rJh%1`G(bY15;h&nuR!qb<9$Nl3[GIP+$1Hagkp^LJ9M;Rrf2\0#iEknK@2H`1<I[\K5d%R]1
%b_;>q]TVb"*C3-=eH]gj1+450OY4Qa$KVlC>UG#u%eeO`2%=Z/efC2M`ZHO-;9%Q1ONku!FD+n=C)u"edjJ;,]RcP.ZQA$FU@2GK
%$$_YjGJ&WS]'p/Z_8B)NBP/8LPPWt!Db3]u[a'h=nBbAe(kmTg1(mPor.%7%+\\72MbtXFRi4ZP<3;R]/C-%#W6bSM4*c?U#09/M
%kJ9.AEP0^rQ7?hXrJG"k*@)'F.92Gd_VD'G:JNZ6Res`YanntD!E;kk\7T1GE?;SIldO(d/u65c^JDb%@:83gHaiUW'8=FG%'';T
%n'/t5G:0+m?r0N<P(>hI\nb_9k+]Y<]n3AR7_T7g3$#C(;5?K#$1!VCEbp=k'`"Jr%q8R3`pU,Wf5kQ*"X@!M4%uH+MO>;X^]ib"
%fH$"oU6d-4S=/:=A>Yt-Q-DaLkds_c;DtHI-=Tra^sH+4hpla'F3,+BJ;1&Wp#jL!O(Uol&>YVd.a5%L493]QB4ejbT3\jK5>GpJ
%`ap(<YpNUCiO=2mF6+#.%*Na61R6E0*2qYTPrjn:E)9@Y-PsG7-.L)aMeoSEJ;!P0AHET`")B@&;;o7iM#N71#^TAY4),un4;7P"
%Bq@15B*0jtA+iHgVjEHV@'%/N:K);QX54H)YXZ_*3@iT@R.YEmNc\-,kS@S0O=3T6G*Q]UE5%`5Kc[eHWmZma7QOQ.Aq1I!1Z3gX
%LiBi)CDWNg7e:X*Y5nnQe/Vs:"@c`I%$q0\kEZ3OFWdbb226_D9.W,+J\[-+%'BB&hI'HP:s3qg=q1sJ5WHZ>pmCZ-0<_&bb"l86
%MD#h`]"50]4A5pVc&I^,S7A4IWOIh6.a"Caba]uH@tOF:4;AV)Eu"Y:kJ?m)5]Y,HL+\T;?Dm""#?PbNI#gNUpa3I5;9cm^`*41q
%.^9n9$T4oK(/CTuJt].5(mF%!pbb?)._HN9Qr0*aoUJl*JH*s7XHug]<g("Wa[fKZh7.!MP0iS^CV#BLQu*F###OH-bogf8*>iaQ
%,QN'%&Ia4p5!)Z&E+E&\E"Dlb_k1?p$d.:q^"_N7VON_B'XF9]#h#,i1Y;P:Lc2%"&Kk]u&<g;-9eitf#s=G"?KkVk.N/s&C[DnU
%(reu((49cNi&%Ku"Al!oFUm\'L]<*KR2WYk>6j#Pa]J"L1q1`jME*egjsFG]2\2pYLDPS/4bB_+7#F<b@F!Db9'q-nS/V)/3gO\e
%Y:4_#n,$9)0m'-T]l%+Z`Fr\NMb&b&MgZIF4S;Kk-S48mZqrs;#J#C-#4hL@?/W$_S7E=$;!ukne)aU%C(D/W)N;QZeh6rj;]>A=
%78u%*'7j7"%pc'P@VSjY]GlY]K]O(HQb"fbJ0u'LNMU-VKO)t&gj)+XY<8pU5ffkcS/im^ib3`[-'#(W`'tP9!`I_"U_j!`n5I@g
%8@k(4]BM(X6m=mrSoqk@\Z0SB6,HNTB!>&I`R(=?aN>X0[ii]Y8eKeIh@H?<(deGN^qGT/U+Yedbp-nS[q:a+ajepbR/msJ/WG[-
%_$kGA0+o\FVAcM.3m[kgU(LQUdBF6'@ppd/PC,J["Sj\@&Kj,gf*!P:2(rm3\==f.)4OmfJsD'Cq!mN(81L8_K9jT8)Xgu]&p%ZX
%Ch*$$KLNm=;#l^S4\(o+ACG&<KaWXaR#j`>A[eS`M^GGBar#$F`L>bE6,ni\"+p(l,6:V:m3##@($&q4#*Fi$c)!QO.%%L%`=S>D
%OUZc$;ku)*G`BJ%F0?;Ak6=p%T-e[e%"\I[N/=nu8dsKGN<edD7=Jo$\dKW?=M^FB8]<b/Ro7Xeg.Lh!T;Jn"5P88Y]kS1CG>mC9
%K.&$eokkJS!.!jY>qg35N1hdtl:bP$?SUc7KA;9=2/m8o/coe9`P`<JD6skG*\Lf"[OhKleJJtO`1B9Zru'lB]O_l$f;.WmHI'[]
%b?&VYP2k*+H(q/PAI7k,b@e2gR#2"*K>`<%"dT1KQSkf^r0ussC:g>dXq#]=]:ffdpl<?TK4[m_#Oa*0L1ne*Bu,OCcYP5bA<Io8
%9pKL`^k!4ZNSibu6h01f#_hk)%*P>I"E[a91D1a3dr:b[.oeJ+g%GkiAD,<d__&%MN")*mX*kaR$![WIFn;J,S?,!qn\Oe%mI0c!
%C?nuk(=>kBkh.q5'0:-^74_LtcA@[2_B@'@gjlF+-p!<cN;@/RT5OmnT0Fp)4jBF'h&[FL3<Xb3_:Th7i(>doe=18.+bmP+58:Ai
%_Bp%S:fbY+@pBpK,Ups@qCYs%:b1V3eqQ[G6\\m>Xe>b*`mlsiS7]hSTjPA34Y.Z`U[Fn<+Bo#iCXBfReJbf3Cmh'eILG;`a<`2R
%UH(F`k^#gc;&H?A3UT.,#gbQI%Lg>;.<^q&K\.i;J7t+fnt6[6*2l7Mjp*#\11hA9D#D*4`0o:-\r7+Z(g#Ld`1phRciO?q1`E@>
%0S4*eG0gT`MdEMQD0(,cNdr_6drTg4'Oc'=73_p/U)]#o,S,p&1)`t1<)M*skT9u(+<R8F)TE;Y7O98p/!XMXLmWC>b<iB47'mUS
%Cm9P0)aHf>di>&jll8:<q.BP@G2,$`[N_)h,9XEp<I'2f6eDV,58HE*-)=o/m\iJ!-mD;qaYY:E&r#TA_l+0D";X+17.;H\EK:8X
%cu?l/X,@/gP<LMTBX8QgIc->T+QCL=$Af&bQp\nD.*bO=%uOsacY(eP%m>=j>SnGR_XOiaL/n(T)-1H)'OU?QQ-j3*a\3[@>)H(3
%PR-#$K/I;dLTpM"J?h'-5"0L;r[cuJ$_F+>s*/gdem`u"C*4m#oY(a8AnSmL'c@.+&O'&\nIl()Y6dsn$'G:ghm-fZp^@cZh5JF0
%!(^3<)qALg&OattBnZ1;!;$['f5mGr+tA+%WmQW,TCM1]4_N(4CFb&=M?9L9S0'f`Dde-?]'F%(quR<b3Lb$.G+eB*QQHU+1r)m^
%9HS9,TL3Co#+=\0$hG'cDZ-XJ;)i99RB!e;0tKJq,Ef$<H3:G!.DVWRp$!Z^Zo:G&:TG@i]r9p*H)2?b_c\_r&-J!M0`i1'i?"31
%9VSWh5_j;+/=hfM0/$WL+Xl.^YE4uA0_3fA(BBll"eS/N%H=/0$?KH^K6UC3B@rYEC]r%rG;MMci(BO@W&.fm1>>6^rR599ZV9bD
%d[FfVNBe+/_;)nf!:a(,hf/FG67cUkO[R(M<'k2MQf'elI`OsHCZcRG?!6S-=UWNj9aW&+bfq9n&[[qt`J93NT)o"E[I,/u+;and
%)C/dh<G!HE2lUjmJ76Uo/&j-cc2tAX0&cIEa%r01Q`f<DPGK\l#(=@@]J2"S6O4`/0B#4I:fY2s;CnFE5R,\26LStPN06j<&jn@S
%;fpE!-%gnZ7j2Dn"Ae'.)4Z?JW29T,5)cdqW30aZY,ICY1ILhRH-1-"b'+UD/Lq_d(d0M4K3,3JU[J6*Kl;;I#M/4!&3TnF1&$B'
%';7?`DOd@RYs?b_SHe2k\Z`@e5U5]KQn@B$aGCZG:G+)R'8M<)M)!XKaEs7`d5L$)IY#fI%l[8%otj@[LBVbhjH?bUICB<G,8/?M
%[/gi%:mZ^\WRsa!1rcCah#Mbo$];]6c_[YkA/'<K$CREe']qfI0U/!r[t]N5JdK$hKOI%!TK.Ls2qJro/+a?S.[?&]80^65;c1p)
%:Rpg+734"ML'g=b;ErWR5O[ODbcCk4r'X)f@5'W/^>KX6kbM0%ZpF#5^a`9Y8R.''JEbI!*OOD=o_fZ!<C.NNI&op=1"ss,UaQ'k
%e[b38*"i[Q`;ju-ct*WOI5X!;\6_iggP$iL_4#b`4a,#4-3Fo>bDJ/`0c#CP+d^iohKgt8ZQ0l^)$3iulae:EXT;":[2P-=0EU?<
%l]+5XgNH+SaDk6f'`h=64pDqC#nt<.1k9hG:e]AL3<[u-kaoV!Y[2j/a/Dm!ThtP@9taEoRSj)M1b4dF/m3uT_H(:OL.QllM)L#p
%GUtt1-@o1,@XBCY;2n[oQrKG%:5IO#SK^!=6eK,)b#<9(RBJa*\T5)l9,5!s^h^hF@dnfog'>bnMXikmb)5CBNoju%kUZ`C&D>l7
%2oYr]Jd-;:Z562Ta[sD:Ma.\3Pei`S#QZ<,S#SeC\ESdJXb';C\S!X3e@MQ):'adA?DDEG=&cjNa%\K%oWeJ?"]2>,L*>E62(D!Y
%9?IQ>8%%RicjYP?S.WmAP:;U1=#aXRg7qntrD6&7o9"dcF.lS7BVm*W?4I)B1LCPG(DYN,6.\B#p4*T"hF)o#cNc^P6id!A[p[n)
%\,n4PLD.">DZD5jG/_+,Od1HA'qI=?=RB`0)NQj`f/-jQ1<Tu)jV\6<bdAJh4<*uD_K*IJZMk1`AAKLh.d;"@Qq,Z!,LBdurp7a-
%@8P5!2!,qW&>F_]DAmRFqL0#ad#`#K/gr,^C,-@miIqX/)c\pb<Dh$6(sVJ&<(W5MQn_<)ZuXouS]sg$Q_hop_e9D.b]%o:De`HQ
%/1<+0/\G7d&!_jA@8^gVE@T5N>=7_?.#FC>J]S8V.g`aPEfZpedbYMU/>A^XQ:=IQiR'D!j.JrT0NpPHSIC.FSL0'1-F+r[l$#I#
%i/i%UGoFX*l-suMK#m7D$'#+:Vr?Z"d7H_i$XfiN5uNf+j:6[:4>gek0Lf!oRh9T+BH'HF;,COVW3"5LD'/fsUS(o^QrPG_K47aW
%)@d?`6brY_^GR&tE@QX#Ceh[5M>EU^15$,+NLA]PP$PtHP[cJ]K<<=YoGHe1n@1PlPe&n'0q(5W)9Z>gm0"!?/#S\4Lc)Pnb(#;c
%Q5,d.AE$!R]c#ZY=I>7?WH!]uW7$=GU:sc@YB[]'0YXJ.nS71G)H:-u+2G9%l+9i5aZt:!;5%Acr>\(#dhq2k?.rq;&62_<*3Usp
%<t@k^#h<!/M0'q9Oq_#g<:p@N&/L'ildU0K8$Z(1>;I/SRV'1sN:O-2"Xa/I`qD?U(A\<#ES'E=`Fmi\g/oN?7WSsMTSb4(RufK&
%`^Q,.SL%A%Rp)tBFr!;m*G6bD#6$p.P>SCboeC$UFZV#5_lUcQ@*/s:`ba>%7(Mo(iPS;XQN_Db&P"8(hYPnr!@JTROqd$J#>Dg%
%`Y];$DJ%dT_$UYE\4qoE,lhhMN/+1;:#cZdAG$0FGbpoV?+n&gr/!N>*nG#k/f$fpC$LbIPG)9Xg+3R$PTZc&US0-:2\l?0K5"@-
%YNcjR;jiRXjBVL4*O>N:"LgkcRkkg_2<>WbBZdOK2.gqg`-^uXCcqr#9d`'C&'0<C.Aet$4-`6bJjQf'Liua@b1n(i8D0.>0!QLn
%YR.L&PnFrG@(O[C+-fSG$'.P>H*Uj/'FcB'T]lL%Jc^`G09Bc[#r1ZOGPeI3#(r0i7!NQ0/k^0d^!d9_2s$(BUKZAe$B,VDH]^h+
%^X@,:P+3@/c71IS@N=MNV"@D3O!()P[12BZ;`,\mkumJj)'>HdR;5cg3E['h8phJD];Ud;@B:25O^Lt1RL(Hq0m*AcFt.ksFd5-5
%mSF+[bUr01&O^q"=t&$=^W]lfTNYg/hRtH^+ClZU1KIIcO<Cj'!M[;V95R3/C5aUl,/bn=+[AYX*[(WW4Tu,JJ!"Z:A6/l1a][;D
%6(Sf4QFcJep0^F2aA,W9.pJ@rGpr/RAMc3#&Fi<K+Wqhk`UI0[oQ\1HAuc3.kI$)*Ku[#\RLT[\C#67q1#PEkq6N)\!!?a%7'JgC
%gCj#7giWj(H?`P,?q[R8jDjBXSI'$\<bg#c<2stp]W4V>e.E<jh?ZOZ=Po,h:a$&ne'hg6N8o,*m1W*!$.A<KC`@I?g[2nEIoZ#"
%#s2AnV%[=KZ`_e9(c/^p;Q#?^4<V/8frEHqBJsqM@ST$;7RDAfW&gpZj-,r(8LB24aX$TuB;<cnbVs;p+.Q^J2PDObKk/EO?X8t:
%&0-*i2E8sF9%]DI]a+d;n4$'+-Bf-li.?bafgf@a.7Vt0D%Z^Lq8e(#r[Kr$;Sa3DDes*5WX]deL)1C>$eAI^<XA.U;]Q6<l?Tud
%Hk%"29(j#2Jp5Gj\b$kQ$cQlIfkXde>X_+p1Iq3G]HCBU7nSRFjZuS[?_U`ao`R^uDJsTO\oYDB-D4)-NZb&<:&4FM(5NL%?=h1o
%L6&?nJ6j@VKB#pT$h<ZW*E/X9<9'npDh2*9ciG0n>])=Qj5r42Q-%dTl)[lpq"X=SQFr]p(5j0sU^>Hs$FMGc3f2MZN*#W\KQf(7
%/8ddNJcXpLhtBQ4SFj&kOI7NeW.bfP%ZGuP$a8:<^-u-g&I#KB7&"n]d3To4^^<@S95/-3PfslVMq$mfaG`Q)&mMR[[/qhQ@m00*
%Ahh;'1ceZ^2-agdX#$5ooX[*M_%Mg(6Qqqn50)"q?ppe(^R^gIS*BLL,XiCb1;,>UaTZcu^lkTI0ie3lT(rYanPI:fSCU*uRW$Z;
%X:[f@[RnkR\\QnI('&gr/5On&DZRupjYj/n2%n%n"jEr;H"Q#g)%[Gto4"^%FY]U-^f8+5EjPTc(Cn0[R[`JmM%X.`7Y^r_ek-Sd
%$6#j`6I167)D"sRb31NW/KWG?MDsHMi?I7J6`P\rdUdkE_IUD1V1d.0H(nK3Ma'!5$i_T5\QjbGJC,I''uMMZE6W_-gWri`18WW`
%=)LL3/SaF5%PJ>Ti5Sed\QOh>7bC=mL/@R>6]6i?HC3GYdfRF%;;TA;jLJV1kH\NWQ=jM:TBB,qXf]N[MoNVa,$Y4FYW21tlBT8g
%2'mi@>=Zj47eNp\K5h-8@I\Qp)cCC^+E]-F'MrdJcs$Pl.I/:2)T-S+<WB3j[XtWN2"gg@JA=[=>QONZLr5YSPSj%,M<k5+YKXnn
%ZS5T%R8'>PC3LBgL@XAt)9jo$HW6o4C6R0hrd7Q?7!1U=oi5El.\r/m,tb[qW!+RMXEJJ.mq>;:KHtsH1UU(#J370'6]mGlN1ZN8
%$:r[YWN7PJ6a./QD\Eo)"=[")jTJ,=I"E9c`CiDgDp:KNN<GRgTVtUH-C^:#N)I=ufQgKi:!_SIL_FkAEZ"J$6p+k:H8HXsGQ]T>
%.'qC>B0^`!$Tas":6b/qN&Y$B+[L&\!G(ZJ\?I2M/nQdKb.N#\gbAYsTKjEdRi@br:hNHU>)4&i%L$JW[9N$B#[d^!%2,>&>&*pg
%147p,oU>GsVF&-C!7)<C<<jL[kV`!N)7?W!0iFsgAd3ehKqVt65^p#_+!\e,M"S)$5I[X"@@l!RIR5oUAP*`rC'7;#OKf_=h?Fo_
%^3b1nIns]s<Z]ed!*I[n;7QSA)K8.D;$5B2&A]1s<G%J(O\7M2R)Ve2bQ('+cHOqI%Rf*6RtM4In-CY@]r8-/6Oq*>GGl*<CJl][
%cf2*QR%ZnD64T6C$tr:?XT<QSbP6MW>;19j++tf/5n'JOG*$frEXnhEcir*Q6.K2AggJ*"[fcNjCHrRJ6qfSWI$p^`i#Ca/H4&""
%!3SsXD?M^+J]T&KI<IEi"!_\ABel=0&jZhI7elcPEmQ"j?o-0]I'?EZjE=WO+e-"CNjW$tbrZrUTEUfN/G^]f%aHJqmkcLhri`$T
%@*<:c/NiIc$;ko>0k89CFW##g<"q9=r<+bN1s[em1r**&Qoq1\Q%bM)QCY#!KL@YmBP4]:9mi*Qk<Mq!A&^0:guGOnA^-)uUR2a%
%V5nSS)Bs:Ec+3k<:unN9(:fQ2UGssmX(p>D.9\a60Nkf4('6BoB+;@2^reDgWYPS=)]<?pR`[Aq1,2mh'ee13)^D^$k%Eh"8-..0
%I+[[c0H'c=1-X?LO%fE3[Zb=>"=3(T`$OE"(^]_9EGrWZ"!)/'AXR%3q]YS\kV[q!+A`)bP!`iH%"S-<3^C&NZ<TF/p4A%UDHXEB
%jSWMpm'uVq98RK1IA6&a=QGdMCu+[ujD6%01n+66Q#IIGf$lQf(F8s`WWKq#nEXNaN!h=TC(`TER-G>A^C\qdBnHjglUc7b:op3H
%-r`E](ns8$#Fh/V![,L'+)>lbR8lo\-%W=!2bfeFU&Dr\UBWd1l_Q94iJ5CrHWY8QQj9X2Uo(jdM^q1!DSC8rMZofs$pZ*t&>FRR
%.]F>Bc]qulO:rEmEO/3UTp?]%@h[XN,A9@4!_#*rn2lji:G`u_3b:Y/mM9Ou[_`AQei3g_7V%K2+a0iX2'=<g:_@)qQ8edK)UEh_
%ieejVZ&aWS4GDt/:oT#+Q0q)5bA0>$(:cPd[Xa*H#A@?!10i_Uk&(nMk<D0M#.@*gL<WHXh*U+j=!:PDQ4>;FM,Dc..pc[<8.@u;
%)AcC+":_CociW_H3bdQmeN,O$O<)N`Zh[+Y(ihUB<Y6?g*HGO&k_">!:eI0eJOm]173f:-.2I^kjhU.M.55Eq9,gVn0(;fjLVtpQ
%.*l7-i%6m9$U<:`3:9rOTB>9\lR,$HkU]-36^_&5"m#3_;aH@j1kn&b#kA6nC<J]S[iHBg=ug08&u`%U&CunDqthLS[]Hi-pSh.%
%7%kE!r(bh:$RLa.4!s)XdL=gT')@ER*AN_oJ<YU!#,Ln;QbE)a#1,[FgQ@("eR[9-FL?7X[f+IW3dD@HL-\W@We;a\r.J'4@Ds0U
%IL=eC@g`HW/H=WGddW?_VNMmaFhBe0LX[$'%UG&j"Pg;Ur+[3[4*2J$)3c/.baHcgD6MWE'c#kX()NXZU#hXa<dcT7"Q>3eEoRra
%WZ@l"j>%Y5.1gO(bh=1I+DB[I>AU,7NbMKl?3V>k_k[CAX_nuXm9t(>UEo:-L_9u*6:+#P.W-9LoQT#`Kd@F8Y8>9iU'3NW=(3!S
%em]?n?fl/9IT]kX;u[kEVc>lFD6s=#bdp'+eb.me/Y(\_.#";D'ZXt/dI^t:,$BuQ.Bi!OeHf]a.&oJ6`p^B(LB7BM=F^H[s"oUJ
%-O-[UKD7@E]#,k%FZIW@&Hi/Fq.f6i<lJbJ#Pc](L.X'#_s?C2FD6.7UkNLWe!:#8:K,r1q@8J;D(?uL^oU9k8o#I`r*lVt$NS(N
%)6fdAm#VUj"8.s=K84ej+n!2+9!EP>ZdosDZiR1-,&*Jt[@d/7=HSr8d,Bi8p)=B'5/dMoL0p_.HOB7t,?DgbTa=M2<mK>d#QaeB
%_2$,&7EEhC0kf-LLPF.Ua4NkdE5ql-kecsXTW&NtiAT)-XD$KVo&_rKm!]n:[U=+XjgNa9^.DrI\%pKL1/h72hl?.N6]MU;IdLc=
%$7U(Q3V.P%'M$N;1:Yf-<[\+#,.X7u((c.3&q!1]Ff,4ING?%kI/?\3+k28;Z[Se.>QcCpp=CH.6OPTJM\KsWJgPFC+QO4^:`,gW
%*c7*qEWE%,CJhY`AY]=!dgq+0KR%Huc6--lbe]+;jb/_DSl?C\.$/?=J-mX`hnq&^@++D+AL(BtI2S'F!VfsLiKmn?7+.??U^e7i
%lp+cT)e`@Kkm\->jR7(4[(Kpk)1l+Fe_Gc,Q=\kjE2BIHGX.EAX4[1<V9Ae?a^Cp1%>rk/GFQO]8\j(04_f4!XsVr6JLu?greK]r
%)0Zb+SFclX]nn&(GD(&d2ifKq3_1/G`)^Q+rbdDU0-GL^MoP,o^l0tH\]GEcU)#j\CD/OhDk;o&`gtq\9,Jiu-p#0?25hX3)W,9M
%)E!cJ'U7\k$Q3$nO8qpk5Yi$9f5;^IA]YX'cuiKD*-i9`)lmcV\7<"-E:TfE(V5.tNc8tMlEl?^2)Q`PXObBsKD&5Zd,EKAh+g?k
%+J`2de,$>O+`Dlhj=QR;ltu/gcYa+o:K.Cf7fSc1g,R</-Q`2E88m$W7r3"^gf>tE5EX4PT:$]>Y=+S=X;.D)$N^^Y:N_2j7OWlX
%O9;m/#M9A'^OKk7"o5$!=;5tOfin`9A#=>S!u*a5P9t:Bed(3C('q"\PNE;`:t0sr7i4^JisTit_mBl+Dk[!H7R)R#$VAc+q)7".
%)Wi'5D10T@I1r*^*JEhLY5peSWoBbWSaQj7bW:P7PjUt+L&j'&U'!OdL4u1,/>&$s^4qIK_P[Q/"RA9?Th#X=lbb<IES:HIQF@:S
%pTV3]1OR1G'Q2GH*AuC0p+F_KJ/u4)K;&C8di=-OK^I,pKYMoV0g@5noC4M8QrID!o#q/H&pRE7!NIW+Ot_KnQM&3qAV$RYeu\l"
%&K3MbH^Fqe'+k#XC)VmumPWd7p`U8'1_d)'2h5`$"/SkI[Pb5=TkuU/,g2K4E-(pc<K/3n:)FBWX1l,qB`qr-@"sAoYW)hcq\C6s
%:j9!=1bHo1%C;pi0G2Lo4+C:X0N2i@d>KHO+M+&pmaP^(&[`$Qatn`!>;?5c])MpLKk,H<HE1e_a0LHPo5"ds[?KXW&eQ>l@.V[R
%Y&>aHC`ijE#ta<^q?#t&1:Yd\,;H(c!D0@?6.H.d0b2D.U74#M!ufZ582g]`-$70]c\)_=7In:$`<L_5ncCn8b9>bB^7p%TQQIt8
%1lWaZ$^VQYK3DAJB;Y,io8hYs:baH1;V1Yo%iF%WC`!I&/u0(0S*2qY$JU9,>+,rYU=tMeK\$1O@&jkD-YQBs`:3GCkjn\?7'b1c
%63el9'9WP5_<knfp_n7^#$i!!%'UI+I/h]_+7>ps?Puas-B7Kp%C&mY!aVooLREo0[R5f^rr.0f(R,dMBUd&PH1he;\MNq2D:$fo
%FQs?fEJ3`+AV?sN+tNT=Tk>PF?k"M7)!NSh:oHo72Bb>bk_pXkHW(1D#XrA$c7g)-5G@qq122C16[?(T5MlB$"sl2U;dBV:;\%0g
%[Q`?LK@;nF1Bn5R]#H:^=52>-Y&:c($ZNVq_tVoZCR6!O3GTk@cPG'eZp%\!Y)V2Nh[WqaNIC7SAjajYXJ][r^iA/kqsDb<fnQ7A
%mPNBjpb!P)j8^3=mkVb'kk^i^r&nhhXA<N;S52l3U#XMC#hu'='E/s$nSdub:pf3SDI>h#5)E,D&$=R<=,kd=Ar-Ye!=]//Q_It>
%RKTDE[D"Lag!)4^q*^3ql+5/<ImOXIQ^YBq[f*]%\Y.8C)pc!.nSMH7<&@<Y<./-0`[5S@n!s'PnuU/iYUhn7J1S,//cuZG'1Mu-
%+u;<DN$-VBEEWWfJ^Q]Zr>nEVZ4fAbmrP/C&rpR+9*52R#kQt7/O)W^FS<j_L)WB9035DEgDX/Zd'f?RP.ou*Lj9bY*)3NBO+HWa
%L-Q^3g&qo#OI57_P+!!Y(#_(B69+NcA8ti7lrX`5]J/&l##0LWZgU9Mn1_+3peB9h.b)+:`/V#JKb%3D"rLbrP(+qZWTP!(//A"&
%F@PYeK6i^;<k#f$j/3LhYr?ejTAjZZ2f`-U-NllGd;r73K_64Bk0R4JNC%"k<"#a>qj%eK+2SFk=Y7:GL27l246X"c\k[7a$;!$n
%"D29%2(JSkNnOYTSZ)DPD`)aL+'Lf'-d:aBJ'_c^/\=4'I\EBc]T>r`RiRAb="U]=QG6Ju$T8M@`2n^NDhAL+SW+84NlV^CXj)$0
%H9I;VRt)P$X5Wg-@)H&qS+;XqcJF:6m`F^]SbgZ7*,i7_IN*+ul=lYQDB<hC`Sk(K_ItgS<7$/r!Jgd^<RogsnJ9LHkug,o@aq@$
%nbck)i\/2pFP&iErS)1nos7%ISi5^OVEkN=e'g/+3+Vo0)f0p@.(eHf1s"NA-L^`Y%NC/hhen(K:\.p"@pjiGR)G^2LL]HH)U>;s
%@4QFOKk5g1?M!:kq8ta[W3S$$;RO8K:V&Ni`f`J6A&U=4<aKH\J.cD$cD$n`oi7V]7`kZlW-FX+#2A$uGG82AZ:=gO<rP/?j=c+-
%1_]B39lh^#8kU'8.$1$H1'1Un1']9l=r@=Z1sgJqWEn@'a/qH_q.9F@]rlf$W<(_#Q8hJR4SC0F]OH-kom(D,[;SPPg`P3`&HaP1
%kZII<%;Y@(A)3uHbj.J]g,$pBp<bp3>]0iWMd):O'f[c?CeD1/6K?2f'f5t0)hbGAC-m0"CYC__r9S]46V)j3ScVL$[s,jp*Tu\Z
%0M_6S7']#.=ll?NCSc31JdbW]RqM75]XCZI6[e%Bmq67_UF'2,8S%A=k.hV><DA#198pN"(A?*\oP%-?FZ*I_l+-iB#/TFdkX@?Y
%faDcK*2;3cHdilj7QR<Va$.a.S^M@9E)9]FC\"I>a!GY_oF-$uSm^n%1b.>iE7D%uC\;DW\Bp5?9WLNo*m;R@3J$A_M'b!_LJS6H
%$-cE\=GVO;"bMVKo@2c]%5r!5K4Q;2DC="LDA+o6P:$p''?4BZlW1NSe03"_*S+<B#3lTRf\`+MBU@C6iiVD=jH[t"a3gU@RIgNg
%!lscuC7'AS)q.Np9'\HBLTZWl#1s8F2;JrBg,s.tV5[Y5?e0Hmen>C:qR+ZuQoY"/T]=D;coY:QETe'h498WXn854dc`YGJG-FpJ
%.L7982L03O:c@m9k#V?oesU@!RJ7uS:ifUud4cP*F0@]X@W]\S:?oYaX^KOiOVDXYD-2@7Z7>=^P5,^_k1GBl(H@KBAR*kj0MTNd
%iNP$'_,e4MXPpTjWKp8NkbdO;:[F+4@'*`?*.!eTIF&)^,H:VQg&b=/TU5$NLQsVP;hOl"If/!d<0-oGLkh9_D>8Zb<i`tm*;\++
%\i*e8BO<4U@,B35CI%s*Nn;T1CVQV6O>d_lgbHgOO9fl;V-u`Yg9iEBU]f[M)pu"'9%B6h<GQNIZi^ZGE/?i=ehI3*XcG61WS!Lm
%l@FTQMO']KKiUIDg+JV_XQ@U/)/YAQ3\;b>LE1.l:9@``#gq:?@%'N,ND*NO1[ON*#U)%5B[""f7@4kA@ML\@GMGI,1RMb$-&h*p
%F9qRH+HE#G0cG#-%FDKU@KW>`G\',ZlId>4H@X4CRgiTh5f?aMQ5`%R@;h]"qNSH,(j:u2>K]W"k[7Y;LLNXu)Q\FKFr)&jd3i'^
%D)DRPgf0taiN"hDgL$SIj'Vt=#QGMd7ApcDi,EA/Lg"^EelZ$Ig)s$Yb;J=cZXG0:$b>rDY1@TqbRCOZD&`#hbafF5$A%<6*,<k8
%,jfnN:?!hWH)5rNH:4nhRQc9Q6ZY=WI4;1=D[tLr.bd2pM4b\3.N;NK4D42-Y#m&8e9N=?7=!P>>$F&\T'Wa7UJ]IZOABA%7Aidj
%:;LLI>8h1`_Sj+OZ<a8o0un9X@S>+:q0Qr<\gqI8PDL"gLi&3:XIK[+;mkr"<Ad3<:ZZpAX=DFAPB*o6e<SN]I:uIBkk\lRMV3"X
%PBCLj<GRhoGphp%U,b=1%a&(_g/k]ISJVb6"-u,$kR(3E&("IR2L@>*FXpS?+dBHq81$jc.TUjK^/n=k5aZhbX#8I-i[qS2Pt,4*
%CY.aB:$#NH'f@B^IV?a[E!=)B\oe_Md&'$]0hE;[MCQ@lZ];OI*/]O\CJg.uQtZ@!LfP';m-1NUm?RgHN]#*=@"SVd=iSb'j+2+,
%En=PF()"d4nGrg_[!J334Y^RY`+uDDO(WdI]MCLe?/qS-^JWJ-DH"t#9`3&uV4gb(eHVk>f_bF3]`3l>(5G=G@\#?Ts+E7+UNWXr
%(lIV`!i"h0/V'prf*<i_72SS>)g>Lo5pP^LctF9?N5@K&#97NA6>bW5IoWk-kqLHcZ0;b*'Jk;g?)oiUXhKkR2n4DBQ.mkG8rqhb
%*Ys?u[F_WK=jYEu`H7S[">*/JTHfmpW9nMkUa';Nc%mpsk-o('LNDcXgkQh6$bdD?Lp.KF2Ua$V[_.Hdj0=a(Zhs`c<GnU4gT(]s
%nZd9$C(9I\l)D5dD1Jb(iVUCY-4\`"Z(QrXbU+.XCaU6\Qtthan"T\.ZFiY_FXs61I"?#UhdJ3`B.F?\oiW6T64gO"aRV\DlfeRi
%UCE;necBNd>6\<?Yd)e-3/>hq3idC,f1t*IRNg;n]E<qa>s@-QI&?LIXs%*YCZjNbA1g^BrHQmOHnKn%=C5HZ2TmfQ!13N$PBOJM
%8c,3*<n+mF2F*"\*h[])b@(:E2g<qb./6$Qs0]1RN].I(28,F+K@T%$5UN;#(]pUH/".&\-ZZ;eCs\ighhTT]VE!_/@FbWDf!T0Y
%puQ_j+KemqXcKo@`b?6&?XFbSn)<n>s%DF6+>!3k=X/Eg/bES5rYOc`lcT94J^8E=Hn,9)FohN:<@e=m!hh@&]+`lu3CT#6D1pXK
%>H#0[3aMo,!VmsQoN(No@@mp<S]s'+>?r=eftta8T6LhCX<i;7>C_f/j@:g:,`c9cE<[m35Qa"VcpkLfBUua3UuNcj;8_eAh^(pQ
%(e.^pj0T3$YHJJg2fWT5S$rCF>6R_uf$G"@NS.K)65d(#c`^&%J;/1Ud'eL:[(adree&uJk];Vqm>(8pdJ)EOg]ADW?(cUsICR"L
%e!iL,>]J(0a.La1L[ko)!2;rVTc>u8lrYg@>:U)"AP:p;jk#\"Z9!=g@K`#LdW'?`Vd]jHT?D8G.)nH?G79=sFY`3tg;aIC%s)5e
%&T+-@W^3gFm%!3<7aa52j\5#sL9qPYfIh?jfmjT;c%nb5Ls`bl,G3=dL1i#:gltC1eG0^&K7"@K04rNo*54OooV>WW\/94#.LGCo
%dkcp,H'I4?ZJR#b"QZC+B>UCm3B#B#Rff/m",'cEVWjc_l'ts\%R;S5S-A4Y'k^rnPeBSf>/'YqfZ[+pW`\ePT\t32krpZc_Ja5O
%[qKYk@Zd6<XUWUL&7inW&>jlU4g-1Jmmd@*Leh)-2l=3tf1hj@+XNcV`EF+uJka$G'K(/PH/pj@g<1$#7"m4"DhAK@1TVV%D8b?d
%(&O2o8icfsJ1^p7")J.D:PXlm`X]?tF0]Va8&l3&O@BO=q,YDr>Cj]TVb9]J<Qss<h,L=gS;_\LfSU]B$<iL5(ckLam>[>n"NN'D
%U;=&=lp@O&jOIJ2Zjs-;;.piY>%cW%!=a(R[aYKb%ag&j_8dS=[]3rjYUKcQ>7'm^41),8[19UH%?oH42t==jPlC+c)</Qc=aW'l
%(Gd:H#1LZrPW@0Pp4Qh5e,t\b\ORMBHAk`411i6s[F@r;]-8J07RL>:X_0V:#fR4R*H\ASp?G(PIL)gk.Mp9IBY5D?PQt6qK:u:^
%%BuR)HX)jG>;]mML<XREi>Fa7-l\fg\f(F,kKA\t1eCQ>hm8'F!u-W)(aP)n8'uq*3%@W/W*8)OaT/1JaFEV#rC4+p:gGn''F+*0
%ErSgqCK3XX>\*9;W7>&]&*];C>aur\!fo*@+kp-2QIUT3K^">/@98OInTUDOKE1!D32X][jTmhl?D@SpK]3[%'kA\+]`u[bNeQ8c
%X:af%Xhr+JRqs\[(VYNj^dKoCgP2n<A27o_Cgc#?9H_fJ/Q1^K*U:iWSX5saM?MAte524CPIMce4kHIjK@&(mTVSCRL75i,;ZO,#
%?t[V`.7hmli;q,,qT8#9<+OH*r?3+*,2\H](/L#(R"7sC6di;ML(ho6+$jba-%&CPN95!D`<6=@*",&QXo38MCe`!GZ@`.Mn-6AQ
%o:_g2fPDg3U%)s8>.Y-fWkG\_X_ud7`tA]b[?0Wdn7\PnM&dU>.*Z*o,8L2(epLB^:Q\mS45fUe:q8\FoB4h9ZC,s/LI5^gG<^3"
%MqB593B%$mf^I;T4q)/L^1IDoN`q$D?-\(N45Fp1Zr:M*LGK'h*gu,c[ik(jnci=!4mY"Y)LEqUHV?%?6$+$OF6Jqp,=Npf<CL;Z
%$&f+X[@1U,H4]^,"\,@$-$*H5;qsSh<4-mH0au6Kl$Z#M,?.<2`[C+N_3kfa;Bo!p\sPs4!>cl"fJ*fZYo'@D%FNCQ:XD9N6Reqd
%>X5YO=X61f9H;[YQYmdqCr)OEMV2bp3:j$<XL0HZ\TDT><.lGA2(4W>e!@Qi#aD4"91EUBoa\l660f0po/=t#8rAH7]n[\=&>g38
%i<IX_mf724>__S!f\Gq&Wp!4t9?JBN`4-PcShbOj;0l=pN#E6NksanCBb:+BW-Y9P^<p=:/`><tU5]9>N_5qeF:E8l;&X6dZ2>#-
%!*ZqF%FlW^KF>"9Wt3`^^9PMPaY6pg+b)qrc&"L94j>JtC+abWP1OAU^_CL5S8][]o**KOXf%]/D0T!`Q<skRC!5OI2n(EuN.O1>
%[)*GCiVBjoa]V^XEs$Hf^"0OkQaO-8>o?_IAHaq&WWP]CB@5RI..=QHehU`f*/nZK^m.A6=?3GUD*Nk@IYWm*keOpd5#gFe"u_\R
%/b"A[GHn5ZW<(VTe:>a9TmiPa"Dr7cL*\7+\A895XBGLP-%i:/aai\ZC>\aPp[K'@Y`&b<<niDp45.KiBe9'OHOd2eW<(VTe:>I1
%XW5C^JNB[iF9WlI[H.iWO<oeBjCuD-K</L\!S=R*^Kn;*`a9k+1)=8%m=Oi9UCD#Z4:Un5'$p:CYX(87%78N/!I<!R35d)e'3#hB
%,SdK..&@?c/@%N.kWt4G9Y$3OBAP\W^QMS_Qp`29Xfr2+ln%In5po>kO@QsA)?YfSfNb'Q*25DRH/#jujK/SQs#d]4^3tas:!IM_
%@8L]=4R61uTEk=MrDfp'7GI*"5>V`5a%4Y@&.?oE<d7+!1d[f+)2hl?2%(Sme5=g,2"Q%5TisQ2S/8]0.%%hP'hH,OB@2]FK-+?V
%*)+.Ls/W..W\pG//:g5Iia!ghkuFb7T7F`YEG&d8/P$RYdhKL5_Q2*gs->)Sm%2pcDuDWk.X9n`,WN1FS$I53=oMk=;r?e26W>Yc
%Zm-ico"H76e-_fo>SEE/7p8<eO-9aAMaS1>g)d?qA\VPgI/fN^+(oF+JgIJMir[2-(gYgF..PAKpaur4\iN)=:/lAa"idJr/UbdJ
%9X&h17r<DgHPr2R8"Ts`A!Q]gnYY<dC=@`)5o7cH1<eH[G\:QjKl&@-UM-?kq7p^QVZo043\/q7]Dp*_C4L`2%N-Tu?u9&JG0ZVW
%[WF<fRCu;]BDNTY;q[NRS,b;l;Q?F-JFlt\=?ckO.;..@5GjFhHku%6flnE-U03!<Ur]BbC7643<^8J\bNmUr!,W@*?Bj1-+?8"j
%=EIB\'8:iHOH-+aN$IUN@KZM/p0tpDT']5@\:Y=R`0R:n$;`0s`eul]DbWXN,<h4^hq3kmO&iIp53^J9JSmSDK1;'k?0G6@n-I;K
%%$6o+%m;K[G(c<I'g^i(W?D[4d(Z;i$38##a77(_W:?9m#.1_Kn7Sg1Bk"FgU"bI*CW6UfL-4&5]E="q`Ain/[<R*ZaKT6iO4?k6
%PX\<0-/_'/i*6huWWD_T66dH;jru+rAkg]pc(QG:TTF,`=Y3[dU5#a6gcUZSP&m_79J\tDmY$n2L-)%(5XjT[WXbe`I8FdIq?ECr
%9j4>N.1K`n$*2RaY@]^dYr0ds<?i&4Y@Y,/4b=cu9AD>f!/_NX)/M-:p^2jlT!c/8@q/G<*RqfO/@hhd**HW#>*kag"uJ]rm,f&o
%cE^V]CLa'p;AKZ,M+7c'[0eHC3;%jr^Luq.BP&oLTEh``Bc@1E$CIQS\JbUC'r:KKXjql$Z?<)46S4C.^'3.)eV@=oI<p*M7<BXV
%2(.'/3`5d=f#[<(/R*.ejZX1:droLoR9I[EegL_"9#H`Xd6Ib<3)(Ws)ErG>L0n]3Jq+/a.EHti<0b7G#jO"-P7`DX')3J^<.TQe
%dEEQWoS"`*L9BkHFATuBB'/Ns"[Vq5o,=g^dVXBU)F%dd3&W?-DE3U9L<<8'`XKXnX`16oN+W#f;eWLsWoO7jKfJQGFIggu)7S<Z
%%C:V[`OP%BZ13_Z!E`9g9n=Ma!lR911A'':B46.sp<EAG$A[:]bmoT_D]P+^#4T=7BOV?VQCb;BY="5U-4GF$%&T'EC[e4*5/10i
%G\4n\k)p7H5nm8#j#K(r7YOm,d$(.\+O-L"5#er`0*""-Q9@AhK//"oU(W3CJniBEKEaHf_VJB.[JpZt790WY6ZpI0@gBGb/L.["
%DsYhG*Y0p+?PHHN;(0Z5+(.@tJ@":J05??k"TlBkg<U5DRB#C)&h9GN..dfb`5J\,#Oamp(#fn;NO/\?q)Y`5X,jV=rU^Sl'O)1]
%,L"o)mI=^di0^q(J@J!I]-B<oGoQgj`XNn<j"k(?/*J`d5bU.Sf)(+0Eidg4onC-X$n7TU(o[Ulq)Z_8eVEDThUp\^WVZXi^n-!B
%62*1V$1h>B%H.ZMMiDrdD(<r+,$2uokKsqFI<HD<HE:\imL,-.$iI8j#)O1)8a<X*#V9Bi4/@RDq&Q$DFWO!k5g-5:Ychp^Xm]\>
%YO/c(;6PV0_)C`')A(m@N"b5dE#g2_;]h)&Q^IU%6-#FJjL#b:K8RN[$@*_2!"DKc5X,+mZYp]jotohP3XsP]OC;#<\,<K!U(=`D
%gZ,!9qpS(boX&$W6aU^&Zg+2CqAP2.7jSM'P%9F%$oW[e.[4)Z#O^SoS^@_"Y&4!ti;"sn-UQme^3>V82QN;g+FBmAO]76"ND$Rq
%8pngjX.`KC&:d?>@2Wh'_S]9uK)F7RKXP$_<R^Fa\9pD#&_3ZtGU=,Y%59.17!f6"U6X+Glm'ic/KfuV,%46jMakf7D4$&KUZh&C
%KVWjfi*)5[MM>GPfg_2=GIr]C1Ud\^a=5f8hDOI(U?G`0U#M>)IgLGm[V8Qp*g#I4b/)ljSs;J'ra;&cKg%6aCna>,EtOE4e2\Yp
%7&i[Hh<n&fc?>#S17'!:C:0$YI(`(%AF:rY>r75o[(ujDKD'I,O(Ngu0c$253tV)qTrGj\d-.,`;S(nfVmV-(6O5>&MHcAfa6Zfo
%=L&^$U;^*8`$3QEI;,C4ioQZ'_b]n-3$\eqG;"r\ETPk?5+pX,WftfO_7nS9Mjm(^``%Ib5AKhZm]"P*fE+\JZDfsYkL%Q_H`VH:
%9s"CCX6t9A;Pk`tBj9.k+'_`<7^if=nSiuPcl<Y5Y!"YOe!W(_)`5CVPfR+%oj&as9o*4j$U$Y<b99tl!C\uRr%3u#!PI!@3[Ek]
%B.`h8l[d(Z<lO5-;9Kl[#AW_Xr&r+og:K0Vhbalo]njsd[-d!B+cZJ)qW6MaJf#qYQt.*sGrZ9?W,$u":J-1#k0R#ffs=]#!Dbt2
%OuDt*qL7,'f/%d3PK]a:Qq*!^org_0C,M@gKp'V'/6]V&D$ia/eT_bVL(0#&0Ved]_kBeCUa"XXD4kArPLq+Srt,,RC?rg=__%O$
%h>u=G\.#i_@q38Lj_fi*Qr[c$\aX`Y8a)U!bU18aP+E6FPI:*DC/Dmn8-+_"*OlOGSP+Fm7]=QD-U&Igb<efH,Oa2C)rCBI3->ub
%cf%$tXE@p81iR0dfR]fLPA*R2B>#uF3,L)!(c9KcNr%#9aD(3T9"/hgUcfqN.B5QS/7=&^LS,p4/WTQGd;'Nickll[/.2LC\!6*I
%]+&Q\:[b)C;WC7!7%G4*gj#-BZfs;f'+VenWrj/+&.i%H1fh0V[Xk8i[SKc=kNM`BU-]rq3f%Lg\P?!@qc^!M>tfg@HmQrm_juT<
%fGt&h?j)m7+Xck^P=b@$%E]1oYr'l8V\Tps3N*Z_D2#ZYO?ip_.B$ZC&/p.'):4GbQaK1J->'IacNn@mBPKR6:%AOX=>&%$W7E("
%Co3q?@Ki'6]#3GiTE0C=I2JTE:#cR/'`e2$6U@DPZ#UPkjDuH0&Th'\itn@>Gsj&B)$6U&LKHSYM@jq>m3tG?/R#o'"TOWc0WetB
%S"uV#Fa49:3L`!W(5Ep;4EajQRnqUY[Ebo8I"UF'.+TiJ=AiQ-ERSYE=b+SfKb&GGD6eUR_mIn@fE\DfZS.%Tb%+[UWt..>Q>$S3
%>M_&;gVfE62D;1NrP)d:5`3[?\Upk;0S?Zs.&UM7CRbV83+:7<<!*\hZM-Gu=QlE1dKmad%7Jd)15`WFrNL$hhI3np1ebMHqsp'3
%qAqORqc#lc.&WT56`HMLK+K6TIto3r6L+ZiK$DFU"/noYPW[O\M$D4.`Fp*k3c/@abhGD'H?[#YLA"!5pmKHi526,Vk$=X.J]i"\
%)k6_QU62Hf%H&P]2m5HKJX47<;"4G!fF=cgnqKj`-o_Zl3S%8CK21\u)ho$?9S^bGD1gJ&c@Q6>Pbi,ng9na$a>2u]Cl97P>./Br
%X'6!5ruW7+3`_T>qo?nWn&Ol,J%NDjiIB[/\@X8AQTt<)hOWsCJ,&j=SVPPij5-OQrcMl:LYmQ-nE1=3hYCIVC$4?j4-0AgnF4`K
%URrV*%j:YGJ+3$PLE@U$pQ,=`]Rk_L~>
%AI9_PrivateDataEnd
